<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小名开开</title>
  
  
  <link href="https://www.kaikai.men/atom.xml" rel="self"/>
  
  <link href="https://www.kaikai.men/"/>
  <updated>2025-08-30T14:15:58.639Z</updated>
  <id>https://www.kaikai.men/</id>
  
  <author>
    <name>kaikai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>V8 引擎中的 Invalid array length bug</title>
    <link href="https://www.kaikai.men/invalid-array-length-bug-in-nodejs-v8/"/>
    <id>https://www.kaikai.men/invalid-array-length-bug-in-nodejs-v8/</id>
    <published>2025-08-17T21:57:33.000Z</published>
    <updated>2025-08-30T14:15:58.639Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章中，我提到了 V8 引擎存在的一个 bug，对于数组的长度计算有点问题，导致在部分算法执行过程中出现 Invalid array length 异常而退出。有趣的是，Object 也会出现同样的 Invalid array length，尽管 Object 本身并没有 length 属性。</p><p>我写了个最简单的复现代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">2</span> ** <span class="number">24</span> - <span class="number">1</span>; <span class="comment">// 16777215</span></span><br><span class="line"><span class="comment">// const dict = Object.create(null) // same bug</span></span><br><span class="line"><span class="keyword">const</span> dict = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = i * <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">log</span>(i));</span><br><span class="line">    dict[key] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> maxkey = (n - <span class="number">1</span>) * <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">log</span>(n - <span class="number">1</span>)); <span class="comment">// 279097901</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dict[maxkey]); <span class="comment">// should be 16777215</span></span><br></pre></td></tr></table></figure><p>在最新版本的 nodejs 和 chrome 控制台中，均出现相同的报错。但在 firefox 和 safari 的控制台中都可以正常执行，这两个浏览器都有自己的独立 JS 引擎。</p><p><img src="/../attach/2025/08/chrom-console-error.png" alt="chrome 控制台复现" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">node object-dict-test.js</span><br><span class="line">/Users/kaikai/Coding/object-dict-test.js:7</span><br><span class="line">    dict[key] = i + 1</span><br><span class="line">              ^</span><br><span class="line"></span><br><span class="line">RangeError: Invalid array length</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/kaikai/Coding/hexo-blog/source/attach/2025/08/object-dict-test2.js:7:15)</span><br><span class="line">    at Module._compile (node:internal/modules/cjs/loader:1738:14)</span><br><span class="line">    at Object..js (node:internal/modules/cjs/loader:1871:10)</span><br><span class="line">    at Module.load (node:internal/modules/cjs/loader:1470:32)</span><br><span class="line">    at Module._load (node:internal/modules/cjs/loader:1290:12)</span><br><span class="line">    at TracingChannel.traceSync (node:diagnostics_channel:322:14)</span><br><span class="line">    at wrapModuleLoad (node:internal/modules/cjs/loader:238:24)</span><br><span class="line">    at Module.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:154:5)</span><br><span class="line">    at node:internal/main/run_main_module:33:47</span><br><span class="line"></span><br><span class="line">Node.js v24.6.0</span><br></pre></td></tr></table></figure><p>查了一下原因：</p><ol><li><p>V8 对 整数键（即符合数组索引规则的属性名）的 Object 有特殊处理。当普通对象使用整数作为 key 时，V8 通常会将其视作“类似数组”的元素：无论是 Array 还是普通对象，都有一个内部的 “elements” 存储空间来保存这些整数下标对应的值。这解释了 bug 为什么同时出现在了 Array 和 Object 上。</p></li><li><p>V8 在管理大量元素时区分快速 Fast 和字典 Dictionary 两种存储模式。当数组规模较小并密集时，使用快速模式；若遇到稀疏或非常大的索引，就可能切换到字典模式。在快速模式下，向新索引赋值会自动更新 length 并尽量扩容底层数组；超过阈值后会退化到字典模式，用哈希表存储元素。同时 V8 为了优化性能，设置了多个内部变量用于判断数组下不同的数据类型并进行优化。<a href="https://v8.dev/blog/elements-kinds">官方博客</a></p></li><li><p>在隐式转换过程中，V8 忘了对内部变量进行判断，于是一个原本合法的 key 值因为大于内部变量限制，而导致了 Invalid array length 异常。这个属于 V8 长期存在的 bug，至今没有修正。</p></li></ol><p>再深入的分析通过搜索已经找不到答案了，需要去查看庞大的 V8 源代码，超出了我的时间余裕和兴趣能力，就这样吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在上一篇文章中，我提到了 V8 引擎存在的一个 bug，对于数组的长度计算有点问题，导致在部分算法执行过程中出现 Invalid array length 异常而退出。有趣的是，Object 也会出现同样的 Invalid array length，尽管 Object 本身</summary>
      
    
    
    
    <category term="代码脚本" scheme="https://www.kaikai.men/categories/%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Invalid array length" scheme="https://www.kaikai.men/tags/Invalid-array-length/"/>
    
    <category term="nodejs" scheme="https://www.kaikai.men/tags/nodejs/"/>
    
    <category term="V8" scheme="https://www.kaikai.men/tags/V8/"/>
    
    <category term="隐式转换" scheme="https://www.kaikai.men/tags/%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>『孤独素数』的定义与搜索算法</title>
    <link href="https://www.kaikai.men/lonely-primes-define-and-algo/"/>
    <id>https://www.kaikai.men/lonely-primes-define-and-algo/</id>
    <published>2025-08-14T20:22:58.000Z</published>
    <updated>2025-08-30T14:15:58.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在知乎上看见了个有意思的问题：</p><blockquote><p><a href="https://www.zhihu.com/question/1936101307632060385">孤独素数：</a><br>一个素数 P 通常可以分为两个殆素数之和，其序数与对应的殆素数的素因子序数同时满足：<br>\begin{equation*}<br>\begin{cases}<br>P &#x3D; \prod p_i + \prod q_i \\<br>\pi(P)&#x3D;\prod \pi(p_i) + \prod \pi(q_i)<br>\end{cases}<br>\end{equation*}<br>例如 $11 &#x3D; 2*3 + 5$，同时有 $\pi(11) &#x3D; 5 &#x3D; \pi(2)\pi(3) + \pi(5) &#x3D; 1\cdot2 + 3。$<br>但也存在一些素数，任意分法均不能满足上述规则，称为孤独素数。</p></blockquote><p>看见这题我是懵逼的，懵逼树上懵逼果，第一步直接撞死在黎曼猜想了，想不到在 $\pi(p)$ 还没有明确公式解的情况下怎么去判断孤独素数的规律。但至少这个看起来是个简单而有趣的编程练习题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 欧拉筛法获得 n 以内的素数表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">EulerSieve</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> primes = [];</span><br><span class="line">    <span class="keyword">let</span> eularboard = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eularboard[i]) &#123;</span><br><span class="line">            primes.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; primes.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * primes[j] &gt; n) <span class="keyword">break</span>;</span><br><span class="line">            eularboard[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] === <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> primes = <span class="title class_">EulerSieve</span>(<span class="number">10</span> ** <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算殆素数的素因子序数乘积，并使用使用 dp 避免重复的因式分解</span></span><br><span class="line"><span class="keyword">const</span> dp = [];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorOrdersProduct</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (dp[n]) <span class="keyword">return</span> dp[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> init = n;</span><br><span class="line">    <span class="keyword">const</span> sqrt_n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(n));</span><br><span class="line">    <span class="keyword">let</span> indices = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; primes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> p = primes[i];</span><br><span class="line">        <span class="keyword">if</span> (p &gt; sqrt_n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span> (n % p === <span class="number">0</span>) &#123;</span><br><span class="line">            indices = indices * (i + <span class="number">1</span>);</span><br><span class="line">            n = n / p;</span><br><span class="line">            <span class="keyword">if</span> (dp[n]) &#123;</span><br><span class="line">                indices = indices * dp[n];</span><br><span class="line">                n = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> idx = primes.<span class="title function_">indexOf</span>(n);</span><br><span class="line">        <span class="keyword">if</span> (idx === -<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Math crisis <span class="subst">$&#123;n&#125;</span>`</span>);</span><br><span class="line">        indices = indices * (idx + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dp[init] = indices;</span><br><span class="line">    <span class="keyword">return</span> indices;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找孤立素数，将每个素数分解成两个殆素数，然后计算殆素数的素因子序数乘积</span></span><br><span class="line"><span class="keyword">const</span> lonelyPrimes = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; primes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = primes[i];</span><br><span class="line">    <span class="keyword">let</span> lonely = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> m = <span class="number">2</span>; m &lt; p / <span class="number">2</span>; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">factorOrdersProduct</span>(m) + <span class="title function_">factorOrdersProduct</span>(p - m) === i + <span class="number">1</span>) &#123;</span><br><span class="line">            lonely = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lonely) &#123;</span><br><span class="line">        lonelyPrimes.<span class="title function_">push</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lonelyPrimes);</span><br><span class="line"><span class="comment">// 2, 3, 211, 277, 541, 631, 653, 1259, 2797, 2897, 4391, 5279, 5323, 5381, 5527,  6113, 6547, 7177, 7523, 7993, 8147, 8513, 9157, 9661, 10211, ...</span></span><br></pre></td></tr></table></figure><p>实测下来 Apple M1 上计算 $10^6$ 以内孤独素数约 3.5 秒，$10^7$ 以内约 180 秒。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>整体来看上述代码是清晰的，先用欧拉筛获得素数数组，再根据孤独素数的定义逐个验证。由于殆素数分解是必然有解的，实际上就是验证第二条件序列数的运算是否成立。通过 dp 暂存已经计算过的结果，可以大大提高效率。但直观来看，还有一些可以优化的小点：</p><ol><li>在规模不大的时候，可以使用字典对象储存素数与其序数的键值对，替代 primes.indexOf(n)。一个对象可以容纳 2^24 个键值对，即最大素数为 $p_{(2^{24})}$，查询得知 $p_{16777216}&#x3D;310248241$，足够大了。更大规模也可以使用若干个字典对象来应对。</li><li>如果一个殆素数因子序数乘积已经超过了当前素数序数，可以提前结束。但需要考虑每次增加的判断带来的损耗是否小于节约的时间。考虑到：$\pi(p) \approx p &#x2F; \ln p$，殆素数 m 大概率为合数， $\pi(m) &lt;\prod_i(m_i&#x2F;ln m_i), m &#x3D; \sum_i m_i$，m-q 同理。而 $lnp$ 显然是大于 1 的，因此可以认为这种提前结束的情况几乎不存在。在极端情况下，m&#x3D;2，p 与 p-2 为孪生素数，也只是等于序列数的和。因此这一条更大可能是负面的。</li><li>使用 UInt32Array 等定长数组优化，这个我不是很喜欢。我知道它有效，但总觉得将语言特性也视为算法本身的优化的话，汇编就是唯一可用的语言了。</li></ol><p>以及一个可能存在的大优化点：</p><p><strong>在欧拉筛获得素数的过程中，我们已经把所有的合数都计算过一遍了</strong></p><p>这意味着 factorOrdersProduct(n) 函数的计算过程，与筛法取素数的计算过程本身是有大量重合的。在题目的定义下，素数 p 的两个加数几乎就覆盖了从 1-n 的所有合数，也就是筛法求素数中被筛去的数，以及筛选这个动作本身也是有价值的。</p><p>值得一提的是，在因数分解相关算法中有个 SPF(Smallest Prime Factor) 算法。它与欧拉筛是完美配合的。简单地说，SPF 分为两步：</p><ol><li>在筛法取素数过程中，保留合数而不是直接筛去，并记录每个数最小质因数。</li><li>在因数分解过程中，使用类似递归的方法，根据最小质因数快速计算各合数的全部因子。</li></ol><p>在第 1. 步中将 SPF 与欧拉筛结合，并将第 2 步中的计算因子数组改为计算因子序数乘积，即可得到更高效的搜搜代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">10</span> ** <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> spf = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> primes = [];</span><br><span class="line"><span class="keyword">const</span> primeIndex = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">const</span> product = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建SPF和素数序号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (spf[i] === <span class="number">0</span>) &#123;</span><br><span class="line">        spf[i] = i;</span><br><span class="line">        primes.<span class="title function_">push</span>(i);</span><br><span class="line">        primeIndex.<span class="title function_">set</span>(i, primes.<span class="property">length</span>); <span class="comment">// 记录素数序号</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; primes.<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">const</span> p = primes[j];</span><br><span class="line">        <span class="keyword">const</span> ip = i * p;</span><br><span class="line">        <span class="keyword">if</span> (p &gt; spf[i] || ip &gt; n) <span class="keyword">break</span>;</span><br><span class="line">        spf[ip] = p;</span><br><span class="line">        <span class="keyword">if</span> (i % p === <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接计算因子序数乘积</span></span><br><span class="line">product[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = spf[i]; <span class="comment">// 最小质因数</span></span><br><span class="line">    <span class="keyword">const</span> prev = i / p;</span><br><span class="line">    product[i] = product[prev] * primeIndex.<span class="title function_">get</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找孤立素数</span></span><br><span class="line"><span class="keyword">const</span> lonelyPrimes = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> idx = <span class="number">0</span>; idx &lt; primes.<span class="property">length</span>; idx++) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = primes[idx];</span><br><span class="line">    <span class="keyword">const</span> target = idx + <span class="number">1</span>; <span class="comment">// primeIndex[p]</span></span><br><span class="line">    <span class="keyword">const</span> half = <span class="title class_">Math</span>.<span class="title function_">floor</span>(p / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> lonely = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> m = <span class="number">2</span>; m &lt; half; m++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (product[m] + product[p - m] === target) &#123;</span><br><span class="line">            lonely = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lonely) lonelyPrimes.<span class="title function_">push</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化结果是 $10^6$ 以内约 0.8 秒，$10^7$ 以内约 52 秒，$10^8$ 约 8900 秒。</p><blockquote><p>在 JS 实现中，对于相同的查询请求，性能排序大约是 Uint32Array &gt; Array $\approx$ Object &gt; Map。但 V8 引擎存在 bug，导致 Array 或 Object 在用作 primeIndex 时出现了预料之外的错误，不得不用 Map()。这就是为什么我不喜欢基于语言特有数据结构的优化。而相同的 python 代码虽然可以天然地支持更大的数字而无需考虑这些异常，也无需考虑默认 2GB 的内存上限，但代价是慢得多的计算速度以及单位计算量下更大的内存占用。在计算规模上升后还不如 nodejs 实用。</p></blockquote><h2 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h2><p>在有了高效的孤独素数搜索算法以后，可以对其序列进行一些观察。</p><ol><li><p>分布。</p><p> 从计算结果看，孤独素数很稀疏，且存在较大的波动。但计算到 1 亿，以 10 万为一段统计其出现的频率，发现和素数本身的分布趋势是大致一致的。</p><p> <img src="/../attach/2025/08/dist.png" alt="分布" loading="lazy"></p><blockquote><p>绿色为素数数量分布参考线 $\pi(p)&#x3D;p &#x2F; \ln p$</p></blockquote></li><li><p>解的分布。</p><p> 对于非孤独素数，第一个解往往在 m 较小时就出现了。一般地，对于 p &#x3D; m + q 的情况，上述算法是从 m &#x3D; 2 开始逐项验证的，等效于从 p 左边的所有数中取任意两个，使 $\pi(p)$ 有解。先来看一下所有数的因子序数积的分布情况。</p><p> <img src="/../attach/2025/08/prodpifactor_1000.png" alt="前1000个整数的因子序数积的分布" loading="lazy"></p><blockquote><p>前 1000 个整数的因子序数积的分布</p></blockquote><p> <img src="/../attach/2025/08/prodpifactor_30000.png" alt="前30000个整数的因子序数积的分布" loading="lazy"></p><blockquote><p>前 30000 个整数的因子序数积的分布</p></blockquote><p> 从图中我们发现，整数的因子序数积的分布出现了明显的原点出发放射状图样，最上面一条显然是质数和其对应的序列数。随着 x 轴放大点数密集，放射线变得更为清晰。因此我们进行局部放大并标注具体数据后如下：</p><p> <img src="/../attach/2025/08/prodpifactor_value_29000_30000.png" alt="29000到30000整数的因子序数积的分布" loading="lazy"></p><blockquote><p>29000 到 30000 个整数的因子序数积的分布及数值标注</p></blockquote><p> 经过简单计算，就可以发现素数线以下的第二条线是 $3\times素数$，再下面第三条线是 $5\times素数$。</p><p> 根据图像发现一个推论，若素数 p&#39; 与 p $\frac{p&#39;}{p} \approx \frac{1}{3}$，则 $\frac{1}{3} &lt; \frac{\pi(p&#39;)}{\pi(p)} &lt; \frac{1}{2}$，所以才有 $3\times素数$ 线稳定在素数线下。</p><p> 当 p 足够大时，$\pi(p)\approx p &#x2F; ln(p)$，假设存在一个与 p 几乎相等的殆素数 3p&#39;。则有：<br> $$ \frac{\pi(3)\cdot\pi(p&#39;)}{\pi(p)}\approx \frac{2p}{3ln(p&#x2F;3)} &#x2F; \frac{p}{lnp} &#x3D; \frac{2}{3}\cdot\frac{lnp}{lnp-ln3}$$<br> 令 $t&#x3D;lnp$, $c&#x3D;ln3$，则比值 $r(t)&#x3D;\frac{2}{3}\cdot\frac{t}{t-c}$，其中$t&gt;c$ ，即$p&gt;3$。</p><ul><li>若 $r(t)&gt;1$，则 $2t&gt;3t-3c \Rightarrow t&lt;3c \Rightarrow lnp&lt;ln27 \Rightarrow p&lt;27$</li><li>若 $r(t)&#x3D;1$，则 $p &#x3D; 27$</li><li>若 $r(t)&lt;1$，则 $p &gt; 27$</li></ul><p> 也就是说  在 p 足够大时，$\pi(p) &gt; \pi(3)\cdot\pi(p&#39;)$，因此殆素数 3p&#39; 构成的因子序数积的线一定在 $\pi(p)$ 下方。</p><p> 以同相方法，容易比较 2p&#39;、5p&#39; 等不同殆素数构成的线条的相对位置。进一步地，n 阶殆素数也可以以类似的方法确定相对顺序。</p><p> 特殊地，因为$\pi(2)&#x3D;1$，所以 $2^n$ 是最底部恒等于 1 的横线。</p></li><li><p>p &#x3D; m + q</p><p> 根据上一条的结论，对于一个殆素数，每增加一个因子，它的因子序数积都是变小的，因为对任意 p 都有 $\pi(p)&lt;p$。所以通常来说，其中一个值是较小的质数，会让等式成立的概率更大。</p><p> 如果两个都是殆素数，最优情况也至少是 $p&#x3D;3p_1+5p_2$，如果 p 足够大，此时要求 $p&#x2F;lnp &#x3D; 2p_1&#x2F;lnp_1+4p_2&#x2F;lnp_2$，若 m 与 n 大小类似，容易导致 $p_1, p_2$ 过小。</p><p> 也就是说，$\pi(p)&#x3D;\prod \pi(p_i) + \prod \pi(p_j)$ 等式要成立，可以调节的空间大小就是 $p&#x2F;lnp - (p_i&#x2F;lnp_i + p_j&#x2F;lnp_j)$，这个当然没有稳定解，但从趋势上容易理解，m q 差异越大的，殆素数因子越少的，越容易得到解。</p></li><li><p>特例与猜想</p><ul><li>孪生素数中较大的一个，一定不是孤独素数，这结论还挺文学的。</li><li>有无穷多个孤独素数。</li><li>指定 m 为任何 2 以上整数，都可以找到 p 与 q 使得公式成立。</li></ul></li></ol><p>得不出什么普遍性的结论，思而不学民科一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在知乎上看见了个有意思的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/que</summary>
      
    
    
    
    <category term="硬用数学" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E7%94%A8%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="殆素数" scheme="https://www.kaikai.men/tags/%E6%AE%86%E7%B4%A0%E6%95%B0/"/>
    
    <category term="编程练习" scheme="https://www.kaikai.men/tags/%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>圆周率：从割圆法到级数展开</title>
    <link href="https://www.kaikai.men/calcaulate-the-pi/"/>
    <id>https://www.kaikai.men/calcaulate-the-pi/</id>
    <published>2025-03-14T22:53:46.000Z</published>
    <updated>2025-08-30T14:15:58.639Z</updated>
    
    <content type="html"><![CDATA[<style>     .red{color:red}     .s1{font-size:12px}     .s2{font-size:10px}     .s3{font-size:8px}     .s4{font-size:6px}     .s5{font-size:4px} </style><p>今天是 3.14，写写圆周率怎么算。</p><h3 id="割圆术"><a href="#割圆术" class="headerlink" title="割圆术"></a>割圆术</h3><p>一开始的思路很简单，既然是『圆周』的比值，那就寻找一个方法计算圆周的长度就完事了。</p><ol><li><p>首先准备一个圆内接正六边形，每边长是 r，周长是 6r，如果把六边形周长当作圆周长，圆周率就是 $\pi&#x3D;\frac{6r}{2r} &#x3D; 3$。别笑，历史上确实有以 3 当作圆周率的，『周三径一』曾在多处典籍出现。</p><p> <img src="/../attach/2025/03/cc1.png" loading="lazy"></p></li><li><p>以正六边形的边作中垂线，构造一个正 12 边形，则正 12 边形的边长即 $x&#x3D;L_{\overline{A_2A_8}}$。</p><p> <img src="/../attach/2025/03/cc2.png" loading="lazy"></p><p> $\overline{A_2A_8}$是直角三角形 $\triangle A_2A_8C$ 的斜边，$\overline{A_2C} &#x3D; \frac{r}{2}$，$\overline{A_8C} &#x3D; r - \overline{OC}$。而$\overline{OC}$又是直角三角形$\triangle A_2OC$的直角边。因此应用两次勾股定理，容易得到：</p><p> $$x &#x3D; \sqrt{\left(\frac{r}{2}\right)^2+\left(r-\sqrt{r^2-(\frac{r}{2})^2}\right)^2}$$</p></li><li><p>进一步在正 12 边形基础上继续作中垂线变为 24 边形、48 边形……类推。</p><p> <img src="/../attach/2025/03/cc3.png" loading="lazy"></p><p> 局部放大：</p><p> <img src="/../attach/2025/03/cc4.png" loading="lazy"></p><p> 在 n 次迭代操作后，可以得到圆的内接正 $6\cdot2^n$ 边形，其边长为可由$6\cdot2^{n-1}$ 边长递推而来：</p><p> $$l_n &#x3D; \sqrt{\left(\frac{l_{n-1}}{2}\right)^2+\left(1-\sqrt{1-(\frac{l_{n-1}}{2})^2}\right)^2}$$</p><p> 根号内的平方展开，公式化简后得到：$l_n&#x3D;\sqrt{2-\sqrt{4-l^2_{n-1} } }$。所以：$\pi\approx3\cdot2^n\cdot l_n$</p><blockquote><p>尽管可以将 $\pi_n&#x3D;6\cdot2^n\cdot l_n$，$\pi_{n-1}&#x3D;6\cdot2^n\cdot\frac{l_{n-1}}{2}$ 代入得到 $\pi_n$ 的直接递推式，但结果反而会增加计算难度，没有意义。</p></blockquote><p> 编程验证一下割圆法的递推公式：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_pi_iterations_csv</span>(<span class="params">n_iterations, precision=<span class="number">50</span></span>):</span><br><span class="line"></span><br><span class="line">    getcontext().prec = precision + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    r,k,s = Decimal(<span class="number">1</span>),Decimal(<span class="number">6</span>),Decimal(<span class="number">1</span>)</span><br><span class="line">    pi_approx = (k * s) / (<span class="number">2</span> * r)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;0,<span class="subst">&#123;s:.&#123;precision&#125;</span>f&#125;,<span class="subst">&#123;<span class="built_in">int</span>(k)&#125;</span>,<span class="subst">&#123;pi_approx:.&#123;precision&#125;</span>f&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n_iterations + <span class="number">1</span>):</span><br><span class="line">        s = (Decimal(<span class="number">2</span>) - (Decimal(<span class="number">4</span>) - s**<span class="number">2</span>).sqrt()).sqrt()</span><br><span class="line">        k *= <span class="number">2</span></span><br><span class="line">        pi_approx = (k * s) / (<span class="number">2</span> * r)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n&#125;</span>,<span class="subst">&#123;s:.&#123;precision&#125;</span>f&#125;,<span class="subst">&#123;<span class="built_in">int</span>(k)&#125;</span>,<span class="subst">&#123;pi_approx:.&#123;precision&#125;</span>f&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">print_pi_iterations_csv(n_iterations=<span class="number">100</span>, precision=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p> 计算结果：</p><table><thead><tr><th>n</th><th>$\pi$ （红色开始为误差项）</th><th>边数</th><th>边长</th></tr></thead><tbody><tr><td>0</td><td>3</td><td>6</td><td>1</td></tr><tr><td>1</td><td>3.1<span class='red'>06</span></td><td><span class='s1'>12 </span></td><td><span class='s1'>0.517638090205041524697797675248096656698137802639861027628006414630</span></td></tr><tr><td>2</td><td>3.1<span class='red'>33</span></td><td><span class='s1'>24 </span></td><td><span class='s2'>0.2610523844401031830968124557909780203874814096234645037812338966702656504596472</span></td></tr><tr><td>3</td><td>3.1<span class='red'>39</span></td><td><span class='s1'>48 </span></td><td><span class='s3'>0.1308062584602861336306311175503508828812646078901080356639753014926938148927779305724160345230399815</span></td></tr><tr><td>4</td><td>3.141<span class='red'>03</span></td><td><span class='s1'>96 </span></td><td><span class='s4'>0.0654381656435522841273198526345762522299252545033923937561917675146374704265347854596049670897283379849162629786820274103417801265169</span></td></tr><tr><td>5</td><td>3.141<span class='red'>45</span></td><td><span class='s1'>192 </span></td><td><span class='s5'>0.03272346325297356328594384696834610047132981567239244974814148723774665964804514057084743346984975274224223378392101609252042560186228338473297730652077981634239188734083635448788894004614630671707971</span></td></tr><tr><td>6</td><td>3.1415<span class='red'>58</span></td><td><span class='s1'>384 </span></td><td><span class='s5'>0.01636227920787425857039824658921801844533529416452341952057948786939579165064652866066255648348084605099544845686188429947694545964114075255218686278984440383734161800789305756187065766408033033714294</span></td></tr><tr><td>7</td><td>3.1415<span class='red'>84</span></td><td><span class='s1'>768 </span></td><td><span class='s5'>0.00818120805246957918924210834302383685031261696817992854723965236122383489144687206840513659491152519677943407736541665751720319595526819838604319161259091076464007027427841057546918033121536463776576</span></td></tr><tr><td>8</td><td>3.14159<span class='red'>05</span></td><td><span class='s1'>1536 </span></td><td><span class='s5'>0.00409061258232819022882611784626426005671130508942161074227241896916750309821831955224474466566072674889796524473684900214896944666772227172928706453876775835266189348091823621540235396623950175141037</span></td></tr><tr><td>9</td><td>3.141592<span class='red'>11</span></td><td><span class='s1'>3072 </span></td><td><span class='s5'>0.00204530736067660908238592229206387848510904769203534158371388824527333132200776714283048062007265192348301163404334423074239806419254304223189361723602246795475702449971333535955495781000908587365137</span></td></tr><tr><td>10</td><td>3.141592<span class='red'>52</span></td><td><span class='s1'>6144 </span></td><td><span class='s5'>0.00102265381402739500247163869946902080272386682694276940575245689833248716463240037650358826374003409375522080937566141783691027096707879199337571242973168314629930390958384129075647765179770735929993</span></td></tr><tr><td>11</td><td>3.1415926<span class='red'>19</span></td><td><span class='s1'>12288 </span></td><td><span class='s5'>0.00051132692372483462812329904167729802119501834726478547125933748209551655293273596409563162021982192636730703620007115215205194042178721769005805718824184735509920188172391787369176696970438736673964</span></td></tr><tr><td>12</td><td>3.1415926<span class='red'>45</span></td><td><span class='s1'>24576 </span></td><td><span class='s5'>0.00025566346395130948052344901602532864686870304453467621730677964075264727555486053435606907311636775837244640506715770965493389536029465573114161194846506354894597613066543370721104363861111432890423</span></td></tr><tr><td>13</td><td>3.14159265<span class='red'>15</span></td><td><span class='s1'>49152 </span></td><td><span class='s5'>0.00012783173223676626186947646649138260988152781056255781673371926384916560262546013047471577662181934711832084928074633138426333635453646621891256820530408464072964170436390615844992513167973181884419</span></td></tr><tr><td>14</td><td>3.141592653<span class='red'>06</span></td><td><span class='s1'>98304 </span></td><td><span class='s5'>0.00006391586615102207116070807251821846928420566418226833293283142812113254271150192259083632846234511443992999462757190341371764220822115850525439907961017619817497180269701854339121002598869952981899</span></td></tr><tr><td>15</td><td>3.141592653<span class='red'>46</span></td><td><span class='s1'>196608 </span></td><td><span class='s5'>0.00003195793307959090310938154255793333263503358446685194730153233192952836577298952906771466453949596139067707595400480370347309422927398029140060759615402672879750656729406381857083342148916810946482</span></td></tr><tr><td>16</td><td>3.1415926535<span class='red'>56</span></td><td><span class='s1'>393216 </span></td><td><span class='s5'>0.00001597896654030543499584362445350196006406104280692607674654698067095823491466166283932166777919474862554088504872494049081442239324689977187654126144557724034900570345338497245798640501861199132473</span></td></tr><tr><td>17</td><td>3.14159265358<span class='red'>14</span></td><td><span class='s1'>786432 </span></td><td><span class='s5'>0.00000798948327021646542806668183879235631019681169477246348191864536472108682476590250406902878002067011109537606200591443120881102952774587693884967039607068647393920042977032508672304529703548793507</span></td></tr><tr><td>18</td><td>3.14159265358<span class='red'>77</span></td><td><span class='s1'>1572864 </span></td><td><span class='s5'>0.00000399474163511620120530147346356461485004455676682492653080263097961031568786521018546178449577827905058028155793726100684082116620490208586760128562326052355254999492341178495600442520229714214498</span></td></tr><tr><td>19</td><td>3.141592653589<span class='red'>27</span></td><td><span class='s1'>3145728 </span></td><td><span class='s5'>0.00000199737081755909666405925404488658903363571572547377195911130767842215943514172624435772225406061136635761994565450768012986355225672804758813211799003989963368820258474934638028323690684853391208</span></td></tr><tr><td>20</td><td>3.141592653589<span class='red'>66</span></td><td><span class='s1'>6291456 </span></td><td><span class='s5'>0.00000099868540877967283970569170986518056233278254800139575240199441413157386950268773547426918651144098773169103279081732332903382750784965462242767295874351578603227570190990894498209480288483175579</span></td></tr><tr><td>21</td><td>3.1415926535897<span class='red'>61</span></td><td><span class='s1'>12582912 </span></td><td><span class='s5'>0.00000049934270438985198331235394158794637574452005163238561622949160536438778783833013780076841949385532244297830798431363949646238115306391824299463536681672767037675392104288262525145523660499757185</span></td></tr><tr><td>22</td><td>3.1415926535897<span class='red'>85</span></td><td><span class='s1'>25165824 </span></td><td><span class='s5'>0.00000024967135219492793708861548164863083528480050429414620649761964010850031010937136302482094374335613839348636992034690138588360189467559359010796462784072115098350334154845172067404838766858926926</span></td></tr><tr><td>23</td><td>3.14159265358979<span class='red'>12</span></td><td><span class='s1'>50331648 </span></td><td><span class='s5'>0.00000012483567609746421172336255468185819030616389052416717182657674416467433744424882377430722467888793107943167913990376778051086967167245591527296295705271015718603906188572436811955215249723929612</span></td></tr><tr><td>24</td><td>3.14159265358979<span class='red'>27</span></td><td><span class='s1'>100663296 </span></td><td><span class='s5'>0.00000006241783804873213625906312907314414694658977754689172890296684927941714902639547605794720789562158704287228431191826831833465509516927936598151213605097619366385055651234305254691020971269767748</span></td></tr><tr><td>25</td><td>3.141592653589793<span class='red'>11</span></td><td><span class='s1'>201326592 </span></td><td><span class='s5'>0.00000003120891902436607192920429600309964886031266085579006387133906218733474982304042661535174860729942309322597890450240486561656308496161043473084985788277410293815655336611240206071283718092142279</span></td></tr><tr><td>26</td><td><span class='s1'>3.1415926535897932<span class='red'>07</span> </span></td><td><span class='s2'>402653184 </span></td><td><span class='s5'>0.00000001560445951218303643956123943486579303830946734590076137071151382758546729017465867897056956871062577565687205469967325499101603554656770693413534572719717163479597830054400212066111172965038686</span></td></tr><tr><td>27</td><td><span class='s1'>3.14159265358979323<span class='red'>05</span> </span></td><td><span class='s2'>805306368 </span></td><td><span class='s5'>0.00000000780222975609151827915050614659739327282312314419213435000540384209982803362747958675796558062042982475357489548994098448825732511259496703453493157075790296236194140478050246191004140967384875</span></td></tr><tr><td>28</td><td><span class='s1'>3.14159265358979323<span class='red'>65</span> </span></td><td><span class='s2'>1610612736 </span></td><td><span class='s5'>0.00000000390111487804575914699648887694425875179664923589163142535332766643652227643640373038294224713031271130104996335321398963832881871591336387327721771031647629833578335173087223319866660377209223</span></td></tr><tr><td>29</td><td><span class='s1'>3.14159265358979323<span class='red'>80</span> </span></td><td><span class='s2'>3221225472 </span></td><td><span class='s5'>0.00000000195055743902287957442589891392782464098322741904183452748558916604225809692973822374008478147095680240506129083134376023950655446505210288531412793791591047020932205873679944497150982204577829</span></td></tr><tr><td>30</td><td><span class='s1'>3.141592653589793238<span class='red'>34</span> </span></td><td><span class='s2'>6442450944 </span></td><td><span class='s5'>0.00000000097527871951143978732890626639587422864790677350546878071113342307743900198686359140290355881550128722580828503965413131817775505376202266065797748836863198053672189794374120960822078454085167</span></td></tr><tr><td>31</td><td><span class='s1'>3.1415926535897932384<span class='red'>32</span> </span></td><td><span class='s2'>12884901888 </span></td><td><span class='s5'>0.00000000048763935975571989367894773437693235284413627643353924138657991875227166863658134592478609629063235498679155112391032958494770696135492336364934405252910218154894519718632749329296292232873980</span></td></tr><tr><td>32</td><td><span class='s1'>3.1415926535897932384<span class='red'>55</span> </span></td><td><span class='s2'>25769803776 </span></td><td><span class='s5'>0.00000000024381967987785994684128569233584058123711119494820572430372864962831541128412896710085186107246109239553239175349774989214200004231103228126374017973510217647145205395451425934862543903141874</span></td></tr><tr><td>33</td><td><span class='s1'>3.14159265358979323846<span class='red'>07</span> </span></td><td><span class='s2'>51539607552 </span></td><td><span class='s5'>0.00000000012190983993892997342086932431134209122043661067557410939165547834271901397817958184287679899746954872366931517378432756277219608864154084676071873439013814578810008899659458297578644652102792</span></td></tr><tr><td>34</td><td><span class='s1'>3.141592653589793238462<span class='red'>16</span> </span></td><td><span class='s2'>103079215104 </span></td><td><span class='s5'>0.00000000006095491996946498671046297192359877068545345171015976479731683080387882390963230448827617887470480541069715613284937281391527142769874265021378174567842463712478657447014329047907537025078812</span></td></tr><tr><td>35</td><td><span class='s1'>3.141592653589793238462<span class='red'>52</span> </span></td><td><span class='s2'>206158430208 </span></td><td><span class='s5'>0.00000000003047745998473249335523502468279035097713111976794487129248565177626429377675630894324491318143281681108283621034037740658494844040637391634904185368756479826080968237471660797772242533971580</span></td></tr><tr><td>36</td><td><span class='s1'>3.1415926535897932384626<span class='red'>13</span> </span></td><td><span class='s2'>412316860416 </span></td><td><span class='s5'>0.00000000001523872999236624667761795468151904619286610914234050926206938980743255828792757021971394828021509269854954204203807365348514101443729223110438242704353620510969922222720558589696914162834932</span></td></tr><tr><td>37</td><td><span class='s1'>3.1415926535897932384626<span class='red'>36</span> </span></td><td><span class='s2'>824633720832 </span></td><td><span class='s5'>0.00000000000761936499618312333880903263327500693447062322906813727064108287401977495862480364165191892572722821805378076342708109786024478510267128305685288129822216150408530005053668788474754596314193</span></td></tr><tr><td>38</td><td><span class='s1'>3.14159265358979323846264<span class='red'>15</span> </span></td><td><span class='s2'>1649267441664 </span></td><td><span class='s5'>0.00000000000380968249809156166940452322820193894699000769679011251019721704206004157069165212410810544026360243081562173175012380943710784819833158848148454305274178869725472055344941764738359510503432</span></td></tr><tr><td>39</td><td><span class='s1'>3.14159265358979323846264<span class='red'>29</span> </span></td><td><span class='s2'>3298534883328 </span></td><td><span class='s5'>0.00000000000190484124904578083470226247804652390846434085867764950648712663131010933239756397504390127793843615009932381929180666667653837973866688861742752372542199845768295329289064647703956013271496</span></td></tr><tr><td>40</td><td><span class='s1'>3.141592653589793238462643<span class='red'>26</span> </span></td><td><span class='s2'>6597069766656 </span></td><td><span class='s5'>0.00000000000095242062452289041735113134701645625860333755562416727738678225630409133726241388412271419693280728455731432240919779384123153580275368398924018623402760598689881472309873103129157256079637</span></td></tr><tr><td>41</td><td><span class='s1'>3.1415926535897932384626433<span class='red'>54</span> </span></td><td><span class='s2'>13194139533312 </span></td><td><span class='s5'>0.00000000000047621031226144520867556568700737741734806466859775202820253268876017605259802738752786993037186448547714104069276714403847492681351960293481403671057123207625030082320476025045525187921347</span></td></tr><tr><td>42</td><td><span class='s1'>3.1415926535897932384626433<span class='red'>76</span> </span></td><td><span class='s2'>26388279066624 </span></td><td><span class='s5'>0.00000000000023810515613072260433778284519108236967983182064708458072713526423819809929748745762233445722522915255220218907083199050851571707542444274694226267953634788865545023196916578383333271638065</span></td></tr><tr><td>43</td><td><span class='s1'>3.14159265358979323846264338<span class='red'>14</span> </span></td><td><span class='s2'>52776558133248 </span></td><td><span class='s5'>0.00000000000011905257806536130216889142280646539246564084611706836175233956662580323924238486502823822095273623016740503242823293473322752826943406712212347816633161124743887015182230112651127795772707</span></td></tr><tr><td>44</td><td><span class='s1'>3.14159265358979323846264338<span class='red'>28</span> </span></td><td><span class='s2'>105553116266496 </span></td><td><span class='s5'>0.00000000000005952628903268065108444571142959822218603604003272493981728309761137840677254857193124035843137902790456916465278946093378200973737232257810799457850600559768648334606507173483923226798148</span></td></tr><tr><td>45</td><td><span class='s1'>3.141592653589793238462643383<span class='red'>16</span> </span></td><td><span class='s2'>211106232532992 </span></td><td><span class='s5'>0.00000000000002976314451634032554222285571809480183716997213813631477682811379565938813807352206137928266371922361967513628494303350752813837220533755077556277267010508481067708258272280581697116368445</span></td></tr><tr><td>46</td><td><span class='s1'>3.1415926535897932384626433832<span class='red'>51</span> </span></td><td><span class='s2'>422212465065984 </span></td><td><span class='s5'>0.00000000000001488157225817016277111142785945936226160398008428988799695448379353411048669540675105529201156255393239241815105795960193162958466509541845372039556076088358306744001667409563608755116413</span></td></tr><tr><td>47</td><td><span class='s1'>3.14159265358979323846264338327<span class='red'>23</span> </span></td><td><span class='s2'>844424930131968 </span></td><td><span class='s5'>0.00000000000000744078612908508138555571392978117629867936429404766032454532982972879927442015100333573102539703125512303180592336739443426803028897653497323464198804132243445293300830649524734564338552</span></td></tr><tr><td>48</td><td><span class='s1'>3.14159265358979323846264338327<span class='red'>77</span> </span></td><td><span class='s2'>1688849860263936 </span></td><td><span class='s5'>0.00000000000000372039306454254069277785696489702504532435392851166970303119261182832676543366635866770056075491914594374169492690139868978298367458617935594850996354453930203928999116673294818087014542</span></td></tr><tr><td>49</td><td><span class='s1'>3.141592653589793238462643383279<span class='red'>05</span> </span></td><td><span class='s2'>3377699720527872 </span></td><td><span class='s5'>0.00000000000000186019653227127034638892848244931713466026093694181479411041279007664518388039250219394917520581289134362666072356238423046393393267507079270873999818256870264565851827569558246606719889</span></td></tr><tr><td>50</td><td><span class='s1'>3.141592653589793238462643383279<span class='red'>39</span> </span></td><td><span class='s2'>6755399441055744 </span></td><td><span class='s5'>0.00000000000000093009826613563517319446424122475914382989096505665488987955847187244503302737899350870943426865862471134189914127942916634993896055484923272330147659367044182796913164438902451505300070</span></td></tr><tr><td>51</td><td><span class='s2'>3.141592653589793238462643383279<span class='red'>47</span> </span></td><td><span class='s3'>13510798882111488 </span></td><td><span class='s5'>0.00000000000000046504913306781758659723212061239214397741554460154588154282324605029445339776664665126602561797118126889216645671298658718824327096087054775868599403253919720208550301571372348300608040</span></td></tr><tr><td>52</td><td><span class='s2'>3.141592653589793238462643383279<span class='red'>50</span> </span></td><td><span class='s3'>27021597764222976 </span></td><td><span class='s5'>0.00000000000000023252456653390879329861606030619764349651653005992524534679212430533767605152357040947956551476686121907768168532165192866105014965558860008759203488559386437922131721340234005270487190</span></td></tr><tr><td>53</td><td><span class='s2'>3.14159265358979323846264338327950<span class='red'>11</span> </span></td><td><span class='s3'>54043195528445952 </span></td><td><span class='s5'>0.00000000000000011626228326695439664930803015309901818673435974985666074531862481319050223365839744480599681889753061151021039333721394536374942994115768269838484630595034485522996445808917007449174018</span></td></tr><tr><td>54</td><td><span class='s2'>3.141592653589793238462643383279502<span class='red'>44</span> </span></td><td><span class='s3'>108086391056891904 </span></td><td><span class='s5'>0.00000000000000005813114163347719832465401507654953364817669171491508513164963273917601720652929341974206876005338536255726570022549748804281781239796629797911615377845161799814839230123476900245597338</span></td></tr><tr><td>55</td><td><span class='s2'>3.141592653589793238462643383279502<span class='red'>77</span> </span></td><td><span class='s3'>216172782113783808 </span></td><td><span class='s5'>0.00000000000000002906557081673859916232700753827476989343953483745588691069860641116109055396819036476750547363087511217529594767943500465379157613992458109310350412218037800653716796508005520240576783</span></td></tr><tr><td>56</td><td><span class='s2'>3.1415926535897932384626433832795028<span class='red'>57</span> </span></td><td><span class='s3'>432345564227567616 </span></td><td><span class='s5'>0.00000000000000001453278540836929958116350376913738533038866604122773649845852696077719571424363288354984560163404176381957147290806540633568741458332329570497135696625855744102793092493269403397306521</span></td></tr><tr><td>57</td><td><span class='s2'>3.1415926535897932384626433832795028<span class='red'>77</span> </span></td><td><span class='s3'>864691128455135232 </span></td><td><span class='s5'>0.00000000000000000726639270418464979058175188456869271315294534842634237961791644978817963657368349018018547073553645174721809397062791589612692380420980430418549727383863300796950010128713119835412810</span></td></tr><tr><td>58</td><td><span class='s2'>3.14159265358979323846264338327950288<span class='red'>25</span> </span></td><td><span class='s3'>1729382256910270464 </span></td><td><span class='s5'>0.00000000000000000363319635209232489529087594228434636257129921518973045610753984606903755555565090225823497728933861097425510012445275500660856570420314377959077737522021138499361073229058057856525305</span></td></tr><tr><td>59</td><td><span class='s2'>3.14159265358979323846264338327950288<span class='red'>38</span> </span></td><td><span class='s3'>3458764513820540928 </span></td><td><span class='s5'>0.00000000000000000181659817604616244764543797114217318203500292521693513634109262568138724540009302627880665664054547671442602629245985300233979583099822160020500500483475659543003887476852580099590637</span></td></tr><tr><td>60</td><td><span class='s2'>3.141592653589793238462643383279502884<span class='red'>09</span> </span></td><td><span class='s3'>6917529027641081856 </span></td><td><span class='s5'>0.00000000000000000090829908802308122382271898557108659111117062731122630670646165067155218116731953598635420518712225579467900141661189798523079951316477341015481355037440868192797508134947832305112068</span></td></tr><tr><td>61</td><td><span class='s2'>3.1415926535897932384626433832795028841<span class='red'>70</span> </span></td><td><span class='s3'>13835058055282163712 </span></td><td><span class='s5'>0.00000000000000000045414954401154061191135949278554329556729395924345799567022024256463341039252169509758470379152247370308692670281380402226420303760039400738209142733170889955014305024957720733537028</span></td></tr><tr><td>62</td><td><span class='s2'>3.14159265358979323846264338327950288419<span class='red'>04</span> </span></td><td><span class='s3'>27670116110564327424 </span></td><td><span class='s5'>0.00000000000000000022707477200577030595567974639277164778511056032020960312473379843592387017238273841336013772018156620620139714636784838886552346958522729508544287095924157656559328774743942058403501</span></td></tr><tr><td>63</td><td><span class='s2'>3.14159265358979323846264338327950288419<span class='red'>55</span> </span></td><td><span class='s3'>55340232221128654848 </span></td><td><span class='s5'>0.00000000000000000011353738600288515297783987319638582389273822774741487722356985886216283070820704775151719320297692305771229984585552789478670272471592185318112305923135816186725549723401189399465139</span></td></tr><tr><td>64</td><td><span class='s2'>3.14159265358979323846264338327950288419<span class='red'>67</span> </span></td><td><span class='s3'>110680464442257309696 </span></td><td><span class='s5'>0.00000000000000000005676869300144257648891993659819291194639198232212119806943529938660652730685549751219967936668777898522258006789613584548518548947517399518980753460579735453010148010561666852518465</span></td></tr><tr><td>65</td><td><span class='s2'>3.141592653589793238462643383279502884197<span class='red'>06</span> </span></td><td><span class='s3'>221360928884514619392 </span></td><td><span class='s5'>0.00000000000000000002838434650072128824445996829909645597319884971711231896692394593774390264752174589247798884844188386097084317662800257999539949531820854021372973920212589123057484043038413386480875</span></td></tr><tr><td>66</td><td><span class='s2'>3.1415926535897932384626433832795028841971<span class='red'>43</span> </span></td><td><span class='s3'>442721857769029238784 </span></td><td><span class='s5'>0.00000000000000000001419217325036064412222998414954822798659978217806262447498775999942703119802262260178073225171594371672767039910395837746754883514554387355534428542490502843047419903699298900650460</span></td></tr><tr><td>67</td><td><span class='s2'>3.14159265358979323846264338327950288419716<span class='red'>28</span> </span></td><td><span class='s3'>885443715538058477568 </span></td><td><span class='s5'>0.00000000000000000000709608662518032206111499207477411399329993575396962036143460337853290058329403000825478551622790184696278207177431648889605252409000436176691963484486508085164556906087635528463600</span></td></tr><tr><td>68</td><td><span class='s2'>3.14159265358979323846264338327950288419716<span class='red'>78</span> </span></td><td><span class='s3'>1770887431076116955136 </span></td><td><span class='s5'>0.00000000000000000000354804331259016103055749603738705699664997346010209869620989211161887341468235484256112337447060013347246770025475017772545318040100499719527221982164346924474197203014536962384233</span></td></tr><tr><td>69</td><td><span class='s2'>3.14159265358979323846264338327950288419716<span class='red'>90</span> </span></td><td><span class='s3'>3541774862152233910272 </span></td><td><span class='s5'>0.00000000000000000000177402165629508051527874801869352849832498742794071041254151985860348959772059490108518983279739396677937494271519282335856564782606593038161921464824045057141901255243934791698939</span></td></tr><tr><td>70</td><td><span class='s2'>3.141592653589793238462643383279502884197169<span class='red'>30</span> </span></td><td><span class='s3'>7083549724304467820544 </span></td><td><span class='s5'>0.00000000000000000000088701082814754025763937400934676424916249380120656283932533165465100141015772463551818630392263099429490062385425702670489272777099615392845908043683470262540481687443753631387209</span></td></tr><tr><td>71</td><td><span class='s2'>3.1415926535897932384626433832795028841971693<span class='red'>74</span> </span></td><td><span class='s3'>14167099448608935641088 </span></td><td><span class='s5'>0.00000000000000000000044350541407377012881968700467338212458124691150780737379448729299415778149104071588104247756832825705434634711181057142482354004448463241253905615654192091803661550138349834925883</span></td></tr><tr><td>72</td><td><span class='s2'>3.14159265358979323846264338327950288419716939<span class='red'>29</span> </span></td><td><span class='s3'>28334198897217871282176 </span></td><td><span class='s5'>0.00000000000000000000022175270703688506440984350233669106229062345711696943116372132970566102529704265770576491705274450503252719017657177675877691511013902854190096207806219192633888747260021845335379</span></td></tr><tr><td>73</td><td><span class='s2'>3.14159265358979323846264338327950288419716939<span class='red'>78</span> </span></td><td><span class='s3'>56668397794435742564352 </span></td><td><span class='s5'>0.00000000000000000000011087635351844253220492175116834553114531172872886793361517037525390327946746161632353791870268554275183884754782486331603778813068233615174199226884022215799223710907726838045600</span></td></tr><tr><td>74</td><td><span class='s2'>3.14159265358979323846264338327950288419716939<span class='red'>90</span> </span></td><td><span class='s3'>113336795588871485128704 </span></td><td><span class='s5'>0.00000000000000000000005543817675922126610246087558417276557265586438573186906174890142708573558609834409560089188565508087950401784329091801122048811978107497632868024621903259103783240092289033277638</span></td></tr><tr><td>75</td><td><span class='s2'>3.141592653589793238462643383279502884197169399<span class='red'>27</span> </span></td><td><span class='s3'>226673591177742970257408 </span></td><td><span class='s5'>0.00000000000000000000002771908837961063305123043779208638278632793219552817231264491493855962977459511403952943751000011500970438591506577337745170668333578535599951979023667877352456919294462872091966</span></td></tr><tr><td>76</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993<span class='red'>50</span> </span></td><td><span class='s4'>453347182355485940514816 </span></td><td><span class='s5'>0.00000000000000000000001385954418980531652561521889604319139316396609809686587904376549740691013499079976873084270090861482240887454217130109700888814980605677101995723614993166563461344604800739186474</span></td></tr><tr><td>77</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993<span class='red'>69</span> </span></td><td><span class='s4'>906694364710971881029632 </span></td><td><span class='s5'>0.00000000000000000000000692977209490265826280760944802159569658198304909003040486204625221934197345705522798618684369325162265879229605485469678366255030178352556066002693178577047232466989525115469101</span></td></tr><tr><td>78</td><td><span class='s3'>3.14159265358979323846264338327950288419716939937<span class='red'>35</span> </span></td><td><span class='s4'>1813388729421943762059264 </span></td><td><span class='s5'>0.00000000000000000000000346488604745132913140380472401079784829099152455021488559854356404915684997373453194568910850150554234743333323887169027810355721265754992488889043086125818785113193573919393452</span></td></tr><tr><td>79</td><td><span class='s3'>3.14159265358979323846264338327950288419716939937<span class='red'>47</span> </span></td><td><span class='s4'>3626777458843887524118528 </span></td><td><span class='s5'>0.00000000000000000000000173244302372566456570190236200539892414549576227575740319521183676701415789251813071691901508261310331929140249243806985456612550895329193795879589953572603154100824544871464065</span></td></tr><tr><td>80</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375<span class='red'>01</span> </span></td><td><span class='s4'>7253554917687775048237056 </span></td><td><span class='s5'>0.00000000000000000000000086622151186283228285095118100269946207274788113795994664709842522631154555946542345146881514528910460810254597164342807858892835620795414037008213423109321081194546364822645740</span></td></tr><tr><td>81</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375<span class='red'>09</span> </span></td><td><span class='s4'>14507109835375550096474112 </span></td><td><span class='s5'>0.00000000000000000000000043311075593141614142547559050134973103637394056899012895473577596850633110638350648736057102314237177980400366216536052889102776078611695252923253860326700438854434523571599969</span></td></tr><tr><td>82</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375<span class='red'>10</span> </span></td><td><span class='s4'>29014219670751100192948224 </span></td><td><span class='s5'>0.00000000000000000000000021655537796570807071273779525067486551818697028449633393126620840367198534402310258888355594288341333553345644955268599269768840268037991033640132662622651219876868571667511013</span></td></tr><tr><td>83</td><td><span class='s3'>3.14159265358979323846264338327950288419716939937510<span class='red'>43</span> </span></td><td><span class='s4'>58028439341502200385896448 </span></td><td><span class='s5'>0.00000000000000000000000010827768898285403535636889762533743275909348514224832564737039425426334514586546996259218677535573509881948390470781402228825989395273182032651008058458132368741640505896617496</span></td></tr><tr><td>84</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375105<span class='red'>44</span> </span></td><td><span class='s4'>116056878683004400771792896 </span></td><td><span class='s5'>0.00000000000000000000000005413884449142701767818444881266871637954674257112418265890235838368509163216447481481489448816712110330223715773980089907117859221939072724239797636078782671271242814072375971</span></td></tr><tr><td>85</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375105<span class='red'>73</span> </span></td><td><span class='s4'>232113757366008801543585792 </span></td><td><span class='s5'>0.00000000000000000000000002706942224571350883909222440633435818977337128556209380885332434891172319848620488659729738164471724588802112783671406082911480437965024962904042577987603085039013447608945929</span></td></tr><tr><td>86</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375105<span class='red'>80</span> </span></td><td><span class='s4'>464227514732017603087171584 </span></td><td><span class='s5'>0.00000000000000000000000001353471112285675441954611220316717909488668564278104721435193031908950877204359837819737995801750320972363402779838300917945572908652501006153003542085374325991604412869361661</span></td></tr><tr><td>87</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993751058<span class='red'>15</span> </span></td><td><span class='s4'>928455029464035206174343168 </span></td><td><span class='s5'>0.00000000000000000000000000676735556142837720977305610158358954744334282139052364591662367762396028262186118096103138740814467820927027954854394810262789410419235082714217186525080075111982148174778001</span></td></tr><tr><td>88</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993751058<span class='red'>19</span> </span></td><td><span class='s4'>1856910058928070412348686336 </span></td><td><span class='s5'>0.00000000000000000000000000338367778071418860488652805079179477372167141069526182780089415357188087838593833946330836975399647327306680837620194187065419258155122989250888415010712734684797608033073625</span></td></tr><tr><td>89</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375105820<span class='red'>60</span> </span></td><td><span class='s4'>3713820117856140824697372672 </span></td><td><span class='s5'>0.00000000000000000000000000169183889035709430244326402539589738686083570534763091450576986613092803132734513835450326938323875340758736308820974542462674391428058499844637478820265381488838988104029032</span></td></tr><tr><td>90</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375105820<span class='red'>88</span> </span></td><td><span class='s4'>7427640235712281649394745344 </span></td><td><span class='s5'>0.00000000000000000000000000084591944517854715122163201269794869343041785267381545732855028173358746468046956525510777025489944130017542641677057978947214406421351026331982610650978815836832879531168973</span></td></tr><tr><td>91</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993751058209<span class='red'>52</span> </span></td><td><span class='s4'>14855280471424563298789490688 </span></td><td><span class='s5'>0.00000000000000000000000000042295972258927357561081600634897434671520892633690772867373330945030916346733440713728590207285972872463543131778575672519330342530762911803363811511058158186027795432290378</span></td></tr><tr><td>92</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993751058209<span class='red'>69</span> </span></td><td><span class='s4'>29710560942849126597578981376 </span></td><td><span class='s5'>0.00000000000000000000000000021147986129463678780540800317448717335760446316845386433804892579809401062455465663235945315460611537163618042257785088658544266429819636249671110253420808746597446520573378</span></td></tr><tr><td>93</td><td><span class='s3'>3.14159265358979323846264338327950288419716939937510582097<span class='red'>35</span> </span></td><td><span class='s4'>59421121885698253195157962752 </span></td><td><span class='s5'>0.00000000000000000000000000010573993064731839390270400158724358667880223158422693216917224678316443392363825994914428934207508906198289830674985682660949635821384192403281631922844526642413278832413310</span></td></tr><tr><td>94</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375105820974<span class='red'>58</span> </span></td><td><span class='s4'>118842243771396506390315925504 </span></td><td><span class='s5'>0.00000000000000000000000000005286996532365919695135200079362179333940111579211346608460459637709689553823924642869271501663404845301205016530755451802616306227467630540663683104068369613595989640792411</span></td></tr><tr><td>95</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375105820974<span class='red'>85</span> </span></td><td><span class='s4'>237684487542793012780631851008 </span></td><td><span class='s5'>0.00000000000000000000000000002643498266182959847567600039681089666970055789605673304230460731173778259117213777111142880151658721675860020914535582465972145418673451986278984778163602362579726077072294</span></td></tr><tr><td>96</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993751058209749<span class='red'>22</span> </span></td><td><span class='s4'>475368975085586025561263702016 </span></td><td><span class='s5'>0.00000000000000000000000000001321749133091479923783800019840544833485027894802836652115259229626755814834263320515134831240823898216087199538412524249058018818246139798994424707318178321345945256457982</span></td></tr><tr><td>97</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993751058209749<span class='red'>39</span> </span></td><td><span class='s4'>950737950171172051122527404032 </span></td><td><span class='s5'>0.00000000000000000000000000000660874566545739961891900009920272416742513947401418326057633222818361243076588714252512839516036266280313248404349353781084532268698995350740374253514900417876053020966349</span></td></tr><tr><td>98</td><td><span class='s3'>3.14159265358979323846264338327950288419716939937510582097494<span class='red'>32</span> </span></td><td><span class='s4'>1901475900342344102245054808064</span></td><td><span class='s5'>0.00000000000000000000000000000330437283272869980945950004960136208371256973700709163028817062409803538495726488875624597744971172786690330281567563348535035541670308629447817987552336482887802186116224</span></td></tr><tr><td>99</td><td><span class='s3'>3.141592653589793238462643383279502884197169399375105820974944<span class='red'>23</span> </span></td><td><span class='s4'>3802951800684688204490109616128</span></td><td><span class='s5'>0.00000000000000000000000000000165218641636434990472975002480068104185628486850354581514408587579979633867542260906483321120854716349161878400707892481545467979558812567504614518139663047436054484489897</span></td></tr><tr><td>100</td><td><span class='s3'>3.1415926535897932384626433832795028841971693993751058209749445<span class='red'>03</span></span></td><td><span class='s4'>7605903601369376408980219232256</span></td><td><span class='s5'>0.00000000000000000000000000000082609320818217495236487501240034052092814243425177290757204300836874550011231007511825538341473499419058028357844460091683379454395130967959953704622673261060242184507762</span></td></tr></tbody></table></li><li><p>在圆的外切正六边形上不断向内收缩也可以用来计算 $\pi$，与内接多边形的逻辑基本一致，但值是从大往小推的，和内接多边形共同构成了对 $\pi$ 的双向逼近。</p><ul><li>外接六边形的边长由 ${L_0}^2 &#x3D; {\frac{L_0}{2}}^2+r^2$ 得到，即 ${L_0} &#x3D; \frac{2}{\sqrt{3}}$。</li><li>边长递推公式由半角公式推得：<br>$$t_n&#x3D;\frac{2t_{n-1}}{1+\sqrt{1+t^2_n}}$$<br>两者相夹：<br>$$ 3\cdot2^n\cdot l_n \lt \pi \lt 3\cdot2^n\cdot t_n$$</li></ul></li></ol><h3 id="无穷级数"><a href="#无穷级数" class="headerlink" title="无穷级数"></a>无穷级数</h3><p>割圆是个效率很低的算法。当然，最初除了割圆别无他法，自然无所谓效率问题。直到有一天，人们发现了无穷级数：</p><p>$$\frac{\pi}{4} &#x3D; 1 -\frac{1}{3}+\frac{1}{5}-\frac{1}{7}+\frac{1}{9}-\cdots &#x3D; \sum_{n&#x3D;1}^\infty\frac{(-1)^{n-1}}{2n-1}$$</p><p>这个公式称为莱布尼茨级数，最早由印度数学家马德哈瓦发现并应用。</p><blockquote><p>※ 你没看错，真正的先驱往往成为无名的先烈。这个公式据称是莱布尼茨独立重新发现的。</p></blockquote><p>严格来说，莱布尼茨级数的计算效率并不高，甚至比割圆法还低，每增加一位精度需要多计算 10 项。但公式本身启迪了人们，计算 $\pi$ 还有割圆术不断乘方开方以外的其它方法。同时，级数更方便并行计算，不受递推公式约束，每一项的计算也更简单，因此具有重大的历史意义。随后越来越多的 $\pi$ 级数被研究出来：</p><ul><li><p>马德哈瓦级数，每项精度约 1.4 位：</p><p>$$\pi &#x3D; \sqrt{12}\sum_{k&#x3D;0}^\infty\frac{(-1)^k}{3^k(2k+1)}$$</p><blockquote><p>最早实用于级数法计算 $\pi$ 的公式。</p></blockquote></li><li><p>欧拉级数：</p><p>$$\frac{\pi^2}{6} &#x3D; \sum^{\infty}_{k&#x3D;1}\frac{1}{k^2}$$</p><blockquote><p>任何一本高数书里都会有的公式。</p></blockquote></li><li><p>牛顿级数：</p><p>$$\pi&#x3D;24\left(\frac{\sqrt{3}}{8}+\sum^{\infty}_{k&#x3D;0}\frac{(2k)!}{(k!)^2(2k+1)16^{k+1}}\right)$$</p><blockquote><p>牛爵爷是大英帝国的雄狮。</p></blockquote></li><li><p>反正弦函数泰勒展开</p><p>$$\frac{\pi}{2} &#x3D; 1 + \frac{1}{3} + \frac{1}{3}\frac{2}{5}+\frac{1}{3}\frac{2}{5}\frac{3}{7}+\cdots &#x3D; \sum_{k&#x3D;0}^{\infty}\frac{2^k(k!)^2}{(2k+1)!}$$</p></li><li><p>Machin 公式：</p><p>\begin{equation*}<br>\begin{cases}<br>\frac{\pi}{4}&#x3D;4arctan\left(\frac{1}{5}\right)-arctan\left(\frac{1}{239}\right) \\<br>arctan(x)&#x3D;\sum^{\infty}_{k&#x3D;0}\frac{(-1)^kx^{2k+1}}{2k+1}<br>\end{cases}<br>\end{equation*}</p></li><li><p>高斯-勒让德算法：</p><p>\begin{equation*}<br>\begin{cases}<br>\pi \approx \frac{(a_n+b_n)^2}{4(1-\sum_{k&#x3D;0}^{\infty}2^k(a_k-b_k)^2)} \\<br>a_{n+1}&#x3D;\frac{a_n+b_n}{2} \\<br>b_{n+1}&#x3D;\sqrt{a_nb_n}<br>\end{cases}<br>\end{equation*}</p><blockquote><p>计算机出现前夜的成果。</p></blockquote></li><li><p>拉马努金级数：</p><p>$$\frac{1}{\pi}&#x3D;\frac{2\sqrt{2}}{99^2}\sum^{\infty}_{k&#x3D;0}\frac{(4k)!(1103+26390k)}{(k!)^4\cdot396^{4k}}$$</p><blockquote><p>来自娜玛卡尔女神梦中的启示。</p></blockquote></li><li><p>Chudnovsky 级数：<br>$$\frac{1}{\pi}&#x3D;\frac{12}{640320^3}\sum^{\infty}_{k&#x3D;0}\frac{(-1)^k(6k)!}{(k!)^3(3k)!}\cdot\frac{13591409k+545140134}{640320^{3k}}$$</p><blockquote><p>目前最高效的级数，每项可以推进 14 位精度。</p></blockquote></li><li><p>BBP 级数：</p><p>$$\pi&#x3D;\sum^{\infty}_{k&#x3D;0}\frac{1}{16^k}\left(\frac{4}{8k+1}-\frac{2}{8k+4}-\frac{1}{8k+5}-\frac{1}{8k+6}\right)$$</p><blockquote><p>这个级数具有革命性的意义：可以直接计算圆周率 16 进制（或 2 进制）下任意一位的值，而不需要从头开始逐项推进。因此尤其适合于分布式。</p></blockquote></li></ul><p>随着计算机的应用，单项是否易计算不出错已经不再是问题，计算效率变为了各类公式中最重要的考核标准。目前应用得最多的就是 Chudnovsky 级数和 BBP 级数。</p><h3 id="一些豆知识"><a href="#一些豆知识" class="headerlink" title="一些豆知识"></a>一些豆知识</h3><ul><li><p>祖冲之与刘徽</p><p>虽然课本里多提到祖冲之，但实际上割圆法是魏晋时期刘徽提出的。祖冲之据推测应该是在计算方法上有技术创新，同时明确提出了疏率 22&#x2F;7 和密率 355&#x2F;113。</p></li><li><p>东西方割圆</p><p>前文演示的是通过内接圆和外切圆逼近 $\pi$ 的方法，但实际上刘徽的割圆术是使用内接多边形的面积来计算的，因为他先证明了 $圆面积 S &#x3D; \frac{圆周 R}{2}\times半径 r$，面积计算有助于减少迭代时的计算量。纯靠线长计算是阿基米德干的。</p></li><li><p>割圆术&#x2F;法的效率：</p><p>$$k\approx2nlog_{10}2+log_{10}36\approx0.6n+1.56$$</p></li><li><p>椭圆周长公式为：</p><p>$$C&#x3D;4a\int_{0}^{\pi&#x2F;2}\sqrt{1-{(1-\frac{b^2}{a^2})}sin^2\theta}\ d\theta$$</p><p>$C$ 与其长轴 $a$ 短轴 $b$ 有关，但并不存在固定的比值。该积分没有简化形式，需要通过数值方法计算。但拉马努金提出了两个近似公式可以简化计算：</p><p>$$(1), C \approx \pi\left[3(a+b)-\sqrt{(3a+b)(a+3b)}\right]$$</p><p>$$(2), C \approx \pi(a+b)\left[1+\frac{3h}{10+\sqrt{4-3h}}\right], h &#x3D; \frac{(a-b)^2}{(a+b)^2}$$</p><p>前者最大误差 0.05%，后者最大误差 0.01%。</p></li><li><p>椭圆面积公式为：</p><p>$$S&#x3D;\pi ab$$</p><p>面积与周长不同，面积是二维度量，在几何变换下的缩放是线性的，对形状的局部变形不敏感，因此公式就是如此简单直接。</p><p>而周长是一维弧长的积分，依赖曲线每一点的曲率变化，因此需要专门的椭圆积分计算。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
     .red{color:red}
     .s1{font-size:12px}
     .s2{font-size:10px}
     .s3{font-size:8px}
     .s4{font-size:6px}
     .s5{font</summary>
      
    
    
    
    <category term="硬用数学" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E7%94%A8%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="圆周率" scheme="https://www.kaikai.men/tags/%E5%9C%86%E5%91%A8%E7%8E%87/"/>
    
    <category term="割圆" scheme="https://www.kaikai.men/tags/%E5%89%B2%E5%9C%86/"/>
    
    <category term="无穷级数" scheme="https://www.kaikai.men/tags/%E6%97%A0%E7%A9%B7%E7%BA%A7%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>1/n 与 n-1 位循环节</title>
    <link href="https://www.kaikai.men/1-over-n-and-n-1-recurring%20decimal/"/>
    <id>https://www.kaikai.men/1-over-n-and-n-1-recurring%20decimal/</id>
    <published>2025-02-13T00:21:41.000Z</published>
    <updated>2025-08-30T14:15:58.639Z</updated>
    
    <content type="html"><![CDATA[<h3 id="142857"><a href="#142857" class="headerlink" title="142857"></a>142857</h3><p>近期刷到了一个视频，说 142857 这串数字如何的神秘，与古埃及有如何如何的关系。由于它分别乘以 1~6 都还是这串数，所以叫什么走马灯数，如何如何。抛开神秘学话题，这就是简单的 1&#x2F;7 循环节：</p><p><img src="/../attach/2024/08/1_7_circle.png" alt="1/7 Circle" loading="lazy"></p><p>不过『走马灯数』这个概念还是有点意思的。它最显著的特征是循环节长度 &#x3D; n-1，同时附带的性质是当乘以 $1, 2, 3, \cdots, n-1$ 时，循环节顺序和长度不变，只是起始位置换了一下。因此写了段程序简单搜索一下还有没有其它的 n 也有这个特征。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">loop</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> pool = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        a = (a % n) * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (a === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="comment">// 除尽没有循环节</span></span><br><span class="line">        <span class="keyword">let</span> digi = (a / n) | <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> b = a + digi;</span><br><span class="line">        <span class="keyword">if</span> (pool.<span class="title function_">has</span>(b)) &#123;</span><br><span class="line">            <span class="comment">// 当当前位的值和当前余数都出现过时，新的循环开始了</span></span><br><span class="line">            <span class="keyword">let</span> loop = [...pool];</span><br><span class="line">            <span class="keyword">let</span> index = loop.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> i === b);</span><br><span class="line">            <span class="keyword">let</span> str = loop</span><br><span class="line">                .<span class="title function_">slice</span>(index)</span><br><span class="line">                .<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e % <span class="number">10</span>)</span><br><span class="line">                .<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pool.<span class="title function_">add</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> start = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">while</span> (start &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="title function_">loop</span>(start);</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="property">length</span> == start - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(start, str);</span><br><span class="line">    &#125;</span><br><span class="line">    start++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果出乎意料地多：</p><table><thead><tr><th>1&#x2F;n</th><th>循环节</th></tr></thead><tbody><tr><td>1&#x2F;7</td><td>142857</td></tr><tr><td>1&#x2F;17</td><td>0588235294117647</td></tr><tr><td>1&#x2F;19</td><td>052631578947368421</td></tr><tr><td>1&#x2F;23</td><td>0434782608695652173913</td></tr><tr><td>1&#x2F;29</td><td>0344827586206896551724137931</td></tr><tr><td>1&#x2F;47</td><td>0212765957446808510638297872340425531914893617</td></tr><tr><td>1&#x2F;59</td><td>0169491525423728813559322033898305084745762711864406779661</td></tr><tr><td>1&#x2F;61</td><td>016393442622950819672131147540983606557377049180327868852459</td></tr><tr><td>1&#x2F;97</td><td>010309278350515463917525773195876288659793814432989690721649484536082474226804123711340206185567</td></tr><tr><td>1&#x2F;109</td><td><span style="font-size:15px">009174311926605504587155963302752293577981651376146788990825688073394495412844036697247706422018348623853211 </span></td></tr><tr><td>1&#x2F;113</td><td><span style="font-size:14px">0088495575221238938053097345132743362831858407079646017699115044247787610619469026548672566371681415929203539823 </span></td></tr><tr><td>1&#x2F;131</td><td><span style="font-size:12px">0076335877862595419847328244274809160305343511450381679389312977099236641221374045801526717557251908396946564885496183206106870229 </span></td></tr><tr><td>1&#x2F;149</td><td><span style="font-size:11px">0067114093959731543624161073825503355704697986577181208053691275167785234899328859060402684563758389261744966442953020134228187919463087248322147651 </span></td></tr><tr><td>1&#x2F;167</td><td><span style="font-size:10px">0059880239520958083832335329341317365269461077844311377245508982035928143712574850299401197604790419161676646706586826347305389221556886227544910179640718562874251497 </span></td></tr><tr><td>1&#x2F;179</td><td><span style="font-size:9px">0055865921787709497206703910614525139664804469273743016759776536312849162011173184357541899441340782122905027932960893854748603351955307262569832402234636871508379888268156424581 </span></td></tr><tr><td>1&#x2F;181</td><td><span style="font-size:9px">005524861878453038674033149171270718232044198895027624309392265193370165745856353591160220994475138121546961325966850828729281767955801104972375690607734806629834254143646408839779 </span></td></tr><tr><td>1&#x2F;193</td><td><span style="font-size:8px">005181347150259067357512953367875647668393782383419689119170984455958549222797927461139896373056994818652849740932642487046632124352331606217616580310880829015544041450777202072538860103626943 </span></td></tr><tr><td>1&#x2F;223</td><td><span style="font-size:7px">004484304932735426008968609865470852017937219730941704035874439461883408071748878923766816143497757847533632286995515695067264573991031390134529147982062780269058295964125560538116591928251121076233183856502242152466367713 </span></td></tr><tr><td>1&#x2F;229</td><td><span style="font-size:7px">004366812227074235807860262008733624454148471615720524017467248908296943231441048034934497816593886462882096069868995633187772925764192139737991266375545851528384279475982532751091703056768558951965065502183406113537117903930131 </span></td></tr><tr><td>1&#x2F;233</td><td><span style="font-size:7px">0042918454935622317596566523605150214592274678111587982832618025751072961373390557939914163090128755364806866952789699570815450643776824034334763948497854077253218884120171673819742489270386266094420600858369098712446351931330472103 </span></td></tr><tr><td>1&#x2F;257</td><td><span style="font-size:6px">0038910505836575875486381322957198443579766536964980544747081712062256809338521400778210116731517509727626459143968871595330739299610894941634241245136186770428015564202334630350194552529182879377431906614785992217898832684824902723735408560311284046692607 </span></td></tr><tr><td>1&#x2F;263</td><td><span style="font-size:6px">0038022813688212927756653992395437262357414448669201520912547528517110266159695817490494296577946768060836501901140684410646387832699619771863117870722433460076045627376425855513307984790874524714828897338403041825095057034220532319391634980988593155893536121673 </span></td></tr><tr><td>1&#x2F;269</td><td><span style="font-size:6px">0037174721189591078066914498141263940520446096654275092936802973977695167286245353159851301115241635687732342007434944237918215613382899628252788104089219330855018587360594795539033457249070631970260223048327137546468401486988847583643122676579925650557620817843866171 </span></td></tr><tr><td>1&#x2F;313</td><td><span style="font-size:5px">003194888178913738019169329073482428115015974440894568690095846645367412140575079872204472843450479233226837060702875399361022364217252396166134185303514376996805111821086261980830670926517571884984025559105431309904153354632587859424920127795527156549520766773162939297124600638977635782747603833865814696485623 </span></td></tr><tr><td>1&#x2F;337</td><td><span style="font-size:4px">002967359050445103857566765578635014836795252225519287833827893175074183976261127596439169139465875370919881305637982195845697329376854599406528189910979228486646884272997032640949554896142433234421364985163204747774480712166172106824925816023738872403560830860534124629080118694362017804154302670623145400593471810089020771513353115727 </span></td></tr><tr><td>1&#x2F;367</td><td><span style="font-size:4px">002724795640326975476839237057220708446866485013623978201634877384196185286103542234332425068119891008174386920980926430517711171662125340599455040871934604904632152588555858310626702997275204359673024523160762942779291553133514986376021798365122615803814713896457765667574931880108991825613079019073569482288828337874659400544959128065395095367847411444141689373297 </span></td></tr><tr><td>1&#x2F;379</td><td><span style="font-size:4px">002638522427440633245382585751978891820580474934036939313984168865435356200527704485488126649076517150395778364116094986807387862796833773087071240105540897097625329815303430079155672823218997361477572559366754617414248021108179419525065963060686015831134564643799472295514511873350923482849604221635883905013192612137203166226912928759894459102902374670184696569920844327176781 </span></td></tr><tr><td>1&#x2F;383</td><td><span style="font-size:4px">0026109660574412532637075718015665796344647519582245430809399477806788511749347258485639686684073107049608355091383812010443864229765013054830287206266318537859007832898172323759791122715404699738903394255874673629242819843342036553524804177545691906005221932114882506527415143603133159268929503916449086161879895561357702349869451697127937336814621409921671018276762402088772845953 </span></td></tr><tr><td>1&#x2F;389</td><td><span style="font-size:4px">0025706940874035989717223650385604113110539845758354755784061696658097686375321336760925449871465295629820051413881748071979434447300771208226221079691516709511568123393316195372750642673521850899742930591259640102827763496143958868894601542416452442159383033419023136246786632390745501285347043701799485861182519280205655526992287917737789203084832904884318766066838046272493573264781491 </span></td></tr><tr><td>1&#x2F;419</td><td><span style="font-size:3px">0023866348448687350835322195704057279236276849642004773269689737470167064439140811455847255369928400954653937947494033412887828162291169451073985680190930787589498806682577565632458233890214797136038186157517899761336515513126491646778042959427207637231503579952267303102625298329355608591885441527446300715990453460620525059665871121718377088305489260143198090692124105011933174224343675417661097852028639618138424821 </span></td></tr><tr><td>1&#x2F;433</td><td><span style="font-size:3px">002309468822170900692840646651270207852193995381062355658198614318706697459584295612009237875288683602771362586605080831408775981524249422632794457274826789838337182448036951501154734411085450346420323325635103926096997690531177829099307159353348729792147806004618937644341801385681293302540415704387990762124711316397228637413394919168591224018475750577367205542725173210161662817551963048498845265588914549653579676674364896073903 </span></td></tr><tr><td>1&#x2F;461</td><td><span style="font-size:3px">0021691973969631236442516268980477223427331887201735357917570498915401301518438177874186550976138828633405639913232104121475054229934924078091106290672451193058568329718004338394793926247288503253796095444685466377440347071583514099783080260303687635574837310195227765726681127982646420824295010845986984815618221258134490238611713665943600867678958785249457700650759219088937093275488069414316702819956616052060737527114967462039045553145336225596529284164859 </span></td></tr><tr><td>1&#x2F;487</td><td><span style="font-size:3px">002053388090349075975359342915811088295687885010266940451745379876796714579055441478439425051334702258726899383983572895277207392197125256673511293634496919917864476386036960985626283367556468172484599589322381930184804928131416837782340862422997946611909650924024640657084188911704312114989733059548254620123203285420944558521560574948665297741273100616016427104722792607802874743326488706365503080082135523613963039014373716632443531827515400410677618069815195071868583162217659137577 </span></td></tr><tr><td>1&#x2F;491</td><td><span style="font-size:3px">0020366598778004073319755600814663951120162932790224032586558044806517311608961303462321792260692464358452138492871690427698574338085539714867617107942973523421588594704684317718940936863543788187372708757637474541751527494908350305498981670061099796334012219959266802443991853360488798370672097759674134419551934826883910386965376782077393075356415478615071283095723014256619144602851323828920570264765784114052953156822810590631364562118126272912423625254582484725050916496945010183299389 </span></td></tr><tr><td>1&#x2F;499</td><td><span style="font-size:3px">002004008016032064128256513026052104208416833667334669338677354709418837675350701402805611222444889779559118236472945891783567134268537074148296593186372745490981963927855711422845691382765531062124248496993987975951903807615230460921843687374749498997995991983967935871743486973947895791583166332665330661322645290581162324649298597194388777555110220440881763527054108216432865731462925851703406813627254509018036072144288577154308617234468937875751503006012024048096192384769539078156312625250501</span></td></tr></tbody></table><p>简化代码并扩大计算量搜索后，得到 100 万以内的走马灯数分布：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">n_devide_len</span> = (<span class="params">n</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">        pool = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        a = (a % n) * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pool.<span class="title function_">has</span>(a)) &#123;</span><br><span class="line">            <span class="keyword">return</span> pool.<span class="property">size</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pool.<span class="title function_">add</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/../attach/2024/08/circle_in_10e6.png" alt="100 万以内的走马灯数分布" loading="lazy"></p><p>有点意思。</p><hr><h3 id="研究原因"><a href="#研究原因" class="headerlink" title="研究原因"></a>研究原因</h3><p>对于任意由 1&#x2F;n 形成的循环小数，$\frac{1}{n} &#x3D; 0.\overline{******}$，设循环节部分为 $r$，其长度为 $l$，都可以写成一个无穷级数之和：</p><p>$$\frac{1}{n} &#x3D; \frac{r}{10^l}+\frac{r}{10^{2l}}+\cdots+\frac{r}{10^{kl}} +\cdots &#x3D; \sum_{k&#x3D;1}^\infty\frac{r}{10^{kl}}$$</p><p>对这个无穷等比数列重新求和，$S&#x3D;1&#x2F;n$，$10^l * S-S &#x3D; r$，得到 $S &#x3D; \frac{r}{10^l-1} &#x3D; \frac{1}{n}$，所以 $n&#x3D;\frac{10^l - 1}{r}$ ，或者写成 $r&#x3D;\frac{\overbrace{999\cdots999}^l}{n}$，这里的 r 一定是整数。这个方法同时也是将循环小数化为分数的标准方法。</p><ul><li><p>当 $n &#x3D; 7, l &#x3D; 6$ 时，也就得到了 $142857 &#x3D; \frac{\overbrace{999999}^6}{7}$，所以 $1&#x2F;7 &#x3D; 0.\overline{142857}$</p></li><li><p>当 $n &#x3D; 3, l &#x3D; 2$ 时，得到 $r &#x3D; \frac{99}{3} &#x3D; 33$，所以 $1&#x2F;3 &#x3D; 0.\overline{33}$，逻辑上其实也是对的，只是一般来说小数循环时只考虑最小周期，所以正确的写法应该是 $1&#x2F;3 &#x3D; 0.\overline{3}$。</p></li><li><p>当 $n &#x3D; 11, l&#x3D; 10$ 时，得到 $r &#x3D; \frac{9999999999}{11} &#x3D; 0909090909$，要注意这是循环节的计算因此首位的 0 不能去掉，所以 $1&#x2F;11 &#x3D; 0.\overline{0909090909}$，正写为 $1&#x2F;11&#x3D;0.\overline{09}$</p></li></ul><blockquote><p>对于 $1&#x2F;6 &#x3D; 0.1\overline{6}$ 这类存在非循环小数部分的，可以通过乘 10 等操作，把非循环部分移到整数上并抛弃，即化为 $10&#x2F;6 \rightarrow 4&#x2F;6 &#x3D; 2&#x2F;3 &#x3D; 0.\overline{6}$，考察 $0.\overline{6}$ 即可。</p></blockquote><h4 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h4><p>在上述 $n&#x3D;3, n&#x3D;11$ 两个例子中，虽然得到了逻辑上可行的循环节，但不符合通常的习惯，于在结果上进行了缩减，变为符合习惯的最小循环节。</p><ul><li><p>$10^k-1$ 本身就是 3 的倍数，所以循环节永远只有一位。</p></li><li><p>11 因其自身的特殊性质，11 &#x3D; 10 + 1，天然地符合 10 为底的级数的结构，如果一个数字各位数值相同，那么奇数位数字对 11 都是同余的，偶数位也是。所以 $10^k-1 (mod\ 11)$ 只有两个结果 9 和 0。并且在两者间不断跳转。</p></li></ul><p>可见，循环节长度即是最早出现同余时的 k 值，若要 1&#x2F;n 的循环节长度为 n-1，需要 $10^k \ mod\ n$ 在 $k &#x3D; 1, \cdots, n-1$ 时都不同余。</p><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><p>从上可见，循环小数与进制密切相关。例如在 8 进制中，9（在 8 进制中也写为 11）的性质将和 10 进制中的 11 相似，也会出现奇位同余偶位同余的情况。所以 $1&#x2F;11_{(8)} &#x3D; 0.\overline{07}_{(8)}$，形式上完全一致。</p><p>而 $1&#x2F;7_{(8)}$ 则变为了 $0.\overline{1}_{(8)}$，因为 $8^k-1_{(8)} &#x3D; {\overbrace{77\dots7}^{k}}_{(8)}$ 各位恒为 7，也就不存在什么神秘数字循环了。</p><p>由于和进制本身高度相关，因此某个 1&#x2F;n 是否有 n-1 位循环节，取决于它和进制 $R^k - 1$ 之间的相除结果，这个关系不知道数论中是否已有结论。</p><h4 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h4><ol><li><p>n-1 位循环节天然存在，只是因为有可能内部重复导致长度缩减。而在 n-1 基础上的缩减不会破坏原有模式，因此最小循环节长度一定是 n-1 的因数。</p></li><li><p>只有当 n 为素数时，才有可能实际出现 n-1 位循环节。由于余数需要遍历 1 到 n-1 的所有数。若 n &#x3D; pq，余数会在 q-1 与 p-1 的共同作用下循环，但 p-1 与 q-1 至少含有公因素 2，不可能产生所有 {0, p-1} 与 {0, q-1} 之间的全部两两组合。</p></li><li><p>一切循环节在若干次乘 10 排除不循环部分，整理为 $0.\overline{******}$ 形式后，都可以用 $a * 1&#x2F;n$ 来表示。</p></li><li><p>如果 n 为素数，而其循环节长度 $l$ 不为 n-1，则必有互相不能抵达的 $\frac{n-1}{l}$ 套循环，进入哪套循环取决于分子 $a$ 的值。因为素数没有因数，$a&#x2F;n (a&#x3D;1, 2,\dots, n-1)$ 必然有 n-1 个不同余数。</p></li><li><p>如果 n 为素数，则 1&#x2F;n 的循环节必然形如 $0.\overline{******}$，从小数点后就开始，即使起始是若干个 0 也是循环节的一部分。</p></li><li><p>如果 n 是若干个不同素数乘积，则循环节长度是这些素数对应的循环节长度的最小公倍数。如果 n 是素数 p 的 k 次方时，循环节长度是 $l * p^{k-1},(p&gt;3)$ 或 $l * p^{k-2},(p&#x3D;3)$。</p><blockquote><p>$p&#x3D;3$ 的特例在于 $p^2&#x3D;9$ 仍然小于 10，没有触发进退位，即当 p^k 仍小于对应进制单位时，不往上叠加循环节长度。在 8 进制下就是正常的 $l*p^{k-1}$ 了。</p></blockquote></li><li><p>不存在比 n-1 更长的循环节。</p></li><li><p>不同进制下的走马灯数具体是不一样的，例如 7 在 10 进制下是走马灯数，但在 8 进制下不是。2 在一切奇数进制下都是走马灯数，因为只要除不尽，循环节长度就至少为 1。</p></li><li><p>除 2 以外，走马灯数的循环节长必度是偶数，将循环节的两段拆分后相加，一定是 $999\cdots$。例如 $1&#x2F;7 &#x3D; 0.\overline{142857}$，则 $142 + 857 &#x3D; 999$。上述结论在其它进制下也成立，例如 8 进制下为 $777\cdots_{(8)}$。</p><p> 证明：设一个循环小数 $\frac{1}{n}$ 的循环节两段分别为 $\overline{r_1r_2}$，总长度为$2k$，则其既可以表达为</p><p> \begin{align*} \frac{1}{n} &#x3D; \frac{\overline{r_1r_2}}{10^{2k}} + \frac{\overline{r_1r_2}}{10^{4k}} + \cdots + \frac{\overline{r_1r_2}}{10^{pk}}+\cdots &#x3D; \frac{\overline{r_1r_2}}{10^{2k}-1} &amp;&amp;(1) \end{align*}</p><p> 也可以表示为：</p><p> \begin{align*} \frac{1}{n} &#x3D;\frac{r_1}{10^k} + \frac{\overline{r_2r_1}}{10^{3k}} + \cdots + \frac{\overline{r_2r_1}}{10^{(p+1)k}}+\cdots &amp;&amp;(2) \end{align*}</p><p> $(2)$ 式乘以 $10^n$ 再加 $(1)$ 式，得到：</p><p> \begin{align*} \frac{(10^k+1)}{n} &#x3D; r_1 + \frac{(r_1+r_2)(10^k+1)}{10^{2k}-1} &#x3D; r_1 +\frac{r_1+r_2}{10^k-1} &amp;&amp;(3) \end{align*}</p><p> 再将 $(1)$ 式分子分母同除 $10^n+1$ 得到：</p><p> \begin{align*}<br> &amp;&amp;\frac{1}{n} &#x3D; \frac{\overline{r_1r_2}}{10^{2k}-1} &#x3D; \frac{\overline{r_1r_2}&#x2F;(10^k+1)}{(10^{2k}-1)(10^k+1)} &#x3D; \frac{\frac{\overline{r_1r_2}}{10^k+1}}{10^k-1} &amp;&amp;(4) \\<br> \Rightarrow &amp;&amp;\frac{\overline{r_1r_2} * n}{10^k+1} &#x3D; 10^k-1 &amp;&amp;(5)<br> \end{align*}</p><p> 其中，$(4)$ 中分子 $\frac{\overline{r_1r_2}}{10^k+1}$ 不可能为整数，否则直接可以化简：</p><p> \begin{align*} \frac{1}{n} &#x3D; \frac{\frac{\overline{r_1r_2}}{10^k+1}}{10^k-1} &#x3D; \frac{r_k}{10^k-1} &amp;&amp;(6) \end{align*}</p><p> 循环节长度直接由 2k 降为 k，这与之前的假设不符。因此在 $(5)$ 式中，$n$ 与 $(10^k+1)$ 必然存在公因数。而 n 为素数，则 $(10^k+1)$ 为 $n$ 的倍数。即 $(3)$ 式中 $\frac{(10^k+1)}{n}$ 为整数。</p><p> 因此，$r_1 + \frac{r_1+r_2}{10^k-1}$ 为整数。$r_1$ 本来就是提出来的前半循环节为整数，而 $\frac{r_1+r_2}{10^k-1}$ 是由两个长度为 k 的半循环节加和得到的分子，要求其为整数只可能是 1。所以 $r_1+r_2 &#x3D; 10^k-1 &#x3D; \overbrace{999\cdots}^k$</p><p> 得证。其它进制下的证明将底数 10 替换为对应进制即可。</p></li></ol><h3 id="计算程序"><a href="#计算程序" class="headerlink" title="计算程序"></a>计算程序</h3><p>走马灯数搜索程序在得到以上结论后可以提升一些效率：</p><ol><li>使用 <a href="/primes-algorith-with-sugar/#%E6%AC%A7%E6%8B%89%E7%AD%9B%E6%B3%95">欧拉筛法</a>，只在素数堆里进行验证。</li><li>如果循环节小于 n-1，由于推论 1，则其至多 $\frac{n-1}{2}$，因此当计算到第 $\frac{n+1}{2}$ 项时，便可得出结论而不必计算后半段。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">searchCarousel</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line">    <span class="keyword">let</span> eularboard = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">let</span> carousels = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isCarousel</span> = (<span class="params">p, radix = <span class="number">10</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">            pool = <span class="keyword">new</span> <span class="title class_">Set</span>(),</span><br><span class="line">            end = (p + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (pool.<span class="property">size</span> &lt; end) &#123;</span><br><span class="line">            a = (a % p) * radix;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pool.<span class="title function_">has</span>(a)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pool.<span class="title function_">add</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eularboard[i]) &#123;</span><br><span class="line">            primes.<span class="title function_">push</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isCarousel</span>(i)) &#123;</span><br><span class="line">                carousels.<span class="title function_">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; primes.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * primes[j] &gt; n) <span class="keyword">break</span>; <span class="comment">// 上限判断</span></span><br><span class="line">            eularboard[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] === <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 跳过本轮后续筛选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> carousels;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">searchCarousel</span>(<span class="number">1000</span>));</span><br><span class="line"><span class="comment">// [7, 17, 19, 23, 29, 47, 59, 61, 97, 109, 113, 131, 149, 167, 179, 181, 193, 223, 229, 233,  257, 263,</span></span><br><span class="line"><span class="comment">// 269, 313, 337, 367, 379, 383, 389, 419,  433, 461, 487, 491, 499, 503, 509, 541, 571, 577,  593, 619,</span></span><br><span class="line"><span class="comment">// 647, 659, 701, 709, 727, 743, 811, 821, 823, 857, 863, 887, 937, 941, 953, 971, 977, 983]</span></span><br></pre></td></tr></table></figure><h4 id="其它进制"><a href="#其它进制" class="headerlink" title="其它进制"></a>其它进制</h4><p>根据前文继续厘清思路，在其它进制下：</p><ul><li>循环节长度的度量和进制数无关，表述形式不改变数值大小，在 10 进制下若为 16，在 8 进制下就写为 20，但都指的是同一个值。</li><li>但循环节的生成和进制有关，在当前位下不满足该进制条件下的整除，产生余数，就会退到下一位。</li><li>在其它进制下，$r &#x3D; \frac{R^{n-1}-1}{n}$ 仍然成立，这是循环小数定义公式的变形。</li><li>仍然只需要在素数表中搜索走马灯数，因为 r 需要由 $n-1$ 个不同余的结果来确保循环长度上限。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算各进制下的走马灯数 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">searchCarousel</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line">    <span class="keyword">let</span> eularboard = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eularboard[i]) &#123;</span><br><span class="line">            primes.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; primes.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * primes[j] &gt; n) <span class="keyword">break</span>; <span class="comment">// 上限判断</span></span><br><span class="line">            eularboard[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] === <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 跳过本轮后续筛选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isCarousel</span> = (<span class="params">p, radix = <span class="number">10</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (p === <span class="number">2</span> &amp;&amp; radix % <span class="number">2</span> !== <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 2 在奇数进制下必然是 1 位循环</span></span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">            pool = <span class="keyword">new</span> <span class="title class_">Set</span>(),</span><br><span class="line">            end = (p + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (pool.<span class="property">size</span> &lt; end) &#123;</span><br><span class="line">            a = (a % p) * radix;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pool.<span class="title function_">has</span>(a)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pool.<span class="title function_">add</span>(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (thisRadix = <span class="number">2</span>; thisRadix &lt; <span class="number">100</span>; thisRadix++) &#123;</span><br><span class="line">        <span class="keyword">let</span> carousels = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; primes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isCarousel</span>(primes[i], thisRadix)) &#123;</span><br><span class="line">                carousels.<span class="title function_">push</span>(primes[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(thisRadix, carousels.<span class="property">length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">searchCarousel</span>(<span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p>搜索在各不同进制下， 10000 以内的走马灯数的数量，结果如下：</p><table><thead><tr><th>进制</th><th>走马灯数数量</th><th>进制</th><th>走马灯数数量</th><th>进制</th><th>走马灯数数量</th><th>进制</th><th>走马灯数数量</th><th>进制</th><th>走马灯数数量</th></tr></thead><tbody><tr><td></td><td></td><td>21</td><td>447</td><td>41</td><td>460</td><td>61</td><td>457</td><td>81</td><td>1</td></tr><tr><td>2</td><td>470</td><td>22</td><td>472</td><td>42</td><td>476</td><td>62</td><td>482</td><td>82</td><td>455</td></tr><tr><td>3</td><td>477</td><td>23</td><td>459</td><td>43</td><td>490</td><td>63</td><td>457</td><td>83</td><td>453</td></tr><tr><td>4</td><td>0</td><td>24</td><td>461</td><td>44</td><td>460</td><td>64</td><td>0</td><td>84</td><td>466</td></tr><tr><td>5</td><td>493</td><td>25</td><td>1</td><td>45</td><td>483</td><td>65</td><td>477</td><td>85</td><td>468</td></tr><tr><td>6</td><td>470</td><td>26</td><td>455</td><td>46</td><td>445</td><td>66</td><td>469</td><td>86</td><td>464</td></tr><tr><td>7</td><td>466</td><td>27</td><td>278</td><td>47</td><td>477</td><td>67</td><td>471</td><td>87</td><td>478</td></tr><tr><td>8</td><td>277</td><td>28</td><td>451</td><td>48</td><td>468</td><td>68</td><td>459</td><td>88</td><td>454</td></tr><tr><td>9</td><td>1</td><td>29</td><td>465</td><td>49</td><td>1</td><td>69</td><td>461</td><td>89</td><td>470</td></tr><tr><td>10</td><td>467</td><td>30</td><td>488</td><td>50</td><td>471</td><td>70</td><td>473</td><td>90</td><td>478</td></tr><tr><td>11</td><td>444</td><td>31</td><td>469</td><td>51</td><td>471</td><td>71</td><td>471</td><td>91</td><td>453</td></tr><tr><td>12</td><td>459</td><td>32</td><td>372</td><td>52</td><td>460</td><td>72</td><td>470</td><td>92</td><td>464</td></tr><tr><td>13</td><td>458</td><td>33</td><td>474</td><td>53</td><td>470</td><td>73</td><td>465</td><td>93</td><td>446</td></tr><tr><td>14</td><td>459</td><td>34</td><td>473</td><td>54</td><td>471</td><td>74</td><td>447</td><td>94</td><td>485</td></tr><tr><td>15</td><td>454</td><td>35</td><td>461</td><td>55</td><td>486</td><td>75</td><td>471</td><td>95</td><td>462</td></tr><tr><td>16</td><td>0</td><td>36</td><td>0</td><td>56</td><td>461</td><td>76</td><td>467</td><td>96</td><td>464</td></tr><tr><td>17</td><td>451</td><td>37</td><td>466</td><td>57</td><td>451</td><td>77</td><td>449</td><td>97</td><td>471</td></tr><tr><td>18</td><td>472</td><td>38</td><td>466</td><td>58</td><td>478</td><td>78</td><td>451</td><td>98</td><td>459</td></tr><tr><td>19</td><td>473</td><td>39</td><td>489</td><td>59</td><td>465</td><td>79</td><td>466</td><td>99</td><td>476</td></tr><tr><td>20</td><td>487</td><td>40</td><td>458</td><td>60</td><td>455</td><td>80</td><td>490</td><td>100</td><td>0</td></tr></tbody></table><p>这里最有特点的是当进制为偶数的完全平方时，没有走马灯数，当进制为奇数的完全平方时，只有唯一一个走马灯数 2，循环节长度为 1。</p><h4 id="特殊进制-R-s-2"><a href="#特殊进制-R-s-2" class="headerlink" title="特殊进制 $R&#x3D;s^2$"></a>特殊进制 $R&#x3D;s^2$</h4><p>无论在哪种进制下，循环节公式 $r &#x3D; \frac{R^{n-1}-1}{n}$ 都仍然是成立的。其中 $R$ 为指定的进制数，$n$ 为测试数字， $r$ 为对应的循环节。根据前文所述，在一些情况下循环节会缩减。即当 r 的数字序列内部出现重复时，需要用更短的循环节代替。前文 $\frac{1}{11} &#x3D; 0.\overline{0909090909} &#x3D; 0.\overline{09}$ 便是例子。</p><p>而当 $R$ 为完全平方数 $s^2$ 时，将循环节公式展开为；</p><p>$$ r_{(R)} &#x3D; \frac{(s^2)^{n-1}-1}{n} &#x3D; \frac{(s^{n-1}+1)(s^{n-1}-1)}{n} &#x3D; (s^{n-1}+1) \cdot \frac{s^{n-1}-1}{n}$$</p><p>因为 $s$ 是整数，注意到 $\frac{s^{n-1}-1}{n}$ 实际上是在 $s$ 进制下的 $\frac{1}{n}$ 的循环节表达式 $r_{s(s)}$，必定是有整数解的，并且在 $s$ 进制下的长度至多为 $n-1$ 。</p><p>现在将 $r_{s}$ 的数值从 $s$ 进制转到 $R$ 进制。因为$R&#x3D;s^2$，$R$ 进制下一位数值可以容纳 $s$ 进制下两位。其长度在转换后正好一半 $\frac{n-1}{2}$，n 为素数。则：</p><p>$$r_{(R)} &#x3D;(s^{n-1} + 1) * r_{s(s)} \overset{s\rightarrow R}{&#x3D;\!&#x3D;\!&#x3D;}  (R^{\frac{n-1}{2}} + 1) * r_{s(R)}$$</p><p>除 2 以外的 n 都是素数，所以 $\frac{n-1}{2}$ 是整数，$(R^{\frac{n-1}{2}} + 1)$ 是形如 $\overbrace{100\cdots01}^{(n+1)&#x2F;2}$ 的整数，长度上正好使 $r_{s(R)}$ 重复两遍，而不会有叠加进位。</p><p>因此当进制 $R$ 为完全平方数时，任意 $n$ 的 $r_{(R)} &#x3D; \frac{R^{n-1}-1}{n}$ 数字序列至少会内部重复一次，所以长度一定小于 $n-1$，也就不存在跑马灯数。</p><blockquote><p>推论：当进制 $R&#x3D;s^{(2^n)}$ 时，对应的最长循环节为 $\frac{n-1}{2^n}$ 向上取整。</p></blockquote><h3 id="费马小定律"><a href="#费马小定律" class="headerlink" title="费马小定律"></a>费马小定律</h3><p>在前文中数次使用 $r&#x3D;(R^{n-1}-1)&#x2F;n$，并且认定它是整数，是因为该式是从循环节的级数表示法计算出来的，而循环节本身一定是 n-1 位的整数，所以认为是整数。这个推论是单薄的，不能证明任意 $(R^{n-1}-1)&#x2F;n$ 一定是整数。但其实关于这一点的正向证明早就在三百多年前就被书空白写不下学家完成了：</p><p>$(R^{n-1}-1)&#x2F;n$ 为整数，其实本身就是 <strong><a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86">费马小定理</a></strong> 的一部分，即：</p><ul><li>假如 $a$ 是整数，$p$ 是素数，那么 $a^p \equiv a (mod\ p)$</li><li>如果 $a$ 不是 $p$ 的倍数，则 $a^{p-1} \equiv 1 (mod\ p)$，这其实就是我们用的循环节公式。</li><li>如果 $a$ 是 $p$ 的倍数，则 $a^{p-1} \equiv 0 (mod\ p)$，这时就除尽不构成循环节了。</li></ul><p>我们之前提到，进制的转换会影响循环节数字序列的变化，但不影响素数、整除等基于数本身的性质，因此这里的 R 在整除判定上反而和进制本身没什么关系，就是一个单纯的幂底数。</p><h3 id="模运算与原根"><a href="#模运算与原根" class="headerlink" title="模运算与原根"></a>模运算与原根</h3><p>当引入费马小定律后，我们进入了数论中模运算的领域。在前文中有一条推论 2：</p><blockquote><p>只有当 n 为素数时，才有可能出现 n-1 位循环节。由于余数需要遍历 1 到 n-1 的所有数。若 n &#x3D; pq，余数会在 q-1 与 p-1 的共同作用下循环，但 p-1 与 q-1 至少含有公因素 2，不可能产生所有 {0, p-1} 与 {0, q-1} 之间的全部两两组合。</p></blockquote><p>其实是在数论的门外匆匆一瞥。思而不学则民科，在查询了一些资料后，发现其实这些走马灯数在数论中早已有深入的讨论。本文前半篇是从计算中发现现象，再从现象中思索原因。后半篇打算从原理出发，厘清前因后果全套链条。</p><h4 id="欧拉函数-ϕ-n"><a href="#欧拉函数-ϕ-n" class="headerlink" title="欧拉函数 ϕ(n)"></a>欧拉函数 ϕ(n)</h4><p>为了循序渐进，先来熟悉一下欧拉函数，其定义为：</p><p>$$\phi(n)&#x3D;小于正整数 n 且与 n 互素（即最大公约数为1）的正整数的个数。$$</p><blockquote><p>注意这些正整数不一定是素数，例如 8 与 9 是互素的，但两个都不是素数。</p></blockquote><p>这个函数描述相比一般函数通俗得多，这也是数论领域的特色。尽管如此，这个函数实际上却并不用真的去逐个数个数，它确实是有公式通解的：</p><p>一般地，若 $n&#x3D;p_1^{k_1}\cdot p_2^{k_2}\cdot \cdots \cdot p_m^{k_m}$，$p_m$为 n 的素因数，则：<br>$$\phi(n)&#x3D;n\cdot\left(1-\frac{1}{p_1}\right)\left(1-\frac{1}{p_2}\right)\cdots\left(1-\frac{1}{p_m}\right)$$</p><ul><li>当 n 为素数时，所有 $1\leq k &lt; n$ 均有效，$\phi(7)&#x3D;7-1&#x3D;6.$</li><li>当 $n&#x3D;p^k$ 为单一素数的幂时，, $\phi(8)&#x3D;\phi(2^3)&#x3D;2^3-2^2&#x3D;4.$</li></ul><p>欧拉公式便是上文 <strong>推论 6</strong> 的完整表述。略一思索也可以很快得出结论：『互素』其实就要求所有数都『避开』n 的所有素因数及其构成的合数集，这其实就是个变形的组合数与容斥问题，形式上类似于：</p><p>$$\phi(n)&#x3D;n -\sum{\frac{n}{p_i}} + \sum{\frac{n}{p_ip_j}} - \sum{\frac{n}{p_ip_jp_k}} + \cdots + (-1)^{m-1}\frac{n}{p_1p_2\cdots p_m}$$</p><p>整理便可得到通项公式。</p><blockquote><p>另外值得注意的是，欧拉公式中并没有显式地使用到幂数 $k_1 \cdots k_m$，实际上是因为 $n&#x3D;p_1^{k_1}\cdot p_2^{k_2}\cdot \cdots \cdot p_m^{k_m}$ 中已经包含了所有的 $k$。</p></blockquote><h4 id="整数环与有限域"><a href="#整数环与有限域" class="headerlink" title="整数环与有限域"></a>整数环与有限域</h4><p>在模运算 $\ mod\ n$ 中，所有余数相同的整数都被视为等价的，即 $a+kn \equiv a \ mod\ n$，通常用最小非负余数 $[0],[1],[2],…,[n−1]$ 表示这些等价类。所有的余数类构成一个集合，称之为 n 的<strong>整数环</strong>，用奇怪符号 $\Bbb{Z}&#x2F;n\Bbb{Z}$ 表示。</p><p>整数环也有类似一般逻辑的『加法』与『乘法』运算：</p><p>$$[a]+[b]&#x3D;[a+b]\ (mod\ n)$$<br>$$[a]\cdot[b]&#x3D;([a] \times [b])\ (mod\ n)$$</p><blockquote><p>从进制的角度也很好理解，大于 n 的部分『进位』上去了，无法影响最后一位余数的运算。尽管模运算本身没有提到进制，但进制本身就是模的一种应用，通过两者的相似性有助于理解问题。</p></blockquote><p>因为同余的是一类数而不是一个数，因此没法直接做除法运算，但可以定义一个 <strong>乘法逆元</strong>，当：</p><p>$$[a] \times [b] \equiv 1 \ mod\ n$$</p><p>时，$[a]$ 与 $[b]$ 就互为乘法逆元。</p><p>同样地，和乘法中 0 类似，模运算也会出现 $a \times b \equiv 0 \ mod\ n$ 的情况，零因子没有逆元。出现零因子的原因也很简单，当 n 为合数时，a b 两个非零元素相乘后结果能被 n 整除。</p><p>整数环仅仅是个称谓，任意整数 n 都有长度为 n 的整数环，并不能体现什么特殊性。但 n 不同会使得对应的整数环内部表现出不同的性质，则是深入探究的目标。</p><p>前面也看到，有些整数环内部存在零因子，有些则没有。判断方法很简单，当 n 为素数时，其整数环内部没有零因子，所有非零同余类都有对应的乘法逆元。这就和上面的 <em>推论 2</em> 一致了。此时整数环获得了一个新名字：<strong>有限域</strong>。</p><h4 id="原根、欧拉定理与阶"><a href="#原根、欧拉定理与阶" class="headerlink" title="原根、欧拉定理与阶"></a>原根、欧拉定理与阶</h4><p>当我们在关注循环小数的循环节时，本质上是对其不断循环取除的过程，将余数乘以进制，除以 n 以后再取余数，如此不断循环。如果将这个过程抽象一下，其实就是如下表述：</p><blockquote><p>在模 n 的整数环中，对整数 $r$ 的幂次 $(r^1, r^2, \cdots, r^k)$ 不断进行模运算，则其或落入零因子，或者在一或多个非零同余间循环。</p></blockquote><p>——实际上就是 r 进制下 1&#x2F;n 的循环节计算过程，或者被整除，或者处于某个循环。</p><p>在数论课本中，对上述内容做了展开，有更严谨而完备的表述与证明过程：</p><h5 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h5><blockquote><p>若 a 与 n 互素，则 $a^{\phi(n)} \equiv 1 \ mod\ n$</p></blockquote><p>欧拉定理的证明过程大致分为四步：</p><ol><li><p>设模 n 的简化剩余系为 $S &#x3D; {r_1, r_2, \cdots, r_{\phi(n)}}$ 满足 $gcd(r_i, n) &#x3D; 1 $，且任意两项不同余，即 $r_i \not\equiv r_j$。</p></li><li><p>将 $S$ 每个元素乘以 a，得到 $a\cdot S&#x3D; {a\cdot r_1, a\cdot r_2, \cdots, a\cdot r_{\phi(n)}}$。此时若 $a\cdot r_i \equiv a\cdot r_j \ mod\ n$，则因 a 与 n 互素可消去，得到 $r_i \equiv r_j$，矛盾。 故 $a\cdot S$ 仍为简化剩余系，与 $S$ 包含相同的剩余类，仅顺序不同。</p></li><li><p>由于两者同余，$S$ 和 $a\cdot S$ 的乘积相等：</p><p> $$\prod_{i&#x3D;1}^{\phi(n)} r_i \equiv P\ mod\ n \equiv a^{\phi(n)} \cdot P\ mod\ n \equiv \prod_{i&#x3D;1}^{\phi(n)} (a \cdot r_i) $$</p></li><li><p>由于 $P$ 是乘积，$r_i$ 与 n 互素，故 $P$ 也与 n 互素，两边同乘 $P$ 的逆元 $P^{-1}$，得到 $ a^{\phi(n)}\equiv 1 \ mod\ n$</p></li></ol><h5 id="阶与原根"><a href="#阶与原根" class="headerlink" title="阶与原根"></a>阶与原根</h5><p>由欧拉定理，可以定义 <strong>阶</strong> 与 <strong>原根</strong>：</p><blockquote><ol><li>$a$ 和 $n$ 为互素的正整数，则 $a$ 模 $n$ 的阶是满足 $a^k \equiv 1\ mod\ n$ 的最小正整数 $k$。</li><li>若整数 a 与 n 互素，且其模 n 的乘法阶数等于 ϕ(n)，则称 a 是模 n 的一个原根。</li></ol></blockquote><p>或者使用另一个等效表述：</p><blockquote><p>在模 n 的整数环中，若存在整数 $a$ 使得 $(a^1, a^2, \cdots, a^{\phi(n)})$ 能够遍历所有与 n 互素的剩余类，则 $a$ 称为模 n 的一个<strong>原根</strong>。</p></blockquote><p>一次能遍历所有可能的余数，也就是循环节达到了最大值，这个最大值就是欧拉函数 $\phi(n)$。存在原根和最长循环是一体两面的。</p><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><p>进一步地，若要 $\phi(n) &#x3D; n-1$ 则 n 必须是素数，也就是说，走马灯数的分母 n 必须是素数。而当 $n&#x3D;p $（素数）时，$\phi(n)&#x3D;p-1$，欧拉定理简化为：$a^{p-1}\equiv 1 \ mod\ p $，这就是费马小定理！</p><p>到这里，就和前文的推论 2, 6, 7, 8 都对上了，甚至进一步地和 1, 4 也都能对上，一切全联系起来了！甚至我们还发现了之前没有注意到的 <strong>推论 10：</strong>n 可能有多个原根，则 1&#x2F;n 可能在多个进制下有循环小数，并且所有可能的进制下，循环节的长度都是一样的。</p><p>接下来就是在欧拉定理的指导下，科学地判定走马灯数了：</p><ol><li>当 $n &#x3D; 1, 2, 4, p^k, 2p^k$ 时存在原根，且阶为 $\phi(n)$。但只有 $\phi(n) &#x3D; n - 1$ 时才能称为『走马灯数』，所以 n 必须是素数。</li><li>当且仅当 $a^{n-1} \equiv 1\ mod\ n$ 时，a 即为原根，对应的 n-1 即为循环节长度。</li><li>只需排查任意 $n-1$ 的真因子 $d$ 是否会使得 $a^d \equiv 1\ mod\ n$，如果有，则 $a$ 不是 $n$ 的原根。</li></ol><h4 id="程序优化"><a href="#程序优化" class="headerlink" title="程序优化"></a>程序优化</h4><ol><li>添加 n-1 的真因子 d 的计算过程，这是个因式分解过程。考虑到我们之前已经计算出了素数表用于 n 的选择，这里可以复用。</li><li>在实际计算中，$a^{\phi(n)}$ 仍然是个巨大的数，容易有溢出风险，但模运算支持乘法，因此可以把 $a^b\ mod\ n$ 的指数$b$拆分求模：<br>$$((a\ mod\ n )^{b_1} \times (a\ mod\ n )^{b_2} \times \cdots \times (a\ mod\ n )^{b_k})\ mod\ n$$</li><li>只验证所有 d 下 $a^d \not\equiv 1\ mod\ n$，有 false 直接退出。即排除推论 4 描述的情况。</li></ol><p>据此我们写出了最终的走马灯数快速算法，直接应用欧拉定理，分解 n-1 的素因数，代替原来的试除法进行验证，并使用模运算的乘法分解式来计算 $a^b$ 以避免大数问题。这个算法在 n 较大时的效率比原来有了很大提升。旧算法搜索 100 万以内的走马灯数约需 20 分钟，新算法不到 1 秒，提升了 1000 倍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">searchCarousel</span>(<span class="params">n, radix = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line">    <span class="keyword">let</span> eularboard = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去重列举 n 的所有素因数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">primeFactors</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> factors = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span> &amp;&amp; primes[i] &lt; n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (n % primes[i] === <span class="number">0</span>) &#123;</span><br><span class="line">                factors.<span class="title function_">add</span>(primes[i]);</span><br><span class="line">                n = n / primes[i];</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1</span>) factors.<span class="title function_">add</span>(n);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(factors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算 a^b mod n 的值</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">modExp</span>(<span class="params">a, b, mod</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="number">1n</span>;</span><br><span class="line">        a = <span class="title class_">BigInt</span>(a) % <span class="title class_">BigInt</span>(mod);</span><br><span class="line">        b = <span class="title class_">BigInt</span>(b);</span><br><span class="line">        mod = <span class="title class_">BigInt</span>(mod);</span><br><span class="line">        <span class="keyword">while</span> (b &gt; <span class="number">0n</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b % <span class="number">2n</span> === <span class="number">1n</span>) &#123;</span><br><span class="line">                result = (result * a) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            a = (a * a) % mod;</span><br><span class="line">            b = b / <span class="number">2n</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Number</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否为全循环质数（原根验证法）</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isCarousel</span>(<span class="params">p, radix</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> phi = p - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">modExp</span>(radix, phi, p) !== <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 费马小定理</span></span><br><span class="line">        <span class="keyword">const</span> factors = <span class="title function_">primeFactors</span>(phi);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> factor <span class="keyword">of</span> factors) &#123;</span><br><span class="line">            <span class="keyword">const</span> d = phi / factor; <span class="comment">// 因为 factor 是独立最小素因数，使用对应的 d 可以最大化否决。</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">modExp</span>(radix, d, p) === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 欧拉筛获得素数表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eularboard[i]) &#123;</span><br><span class="line">            primes.<span class="title function_">push</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isCarousel</span>(i, radix)) &#123;</span><br><span class="line">                result.<span class="title function_">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; primes.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * primes[j] &gt; n) <span class="keyword">break</span>; <span class="comment">// 上限判断</span></span><br><span class="line">            eularboard[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] === <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 跳过本轮后续筛选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">searchCarousel</span>(<span class="number">1000000</span>));</span><br><span class="line"><span class="comment">//[ 7, 17, 19, 23, 29, 47, 59, 61, 97, 109, 113, 131, 149, 167, 179, 181, 193, 223, 229, 233, 257, 263, 269, 313, 337, 367, 379, 383,</span></span><br><span class="line"><span class="comment">// 389, 419, 433, 461, 487, 491, 499, 503, 509, 541, 571, 577, 593, 619, 647, 659, 701, 709, 727, 743, 811, 821, 823, 857, 863, 887,</span></span><br><span class="line"><span class="comment">// 937, 941, 953, 971, 977, 983, 1019, 1021, 1033, 1051, 1063, 1069, 1087, 1091, 1097, 1103, 1109, 1153, 1171, 1181, 1193, 1217, 1223,</span></span><br><span class="line"><span class="comment">// 1229, 1259, 1291, 1297, 1301, 1303, 1327, 1367, 1381, 1429, 1433, 1447, 1487, 1531, 1543, 1549, 1553, 1567, 1571, 1579, 1583, 1607, 1619,</span></span><br><span class="line"><span class="comment">//...29400 more items]</span></span><br></pre></td></tr></table></figure><p>进一步地，搜索非 10 原根即非 10 进制下的走马灯数时，除了 n 质数这一条件不变之外，其它也有一些应用定理可以优化的点：</p><ol><li>若 $g$ 的阶为 $\phi(n)$，则 $g^k$ 的阶为 $\frac{\phi(n)}{gcd(k,\phi(n))}$</li><li>当且仅当 $gcd(k,\phi(n)) &#x3D; 1$ 时，$g^k$ 的阶仍为 $\phi(n)$</li></ol><p>故，假设 $g$ 是模 n 的一个原根，则所有其它原根可表示为 $g^k\ mod\ n$，其中 $gcd(k,\phi(n))&#x3D;1$</p><p>所以算法上，应当从 $g&#x3D;2$ 开始搜索第一个原根，先与 n 做互素判定，再应用上文的 isCarousel() 函数。找到 $g$ 后，再寻找 $k$ 令 $gcd(k,\phi(n))&#x3D;1$，则其它原根即为 $g^k\ mod\ n$。gcd() 函数的计算比 modExp() 函数更高效。</p><ul><li>以 n &#x3D; 7 为例，$\phi(7) &#x3D; 6$，</li><li>搜索到第一个 $g&#x3D;3$，$3^6 \equiv 1\ mod\ 7$，且验证了 $3^2 \not\equiv 1\ mod 7$ 和 $3^3 \not\equiv 1\ mod 7$，所以 3 是原根。</li><li>搜索 $k$ 使 $gcd(k,6)&#x3D;1$，且 $1&lt;k&lt;6$，有唯一解 $k&#x3D;5$，计算 $3^{k&#x3D;5}\ mod\ 7$，<code>madExp(3,5,7) == 5</code>，即 5 为第二个原根。注意 $g_2&#x3D;5$ 与 $k&#x3D;5$ 是两个独立的计算过程，虽然值一样。</li><li>对于其它进制，例如 7 应当在 10 进制下也是 6 位循环，是因为 $10\ mod\ 7 \equiv 3\ mod\ 7$。若要在程序的输出结果上体现出来更大的进制，只需要输出前加个循环即可。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码略</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;142857&quot;&gt;&lt;a href=&quot;#142857&quot; class=&quot;headerlink&quot; title=&quot;142857&quot;&gt;&lt;/a&gt;142857&lt;/h3&gt;&lt;p&gt;近期刷到了一个视频，说 142857 这串数字如何的神秘，与古埃及有如何如何的关系。由于它分别乘以 1~6 </summary>
      
    
    
    
    <category term="硬用数学" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E7%94%A8%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="循环节" scheme="https://www.kaikai.men/tags/%E5%BE%AA%E7%8E%AF%E8%8A%82/"/>
    
    <category term="1/n" scheme="https://www.kaikai.men/tags/1-n/"/>
    
  </entry>
  
  <entry>
    <title>虚岁是长大提前一年的预演</title>
    <link href="https://www.kaikai.men/age-s-dress-rehearsal/"/>
    <id>https://www.kaikai.men/age-s-dress-rehearsal/</id>
    <published>2025-01-28T23:54:11.000Z</published>
    <updated>2025-08-30T14:15:58.638Z</updated>
    
    <content type="html"><![CDATA[<p>江南水乡的婴儿呱呱坠地时，窗外的桃枝上正结着薄霜。接生婆用红绸裹住婴儿，在族谱写下&quot;一岁&quot;的瞬间，这个生命就完成了对时间的第一次突围。虚岁不是简单的数字游戏，而是一把丈量生命的游标卡尺，在文明的刻度上为成长预留出余量。</p><p>中国人对时间的认知始终保持着弹性。上古时期，先民们在龟甲上刻下&quot;岁&quot;字时，就赋予了它双重含义：既指周天星辰的运行周期，又指人类生命的生长韵律。《周礼》将三百六十五日划为&quot;岁实&quot;，又在每个朔望月设置&quot;虚日&quot;，这种虚实相生的智慧投射到年龄计算上，便形成了虚岁与实岁并行的独特系统。孩子尚未学会走路，却已在时间的账簿上拥有了完整的一年，如同春分前的惊蛰，用先声夺人的雷鸣预告生命的力量。</p><p>传统礼仪中的冠礼最能体现虚岁的深意。少年十五行冠礼，实则身体仅十四龄。当长辈将缁布冠缓缓加诸其首时，不仅是在完成形式上的成年仪式，更是在进行一场庄重的心理暗示。提前赋予的年龄如同试穿的礼服，让少年在宽出一寸的衣襟里，提前感知未来需要承担的重荷。就像苏州园林的借景艺术，虚岁借来未来的光阴，将成长的远景拉进现实的取景框。</p><p>这种时间预支的智慧，在当代依然焕发着生命力。上海弄堂里的阿婆教孙子打算盘，会故意把算珠拨快一个档位；岭南祠堂的族老主持祭祖，总让孩童站在比实际年龄高一级的台阶上。这些细微的&quot;误差&quot;，实则是为成长铺设的缓冲地带。当成都的茶馆里老人们谈论&quot;虚岁三十该立事&quot;时，他们深谙人生如戏，需要提前一年拉开帷幕，才能让主角从容登场。</p><p>生命的年轮从不是严丝合缝的同心圆。虚岁制在时间褶皱里藏着的这枚硬币，正面镌刻着&quot;未雨绸缪&quot;，背面铭刻着&quot;留有余地&quot;。它提醒我们，成长从来不是瞬间的蜕变，而是层层铺垫的渐进。就像黄山顶上的迎客松，在嶙峋山石间蜿蜒的根系，早在地面枝干成形前，就已在地下完成千百次生长的预演。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;江南水乡的婴儿呱呱坠地时，窗外的桃枝上正结着薄霜。接生婆用红绸裹住婴儿，在族谱写下&amp;quot;一岁&amp;quot;的瞬间，这个生命就完成了对时间的第一次突围。虚岁不是简单的数字游戏，而是一把丈量生命的游标卡尺，在文明的刻度上为成长预留出余量。&lt;/p&gt;
&lt;p&gt;中国人对时间的认知始</summary>
      
    
    
    
    <category term="文艺青年" scheme="https://www.kaikai.men/categories/%E6%96%87%E8%89%BA%E9%9D%92%E5%B9%B4/"/>
    
    
    <category term="虚岁" scheme="https://www.kaikai.men/tags/%E8%99%9A%E5%B2%81/"/>
    
  </entry>
  
  <entry>
    <title>zstd xz 7z lz4 管道压缩效率比较</title>
    <link href="https://www.kaikai.men/pipeable-compress-methods-compare/"/>
    <id>https://www.kaikai.men/pipeable-compress-methods-compare/</id>
    <published>2024-12-03T22:23:15.000Z</published>
    <updated>2025-08-30T14:15:58.638Z</updated>
    
    <content type="html"><![CDATA[<p>担心 TF 卡易损坏导致重新配置系统的麻烦，我准备定期使用 dd 对树莓派进行全卡备份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd if=/dev/mmcblk0 of=/mnt/momoda/$(date +%Y-%m-%d)-sysbak.img</span><br></pre></td></tr></table></figure><p>尽管使用的是 64GB 的 TF 卡，生成的镜像文件也是 64GB。然而，实际系统盘的数据占用并不多，大部分空间是空白。因此，我选择通过管道压缩备份数据的方式以节省存储空间，并测试了几种支持管道的压缩算法的性能。</p><h4 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h4><p>系统存储被分为 &#x2F;dev&#x2F;mmcblk0p1 和 &#x2F;dev&#x2F;mmcblk0p2 两个分区，实际上是同一张 TF 卡，目前总空间使用率约为 10%。目标是定期对全盘进行备份以应对意外，同时通过压缩方式保存数据，减少备份所需的存储空间。由于备份操作在运行中的设备上进行，数据在此期间仍可能被读写，因此选择的压缩算法需要尽可能高效，以减少数据变动的影响。</p><p><strong>全盘空间信息：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="built_in">df</span> ⮐</span><br><span class="line">Filesystem          1K-blocks       Used  Available Use% Mounted on</span><br><span class="line">udev                  3728364          0    3728364   0% /dev</span><br><span class="line">tmpfs                  799744       3176     796568   1% /run</span><br><span class="line">/dev/mmcblk0p2       59551920    5034336   51780988   9% /</span><br><span class="line">tmpfs                 3998704          0    3998704   0% /dev/shm</span><br><span class="line">tmpfs                    5120         16       5104   1% /run/lock</span><br><span class="line">/dev/mmcblk0p1         522232      66728     455504  13% /boot/firmware</span><br><span class="line">tmpfs                  799740          0     799740   0% /run/user/1000</span><br></pre></td></tr></table></figure><p>首先生成一个未压缩的镜像文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="built_in">sudo</span> <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/mmcblk0 of=/mnt/exDisk/sys.img bs=4M ⮐</span><br><span class="line">14909+1 records <span class="keyword">in</span></span><br><span class="line">14909+1 records out</span><br><span class="line">62534975488 bytes (63 GB, 58 GiB) copied, 1459.15 s, 42.9 MB/s</span><br><span class="line"><span class="comment"># 如果压缩算法在树莓派的 CPU 上能达到 42.9 MB/s 的处理速度，就可以认为压缩完全不影响原备份速度。</span></span><br></pre></td></tr></table></figure><p>由于大部分空间是空数据，如果以 63GB 为基数计算，压缩后的文件大小差异将显得微不足道。因此，下表中的百分比均以 zstd 默认压缩率的结果作为 100% 的基准进行比较。</p><p>同时，受限于树莓派的储存方式，该镜像放在了另一台 NAS 上，两台机器间的传输能力为千兆有线，纯传输时间最低约为 536 秒。</p><table><thead><tr><th>算法</th><th>压缩参数</th><th>压缩时间秒</th><th>压缩后字节</th><th>时间比</th><th>体积比</th><th>备注</th></tr></thead><tbody><tr><td>zstd</td><td>-T2 -1</td><td>771.511</td><td>2574731933</td><td>89.66%</td><td>108.84%</td><td></td></tr><tr><td>zstd</td><td>-T2</td><td>860.439</td><td>2365713277</td><td>100.00%</td><td>100.00%</td><td>默认压缩率档位 3</td></tr><tr><td>zstd</td><td>-T2 -10</td><td>1274.784</td><td>2190541240</td><td>148.16%</td><td>92.60%</td><td></td></tr><tr><td>zstd</td><td>-T2 -19</td><td>4416.055</td><td>2009856914</td><td>513.23%</td><td>84.96%</td><td></td></tr><tr><td>xz</td><td>-T2 -0</td><td>1798.904</td><td>2293838248</td><td>209.07%</td><td>96.96%</td><td></td></tr><tr><td>xz</td><td>-T2</td><td>4475.497</td><td>1924084292</td><td>520.14%</td><td>81.33%</td><td>默认压缩率档位 6</td></tr><tr><td>xz</td><td>-T2 -9</td><td>5041.978</td><td>1803774144</td><td>585.98%</td><td>76.25%</td><td></td></tr><tr><td>xz</td><td>-T2 -9e</td><td>8380.731</td><td>1801292000</td><td>974.01%</td><td>76.14%</td><td>e: 消耗额外时间进一步提高压缩率</td></tr><tr><td>7z</td><td>-mmt&#x3D;2 -mx&#x3D;1</td><td>1896.414</td><td>2330130495</td><td>220.40%</td><td>98.50%</td><td></td></tr><tr><td>7z</td><td>-mmt&#x3D;2</td><td>7938.620</td><td>1870578044</td><td>922.62%</td><td>79.07%</td><td>默认压缩率档位 5</td></tr><tr><td>7z</td><td>-mmt&#x3D;2 -mx&#x3D;9</td><td>13600.655</td><td>1788204019</td><td>1580.66%</td><td>75.59%</td><td></td></tr><tr><td>lz4</td><td>-fast</td><td>606.257</td><td>3529871893</td><td>70.46%</td><td>149.21%</td><td>lz4 没有多线程参数</td></tr><tr><td>lz4</td><td></td><td>640.828</td><td>3458840786</td><td>74.48%</td><td>146.21%</td><td></td></tr><tr><td>lz4</td><td>-best</td><td>2613.739</td><td>3038936614</td><td>303.77%</td><td>128.46%</td><td></td></tr></tbody></table><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><ul><li>总体来看，zstd 的性价比明显高于 xz 和 7z 等其它算法。</li><li>lz4 速度极快。尽管没有多线程参数，单核性能仍快于其它算法的双核表现。然而，其较低的压缩率不适合作为备份用途，更适合处理持续性超大量数据的场景。</li><li>使用 <code>lz4 -fast</code> 时，压缩算法的数据吞吐量已经超过数据传输的上限。这是硬盘的瓶颈，不是算法的处理上限。</li><li>由于 TF 卡的读取速度更低，因此对于本文的需求而言，压缩时间低于 1459.15 秒时，是算法在等待数据读取，此时时间消耗的差异不再有区别。</li><li>综合考虑数据分布和性能表现，<code>zstd -T2 -10</code> 是当前测试中最合适的选择。可以进一步测试 <code>-8</code>、<code>-12</code> 等参数，以在 TF 卡读取时间内达到最佳压缩率。由于 TF 卡和 CPU 性能的差异，最佳方案会有所不同，需根据具体情况选择。</li><li>7z 和 xz 实际上用的都是 lzma 算法，两者的压缩率、性能和内存占用都没有什么实际差异。</li><li>在测试过程中，发现 <code>xz -9</code> 和 <code>7z -mx=9</code> 运行时的内存占用也高达 2GB 多，如果是小内存版本的树莓派也根本跑不起来。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;担心 TF 卡易损坏导致重新配置系统的麻烦，我准备定期使用 dd 对树莓派进行全卡备份：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="软件使用" scheme="https://www.kaikai.men/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="zstd" scheme="https://www.kaikai.men/tags/zstd/"/>
    
    <category term="xz" scheme="https://www.kaikai.men/tags/xz/"/>
    
    <category term="7z" scheme="https://www.kaikai.men/tags/7z/"/>
    
    <category term="lz4" scheme="https://www.kaikai.men/tags/lz4/"/>
    
    <category term="compress ratio" scheme="https://www.kaikai.men/tags/compress-ratio/"/>
    
  </entry>
  
  <entry>
    <title>VMWare 17 免费了，但下载链接不好找</title>
    <link href="https://www.kaikai.men/vmware-download-link/"/>
    <id>https://www.kaikai.men/vmware-download-link/</id>
    <published>2024-07-28T12:28:52.000Z</published>
    <updated>2025-08-30T14:15:58.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>直接用浏览器打开 VMWare 的 CDS 地址：</p><p><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/">https://softwareupdate.vmware.com/cds/vmw-desktop/</a></p><p>其中</p><p><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/">fusion</a> 目录是 MacOS 下的 VM Fusion，x86 和 M1 的 MacOS 都能用。<br><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player">ws</a> 目录是 VM Workstation。有 Windows 和 Linux 版。</p><p>一路点进去，选完版本号编译号系统版本后就可以下载 tar 包。用 7zip 等软件可以解压出 VMWare 的安装包。</p><p>比如发文时 ws 的最新版本号是 17.5.2，下载链接就是<br><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.2/23775571/windows/core/VMware-workstation-17.5.2-23775571.exe.tar">https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.2/23775571/windows/core/VMware-workstation-17.5.2-23775571.exe.tar</a></p><h2 id="记"><a href="#记" class="headerlink" title="记"></a>记</h2><p>自从被博通收购以后，VMWare 对个人用户免费了。虽然以前满地都是序列号，个人用户实质也是随便用的，但现在毕竟有官方直接授权了。但博通的帮助系统是真难用，找了半天找不到下载链接。然后想起 vmware 自带的更新是走一个 cds 的，尝试搜索了一下还在，这比在帮助系统里找方便多了。</p><p>记录一下。</p><h2 id="记-II"><a href="#记-II" class="headerlink" title="记 II"></a>记 II</h2><p>遇到了 VMWare 17.5.1 跑 Windows XP 黑屏的 bug，搜索得知 VMWare 一直在不断地删减功能，未来甚至要把底层技术换成 KVM&#x2F;HyperV，自己只做套皮。</p><p>又一个新版本不如老版本的软件。所以挖了一下把 CDS 上现有的老版本下载链接都提了出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nd -e robots=off \</span><br><span class="line">    --spider --wait=1 -l inf \</span><br><span class="line">    https://softwareupdate.vmware.com/cds/vmw-desktop/ \</span><br><span class="line">    2&gt;&amp;1 | grep -E &#x27;^--&#x27;  \</span><br><span class="line">    | awk &#x27;&#123; print $3 &#125;&#x27; &gt;&gt; links.txt</span><br></pre></td></tr></table></figure><p>整理结果：</p><table><thead><tr><th>Version</th><th>Workstation</th><th>Player</th><th>Version</th><th>Fusion</th><th>VMRC</th></tr></thead><tbody><tr><td></td><td></td><td></td><td>e.x.p</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/e.x.p/19431034/x86/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td></td><td></td><td></td><td>3.0.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/3.0.2/232708/core/com.vmware.fusion.pkg.tar">x86</a></td><td></td></tr><tr><td>12.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.0.0/2985596/windows/core/VMware-workstation-12.0.0-2985596.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.0.0/2985596/linux/core/VMware-Workstation-12.0.0-2985596.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.0.0/2985596/windows/core/VMware-player-12.0.0-2985596.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.0.0/2985596/linux/core/VMware-Player-12.0.0-2985596.x86_64.bundle.tar">Linux</a></td><td>8.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.0/2985594/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.0.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.0.1/3160714/windows/core/VMware-workstation-12.0.1-3160714.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.0.1/3160714/linux/core/VMware-Workstation-12.0.1-3160714.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.0.1/3160714/windows/core/VMware-player-12.0.1-3160714.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.0.1/3160714/linux/core/VMware-Player-12.0.1-3160714.x86_64.bundle.tar">Linux</a></td><td>8.0.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.1/3094680/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td></td><td></td><td></td><td>8.0.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.0.2/3164312/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.1.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.1.0/3272444/windows/core/VMware-workstation-12.1.0-3272444.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.1.0/3272444/linux/core/VMware-Workstation-12.1.0-3272444.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.1.0/3272444/windows/core/VMware-player-12.1.0-3272444.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.1.0/3272444/linux/core/VMware-Player-12.1.0-3272444.x86_64.bundle.tar">Linux</a></td><td>8.1.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.1.0/3272237/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.1.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.1.1/3770994/windows/core/VMware-workstation-12.1.1-3770994.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.1.1/3770994/linux/core/VMware-Workstation-12.1.1-3770994.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.1.1/3770994/windows/core/VMware-player-12.1.1-3770994.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.1.1/3770994/linux/core/VMware-Player-12.1.1-3770994.x86_64.bundle.tar">Linux</a></td><td>8.1.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.1.1/3771013/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.0/4352439/windows/core/VMware-workstation-12.5.0-4352439.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.0/4352439/linux/core/VMware-Workstation-12.5.0-4352439.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.0/4352439/windows/core/VMware-player-12.5.0-4352439.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.0/4352439/linux/core/VMware-Player-12.5.0-4352439.x86_64.bundle.tar">Linux</a></td><td>8.5.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.0/4352717/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.1/4542065/windows/core/VMware-workstation-12.5.1-4542065.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.1/4542065/linux/core/VMware-Workstation-12.5.1-4542065.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.1/4542065/windows/core/VMware-player-12.5.1-4542065.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.1/4542065/linux/core/VMware-Player-12.5.1-4542065.x86_64.bundle.tar">Linux</a></td><td>8.5.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.1/4543325/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.2/4638234/windows/core/VMware-workstation-12.5.2-4638234.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.2/4638234/linux/core/VMware-Workstation-12.5.2-4638234.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.2/4638234/windows/core/VMware-player-12.5.2-4638234.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.2/4638234/linux/core/VMware-Player-12.5.2-4638234.x86_64.bundle.tar">Linux</a></td><td>8.5.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.2/4635224/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.3/5115892/windows/core/VMware-workstation-12.5.3-5115892.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.3/5115892/linux/core/VMware-Workstation-12.5.3-5115892.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.3/5115892/windows/core/VMware-player-12.5.3-5115892.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.3/5115892/linux/core/VMware-Player-12.5.3-5115892.x86_64.bundle.tar">Linux</a></td><td>8.5.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.3/4696910/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.4</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.4/5192485/windows/core/VMware-workstation-12.5.4-5192485.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.4/5192485/linux/core/VMware-Workstation-12.5.4-5192485.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.4/5192485/windows/core/VMware-player-12.5.4-5192485.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.4/5192485/linux/core/VMware-Player-12.5.4-5192485.x86_64.bundle.tar">Linux</a></td><td>8.5.4</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.4/5115894/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.5</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.5/5234757/windows/core/VMware-workstation-12.5.5-5234757.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.5/5234757/linux/core/VMware-Workstation-12.5.5-5234757.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.5/5234757/windows/core/VMware-player-12.5.5-5234757.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.5/5234757/linux/core/VMware-Player-12.5.5-5234757.x86_64.bundle.tar">Linux</a></td><td>8.5.5</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.5/5192483/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.6</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.6/5528349/windows/core/VMware-workstation-12.5.6-5528349.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.6/5528349/linux/core/VMware-Workstation-12.5.6-5528349.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.6/5528349/windows/core/VMware-player-12.5.6-5528349.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.6/5528349/linux/core/VMware-Player-12.5.6-5528349.x86_64.bundle.tar">Linux</a></td><td>8.5.6</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.6/5234762/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.7</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.7/5813279/windows/core/VMware-workstation-12.5.7-5813279.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.7/5813279/linux/core/VMware-Workstation-12.5.7-5813279.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.7/5813279/windows/core/VMware-player-12.5.7-5813279.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.7/5813279/linux/core/VMware-Player-12.5.7-5813279.x86_64.bundle.tar">Linux</a></td><td>8.5.7</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.7/5528452/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.8</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.8/7098237/windows/core/VMware-workstation-12.5.8-7098237.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.8/7098237/linux/core/VMware-Workstation-12.5.8-7098237.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.8/7098237/windows/core/VMware-player-12.5.8-7098237.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.8/7098237/linux/core/VMware-Player-12.5.8-7098237.x86_64.bundle.tar">Linux</a></td><td>8.5.8</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.8/5824040/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>12.5.9</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.9/7535481/windows/core/VMware-workstation-12.5.9-7535481.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/12.5.9/7535481/linux/core/VMware-Workstation-12.5.9-7535481.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.9/7535481/windows/core/VMware-player-12.5.9-7535481.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/12.5.9/7535481/linux/core/VMware-Player-12.5.9-7535481.x86_64.bundle.tar">Linux</a></td><td>8.5.9</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.9/7098239/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td></td><td></td><td></td><td>8.5.10</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/8.5.10/7527438/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.0.0/6661328/windows/core/VMware-workstation-14.0.0-6661328.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.0.0/6661328/linux/core/VMware-Workstation-14.0.0-6661328.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.0.0/6661328/windows/core/VMware-player-14.0.0-6661328.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.0.0/6661328/linux/core/VMware-Player-14.0.0-6661328.x86_64.bundle.tar">Linux</a></td><td>10.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.0.0/6665085/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td></td><td></td><td></td><td>10.0.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.0.1/6754183/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.1.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.0/7370693/windows/core/VMware-workstation-14.1.0-7370693.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.0/7370693/linux/core/VMware-Workstation-14.1.0-7370693.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.0/7370693/windows/core/VMware-player-14.1.0-7370693.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.0/7370693/linux/core/VMware-Player-14.1.0-7370693.x86_64.bundle.tar">Linux</a></td><td>10.1.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.0/7370838/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.1.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.1/7528167/windows/core/VMware-workstation-14.1.1-7528167.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.1/7528167/linux/core/VMware-Workstation-14.1.1-7528167.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.1/7528167/windows/core/VMware-player-14.1.1-7528167.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.1/7528167/linux/core/VMware-Player-14.1.1-7528167.x86_64.bundle.tar">Linux</a></td><td>10.1.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.1/7520154/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.1.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.2/8497320/windows/core/VMware-workstation-14.1.2-8497320.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.2/8497320/linux/core/VMware-Workstation-14.1.2-8497320.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.2/8497320/windows/core/VMware-player-14.1.2-8497320.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.2/8497320/linux/core/VMware-Player-14.1.2-8497320.x86_64.bundle.tar">Linux</a></td><td>10.1.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.2/8502123/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.1.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.3/9474260/windows/core/VMware-workstation-14.1.3-9474260.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.3/9474260/linux/core/VMware-Workstation-14.1.3-9474260.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.3/9474260/windows/core/VMware-player-14.1.3-9474260.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.3/9474260/linux/core/VMware-Player-14.1.3-9474260.x86_64.bundle.tar">Linux</a></td><td>10.1.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.3/9472307/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.1.4</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.4/10722678/windows/core/VMware-workstation-14.1.4-10722678.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.4/10722678/linux/core/VMware-Workstation-14.1.4-10722678.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.4/10722678/windows/core/VMware-player-14.1.4-10722678.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.4/10722678/linux/core/VMware-Player-14.1.4-10722678.x86_64.bundle.tar">Linux</a></td><td>10.1.4</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.4/10700604/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.1.5</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.5/10950780/windows/core/VMware-workstation-14.1.5-10950780.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.5/10950780/linux/core/VMware-Workstation-14.1.5-10950780.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.5/10950780/windows/core/VMware-player-14.1.5-10950780.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.5/10950780/linux/core/VMware-Player-14.1.5-10950780.x86_64.bundle.tar">Linux</a></td><td>10.1.5</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.5/10950653/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.1.6</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.6/12368378/windows/core/VMware-workstation-14.1.6-12368378.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.6/12368378/linux/core/VMware-Workstation-14.1.6-12368378.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.6/12368378/windows/core/VMware-player-14.1.6-12368378.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.6/12368378/linux/core/VMware-Player-14.1.6-12368378.x86_64.bundle.tar">Linux</a></td><td>10.1.6</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/10.1.6/12989998/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>14.1.7</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.7/12989993/windows/core/VMware-workstation-14.1.7-12989993.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.7/12989993/linux/core/VMware-Workstation-14.1.7-12989993.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.7/12989993/windows/core/VMware-player-14.1.7-12989993.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.7/12989993/linux/core/VMware-Player-14.1.7-12989993.x86_64.bundle.tar">Linux</a></td><td></td><td></td><td></td></tr><tr><td>14.1.8</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/14.1.8/14921873/windows/core/VMware-workstation-14.1.8-14921873.exe.tar">Windows</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/14.1.8/14921873/windows/core/VMware-player-14.1.8-14921873.exe.tar">Windows</a></td><td></td><td></td><td></td></tr><tr><td>15.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.0/10134415/windows/core/VMware-workstation-15.0.0-10134415.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.0/10134415/linux/core/VMware-Workstation-15.0.0-10134415.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.0/10134415/windows/core/VMware-player-15.0.0-10134415.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.0/10134415/linux/core/VMware-Player-15.0.0-10134415.x86_64.bundle.tar">Linux</a></td><td>11.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.0.0/10120384/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.0.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.1/10737736/windows/core/VMware-workstation-15.0.1-10737736.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.1/10737736/linux/core/VMware-Workstation-15.0.1-10737736.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.1/10737736/windows/core/VMware-player-15.0.1-10737736.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.1/10737736/linux/core/VMware-Player-15.0.1-10737736.x86_64.bundle.tar">Linux</a></td><td>11.0.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.0.1/10738065/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.0.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.2/10952284/windows/core/VMware-workstation-15.0.2-10952284.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.2/10952284/linux/core/VMware-Workstation-15.0.2-10952284.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.2/10952284/windows/core/VMware-player-15.0.2-10952284.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.2/10952284/linux/core/VMware-Player-15.0.2-10952284.x86_64.bundle.tar">Linux</a></td><td>11.0.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.0.2/10952296/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.0.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.3/12422535/windows/core/VMware-workstation-15.0.3-12422535.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.3/12422535/linux/core/VMware-Workstation-15.0.3-12422535.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.3/12422535/windows/core/VMware-player-15.0.3-12422535.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.3/12422535/linux/core/VMware-Player-15.0.3-12422535.x86_64.bundle.tar">Linux</a></td><td>11.0.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.0.3/12992109/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.0.4</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.4/12990004/windows/core/VMware-workstation-15.0.4-12990004.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.0.4/12990004/linux/core/VMware-Workstation-15.0.4-12990004.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.4/12990004/windows/core/VMware-player-15.0.4-12990004.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.0.4/12990004/linux/core/VMware-Player-15.0.4-12990004.x86_64.bundle.tar">Linux</a></td><td></td><td></td><td></td></tr><tr><td>15.1.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.1.0/13591040/windows/core/VMware-workstation-15.1.0-13591040.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.1.0/13591040/linux/core/VMware-Workstation-15.1.0-13591040.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.1.0/13591040/windows/core/VMware-player-15.1.0-13591040.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.1.0/13591040/linux/core/VMware-Player-15.1.0-13591040.x86_64.bundle.tar">Linux</a></td><td>11.1.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.1.0/13668589/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.5.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.0/14665864/windows/core/VMware-workstation-15.5.0-14665864.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.0/14665864/linux/core/VMware-Workstation-15.5.0-14665864.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.0/14665864/windows/core/VMware-player-15.5.0-14665864.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.0/14665864/linux/core/VMware-Player-15.5.0-14665864.x86_64.bundle.tar">Linux</a></td><td>11.5.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.5.0/14634996/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.5.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.1/15018445/windows/core/VMware-workstation-15.5.1-15018445.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.1/15018445/linux/core/VMware-Workstation-15.5.1-15018445.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.1/15018445/windows/core/VMware-player-15.5.1-15018445.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.1/15018445/linux/core/VMware-Player-15.5.1-15018445.x86_64.bundle.tar">Linux</a></td><td>11.5.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.5.1/15018442/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.5.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.2/15785246/windows/core/VMware-workstation-15.5.2-15785246.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.2/15785246/linux/core/VMware-Workstation-15.5.2-15785246.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.2/15785246/windows/core/VMware-player-15.5.2-15785246.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.2/15785246/linux/core/VMware-Player-15.5.2-15785246.x86_64.bundle.tar">Linux</a></td><td>11.5.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.5.2/15794494/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td></td><td></td><td></td><td>11.5.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.5.3/15870345/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.5.5</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.5/16285975/windows/core/VMware-workstation-15.5.5-16285975.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.5/16285975/linux/core/VMware-Workstation-15.5.5-16285975.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.5/16285975/windows/core/VMware-player-15.5.5-16285975.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.5/16285975/linux/core/VMware-Player-15.5.5-16285975.x86_64.bundle.tar">Linux</a></td><td>11.5.5</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.5.5/16269456/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.5.6</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.6/16341506/windows/core/VMware-workstation-15.5.6-16341506.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.6/16341506/linux/core/VMware-Workstation-15.5.6-16341506.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.6/16341506/windows/core/VMware-player-15.5.6-16341506.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.6/16341506/linux/core/VMware-Player-15.5.6-16341506.x86_64.bundle.tar">Linux</a></td><td>11.5.6</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.5.6/16696540/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>15.5.7</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.7/17171714/windows/core/VMware-workstation-15.5.7-17171714.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.7/17171714/linux/core/VMware-Workstation-15.5.7-17171714.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.7/17171714/windows/core/VMware-player-15.5.7-17171714.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/15.5.7/17171714/linux/core/VMware-Player-15.5.7-17171714.x86_64.bundle.tar">Linux</a></td><td>11.5.7</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/11.5.7/17130923/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>16.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.0.0/16894299/windows/core/VMware-workstation-16.0.0-16894299.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.0.0/16894299/linux/core/VMware-Workstation-16.0.0-16894299.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.0.0/16894299/windows/core/VMware-player-16.0.0-16894299.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.0.0/16894299/linux/core/VMware-Player-16.0.0-16894299.x86_64.bundle.tar">Linux</a></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>12.0.1</td><td></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.1/18113358/windows/vmrc-windows.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.1/18113358/linux/VMware-VMRC.tar">Linux</a></td></tr><tr><td></td><td></td><td></td><td>12.0.2</td><td></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.2/19968993/windows/vmrc-windows.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.2/19968993/linux/VMware-VMRC.tar">Linux</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.2/19968993/macos/com.vmware.vmrc.zip.tar">MacOS</a></td></tr><tr><td></td><td></td><td></td><td>12.0.3</td><td></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.3/21263813/windows/vmrc-windows.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.3/21263813/linux/VMware-VMRC.tar">Linux</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.3/21263813/macos/com.vmware.vmrc.zip.tar">MacOS</a></td></tr><tr><td></td><td></td><td></td><td>12.0.4</td><td></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.4/21740317/windows/vmrc-windows.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.4/21740317/linux/VMware-VMRC.tar">Linux</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.4/21740317/macos/com.vmware.vmrc.zip.tar">MacOS</a></td></tr><tr><td></td><td></td><td></td><td>12.0.5</td><td></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.5/22744838/windows/vmrc-windows.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.5/22744838/linux/VMware-VMRC.tar">Linux</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/vmrc/12.0.5/22744838/macos/com.vmware.vmrc.zip.tar">MacOS</a></td></tr><tr><td>16.1.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.1.0/17198959/windows/core/VMware-workstation-16.1.0-17198959.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.1.0/17198959/linux/core/VMware-Workstation-16.1.0-17198959.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.1.0/17198959/windows/core/VMware-player-16.1.0-17198959.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.1.0/17198959/linux/core/VMware-Player-16.1.0-17198959.x86_64.bundle.tar">Linux</a></td><td>12.1.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.1.0/17195230/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>16.1.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.1.1/17801498/windows/core/VMware-workstation-16.1.1-17801498.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.1.1/17801498/linux/core/VMware-Workstation-16.1.1-17801498.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.1.1/17801498/windows/core/VMware-player-16.1.1-17801498.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.1.1/17801498/linux/core/VMware-Player-16.1.1-17801498.x86_64.bundle.tar">Linux</a></td><td>12.1.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.1.1/17801503/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>16.1.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.1.2/17966106/windows/core/VMware-workstation-16.1.2-17966106.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.1.2/17966106/linux/core/VMware-Workstation-16.1.2-17966106.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.1.2/17966106/windows/core/VMware-player-16.1.2-17966106.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.1.2/17966106/linux/core/VMware-Player-16.1.2-17966106.x86_64.bundle.tar">Linux</a></td><td>12.1.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.1.2/17964953/core/com.vmware.fusion.zip.tar">x86</a></td><td></td></tr><tr><td>16.2.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.0/18760230/windows/core/VMware-workstation-16.2.0-18760230.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.0/18760230/linux/core/VMware-Workstation-16.2.0-18760230.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.0/18760230/windows/core/VMware-player-16.2.0-18760230.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.0/18760230/linux/core/VMware-Player-16.2.0-18760230.x86_64.bundle.tar">Linux</a></td><td>12.2.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.0/18760249/x86/core/com.vmware.fusion.zip.tar">x86</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.0/18760249/arm64/core/com.vmware.fusion.zip.tar">arm64</a></td><td></td></tr><tr><td>16.2.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.1/18811642/windows/core/VMware-workstation-16.2.1-18811642.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.1/18811642/linux/core/VMware-Workstation-16.2.1-18811642.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.1/18811642/windows/core/VMware-player-16.2.1-18811642.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.1/18811642/linux/core/VMware-Player-16.2.1-18811642.x86_64.bundle.tar">Linux</a></td><td>12.2.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.1/18811640/x86/core/com.vmware.fusion.zip.tar">x86</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.1/18811640/arm64/core/com.vmware.fusion.zip.tar">arm64</a></td><td></td></tr><tr><td>16.2.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.2/19200509/windows/core/VMware-workstation-16.2.2-19200509.exe.tar">Windows</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.2/19200509/windows/core/VMware-player-16.2.2-19200509.exe.tar">Windows</a></td><td></td><td></td><td></td></tr><tr><td>16.2.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.3/19376536/windows/core/VMware-workstation-16.2.3-19376536.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.3/19376536/linux/core/VMware-Workstation-16.2.3-19376536.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.3/19376536/windows/core/VMware-player-16.2.3-19376536.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.3/19376536/linux/core/VMware-Player-16.2.3-19376536.x86_64.bundle.tar">Linux</a></td><td>12.2.3</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.3/19436697/x86/core/com.vmware.fusion.zip.tar">x86</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.3/19436697/arm64/core/com.vmware.fusion.zip.tar">arm64</a></td><td></td></tr><tr><td>16.2.4</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.4/20089737/windows/core/VMware-workstation-16.2.4-20089737.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.4/20089737/linux/core/VMware-Workstation-16.2.4-20089737.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.4/20089737/windows/core/VMware-player-16.2.4-20089737.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.4/20089737/linux/core/VMware-Player-16.2.4-20089737.x86_64.bundle.tar">Linux</a></td><td>12.2.4</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.4/20071091/x86/core/com.vmware.fusion.zip.tar">x86</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.4/20071091/arm64/core/com.vmware.fusion.zip.tar">arm64</a></td><td></td></tr><tr><td>16.2.5</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.5/20904516/windows/core/VMware-workstation-16.2.5-20904516.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/16.2.5/20904516/linux/core/VMware-Workstation-16.2.5-20904516.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.5/20904516/windows/core/VMware-player-16.2.5-20904516.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/16.2.5/20904516/linux/core/VMware-Player-16.2.5-20904516.x86_64.bundle.tar">Linux</a></td><td>12.2.5</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.5/20904517/x86/core/com.vmware.fusion.zip.tar">x86</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/12.2.5/20904517/arm64/core/com.vmware.fusion.zip.tar">arm64</a></td><td></td></tr><tr><td>17.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.0.0/20800274/windows/core/VMware-workstation-17.0.0-20800274.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.0.0/20800274/linux/core/VMware-Workstation-17.0.0-20800274.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.0.0/20800274/windows/core/VMware-player-17.0.0-20800274.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.0.0/20800274/linux/core/VMware-Player-17.0.0-20800274.x86_64.bundle.tar">Linux</a></td><td>13.0.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.0.0/20802013/x86/core/com.vmware.fusion.zip.tar">x86</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.0.0/20802013/arm64/core/com.vmware.fusion.zip.tar">arm64</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.0.0/20802013/universal/core/com.vmware.fusion.zip.tar">universal</a></td><td></td></tr><tr><td>17.0.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.0.1/21139696/windows/core/VMware-workstation-17.0.1-21139696.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.0.1/21139696/linux/core/VMware-Workstation-17.0.1-21139696.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.0.1/21139696/windows/core/VMware-player-17.0.1-21139696.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.0.1/21139696/linux/core/VMware-Player-17.0.1-21139696.x86_64.bundle.tar">Linux</a></td><td>13.0.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.0.1/21139760/universal/core/com.vmware.fusion.zip.tar">universal</a></td><td></td></tr><tr><td>17.0.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.0.2/21581411/windows/core/VMware-workstation-17.0.2-21581411.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.0.2/21581411/linux/core/VMware-Workstation-17.0.2-21581411.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.0.2/21581411/windows/core/VMware-player-17.0.2-21581411.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.0.2/21581411/linux/core/VMware-Player-17.0.2-21581411.x86_64.bundle.tar">Linux</a></td><td>13.0.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.0.2/21581413/universal/core/com.vmware.fusion.zip.tar">universal</a></td><td></td></tr><tr><td>17.5.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.0/22583795/windows/core/VMware-workstation-17.5.0-22583795.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.0/22583795/linux/core/VMware-Workstation-17.5.0-22583795.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.5.0/22583795/windows/core/VMware-player-17.5.0-22583795.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.5.0/22583795/linux/core/VMware-Player-17.5.0-22583795.x86_64.bundle.tar">Linux</a></td><td>13.5.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.5.0/22583790/universal/core/com.vmware.fusion.zip.tar">universal</a></td><td></td></tr><tr><td>17.5.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.1/23298084/windows/core/VMware-workstation-17.5.1-23298084.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.1/23298084/linux/core/VMware-Workstation-17.5.1-23298084.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.5.1/23298084/windows/core/VMware-player-17.5.1-23298084.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.5.1/23298084/linux/core/VMware-Player-17.5.1-23298084.x86_64.bundle.tar">Linux</a></td><td>13.5.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.5.1/23298085/universal/core/com.vmware.fusion.zip.tar">universal</a></td><td></td></tr><tr><td>17.5.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.2/23775571/windows/core/VMware-workstation-17.5.2-23775571.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.5.2/23775571/linux/core/VMware-Workstation-17.5.2-23775571.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.5.2/23775571/windows/core/VMware-player-17.5.2-23775571.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.5.2/23775571/linux/core/VMware-Player-17.5.2-23775571.x86_64.bundle.tar">Linux</a></td><td>13.5.2</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.5.2/23775688/universal/core/com.vmware.fusion.zip.tar">universal</a></td><td></td></tr><tr><td>17.6.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.6.0/24238078/windows/core/VMware-workstation-17.6.0-24238078.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.6.0/24238078/linux/core/VMware-Workstation-17.6.0-24238078.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.6.0/24238078/windows/core/VMware-player-17.6.0-24238078.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.6.0/24238078/linux/core/VMware-Player-17.6.0-24238078.x86_64.bundle.tar">Linux</a></td><td>13.6.0</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.6.0/24238079/universal/core/com.vmware.fusion.zip.tar">universal</a></td><td></td></tr><tr><td>17.6.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.6.1/24319023/windows/core/VMware-workstation-17.6.1-24319023.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/ws/17.6.1/24319023/linux/core/VMware-Workstation-17.6.1-24319023.x86_64.bundle.tar">Linux</a></td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.6.1/24319023/windows/core/VMware-player-17.6.1-24319023.exe.tar">Windows</a> <a href="https://softwareupdate.vmware.com/cds/vmw-desktop/player/17.6.1/24319023/linux/core/VMware-Player-17.6.1-24319023.x86_64.bundle.tar">Linux</a></td><td>13.6.1</td><td><a href="https://softwareupdate.vmware.com/cds/vmw-desktop/fusion/13.6.1/24319021/universal/core/com.vmware.fusion.zip.tar">universal</a></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;直接用浏览器打开 VMWare 的 CDS 地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://softwareupdate.vmwar</summary>
      
    
    
    
    <category term="软件使用" scheme="https://www.kaikai.men/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="vmware" scheme="https://www.kaikai.men/tags/vmware/"/>
    
    <category term="download" scheme="https://www.kaikai.men/tags/download/"/>
    
    <category term="下载链接" scheme="https://www.kaikai.men/tags/%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>素数算法，外加点糖</title>
    <link href="https://www.kaikai.men/primes-algorith-with-sugar/"/>
    <id>https://www.kaikai.men/primes-algorith-with-sugar/</id>
    <published>2024-04-05T00:21:03.000Z</published>
    <updated>2025-08-30T14:15:58.638Z</updated>
    
    <content type="html"><![CDATA[<p>质数，也叫素数，是对 Prime Number 的不同翻译。素数的叫法大概率来自日语，素在日语里引申出了根本，源头以及不可再分割的意思，这一点古汉语里是没有的。因此诞生出了一大批和制词汇，比如元素，素材，要素等等。而 Prime Number 正好符合这个特性，叫素数再合适不过了。现代汉语由于引入了上面这些和制词汇，所以素也开始有了上述意思。至于港台地区保留了这个叫法也是因为延袭了民国时期的翻译习惯，没有做变更而已。</p><blockquote><p><em>《为什么叫素数》 来源：Spenser Sheng<br>链接：<a href="https://www.zhihu.com/question/22456389/answer/967574484">https://www.zhihu.com/question/22456389/answer/967574484</a><br>至此，质数这个名词就在中国成了官方认可的科学术语，并一直没用至今。但是，素数这个说法并没有因此退出历史舞台。同时代的秀多著作，还是用了这个名词，比如华罗庚先生于 1940 年出版的《堆垒素数论》等。这直接影响了后来更多数学家在著书立说时没用素数这个名词（可能因为要考虑与他人表述的统一性），如陈景润研究“哥德巴赫猜想”也是讲素数。……在中小学教材上，目前是统一使用质数这个名词，但是标明了“质数，又叫素数”《梳理源流，叩问本质——对质数、合数名词的考证与思考》顾志能 <a href="https://www.doc88.com/p-1478574668277.html">https://www.doc88.com/p-1478574668277.html</a></em></p></blockquote><hr><p>如何计算 N 以内的素数，或者判断 p 为素数，在编程领域是孪生的两个问题，也是很多编程语言的入门题目。这个题目优点在于有相当多的解法和优化空间，尤其适合用来练习算法和程序优化。这里我们就来逐步优化一个素数计算程序。</p><h4 id="基础实现"><a href="#基础实现" class="headerlink" title="基础实现"></a>基础实现</h4><p>我们从最简单的开始，先写一个函数 isPrime(n) 判断 n 是否为素数，这个判断函数严格按素数的定义实现：</p><blockquote><p><strong>除了 1 和 n 之外，没有其他整数能整除 n</strong></p></blockquote><p>也就是说，将 2 ~ n-1 之间的每个整数都试一遍，看看是否能整除 n。再用 isPrime(n) 逐个找出 &lt; N 的所有素数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断 n 是否为素数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 找出 &lt;N 的所有素数</span></span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i)) &#123;</span><br><span class="line">            prime.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcPrimes</span>(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></span><br></pre></td></tr></table></figure><blockquote><p><em>※ 本文演示代码为 JavaScript，方便在浏览器控制台内测试。但考虑到与正文内容保持一致，并未使用 JavaScript 内置的 .map(), .forEach(), .filter() 等遍历函数，而只用普通的 for loop if else 等代码。</em></p></blockquote><h4 id="简单优化"><a href="#简单优化" class="headerlink" title="简单优化"></a>简单优化</h4><p>显然上面的代码是有很多无效的计算的，一些简单的数学知识就可以大幅地优化计算效率：</p><ol><li>所有的偶数都不是素数，除了 2。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [<span class="number">2</span>]; <span class="comment">// for 循环从 3 开始，因此直接把特例 2 加入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i = i + <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 从 i++ 优化为 i=i+2</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i)) &#123;</span><br><span class="line">            prime.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>同上，所有 3 的倍数都不是素数，除了 3。因此，我们可以只检查 6k ± 1 的数。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [<span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">6</span>; i &lt;= n; i = i + <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算 6k</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i - <span class="number">1</span>)) &#123;</span><br><span class="line">            prime.<span class="title function_">push</span>(i - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="comment">// 判断 6k-1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i + <span class="number">1</span>)) &#123;</span><br><span class="line">            prime.<span class="title function_">push</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="comment">// 判断 6k+1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>※ 理论上我们可以继续讨论 5 的倍数，但这会使 for 循环需要处理 30k ± a，且 a 有 1,7,13 等多个值。代码变得复杂，而优化效果一般。过于复杂的代码会让你不幸福。</em></p></blockquote><ol start="3"><li>判断素数时，只需要检查到 sqrt(n) 即可。如果 n 有一个大于 sqrt(n) 的因子，必然对应一个小于 sqrt(n) 的因子，则之前的循环中已经判断过了。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 从 i &lt; n 优化为 i*i &lt;= n</span></span><br><span class="line">        <span class="keyword">if</span> (n % i === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更多优化"><a href="#更多优化" class="headerlink" title="更多优化"></a>更多优化</h4><p>进一步思考 isPrime 函数，我们发现，不必让所有小于 sqrt(n) 的数都试一遍，只需要用之前已经计算出来的素数尝试即可。但我们需要整体调整代码，使 isPrime() 函数可以调用 primes 数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [<span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isPrime</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; primes[i] ** <span class="number">2</span> &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 在 isPrime 函数中可以直接使用 primes 数组</span></span><br><span class="line">            <span class="keyword">if</span> (n % primes[i] === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">6</span>; i &lt;= n; i = i + <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i - <span class="number">1</span>)) &#123;</span><br><span class="line">            prime.<span class="title function_">push</span>(i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isPrime</span>(i + <span class="number">1</span>)) &#123;</span><br><span class="line">            prime.<span class="title function_">push</span>(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcPrimes</span>(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></span><br></pre></td></tr></table></figure><h4 id="筛法"><a href="#筛法" class="headerlink" title="筛法"></a>筛法</h4><p>以上的方法都是用较小的数字去尝试整除 N 以判断 N 是否为素数，这种方法称为试除法。从直观考虑，每个 N 都会被 2,3,5 ... 等数字都除一遍，比如 49 和 77 都会在 2, 3, 5 上各浪费三次计算。如果可以绕过无效除法，只用 7 去尝试 49，而 2,3,5 则不去浪费时间，耗时会大幅会降低。事实上这种方法是存在的，并且非常简单，称为『筛法』。</p><p>简单到解释起来只需要两句话：</p><ul><li>从 2 开始，将所有 2 的倍数都划掉；从 3 开始，将所有 3 的倍数都划掉；从 5 开始，将所有 5 的倍数都划掉；</li><li>以此类推。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line">    <span class="keyword">let</span> numboard = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numboard[i]) &#123;</span><br><span class="line">            primes.<span class="title function_">push</span>(i); <span class="comment">// 将素数加入 primes 数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = i * <span class="number">2</span>; j &lt; n; j += i) &#123;</span><br><span class="line">                <span class="comment">// 将 i 的倍数都划掉</span></span><br><span class="line">                numboard[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcPrimes</span>(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></span><br></pre></td></tr></table></figure><p>这个筛法也被称为埃拉托斯特尼筛法，是为了纪念古希腊数学家埃拉托斯特尼而命名的。这个方法看似很简单，实际也确实很简单，是一种朴素的空间换时间方案。算法改除法为乘法，同时避免互质两数相遇，避免了很多无效运算。虽然当 N 非常大时，numboard 数组会占用很多内存，但时间优势更为明显。</p><blockquote><p><em>※ 由于这个方法如此简单，普通人也能想到，不值得特地冠名。我猜测这个名字只是为了纪念历史名人，不能说明是他最早发明了这个方法。</em></p></blockquote><p>同样，上述代码也有一些优化空间，比如：</p><ul><li>划掉倍数时，可以从 j &#x3D; i*i 开始，因为 2i, 3i ... (i-1)i 在对应的 2, 3 ... i-1(或其因数)那一轮时已经被划掉了。</li><li>当划到 i &gt; sqrt(N) 时，则剩余未标记数也都是素数。假设有任意合数 m 满足 sqrt(N) &lt; m &lt; N，则 m 的素因数 p1,p2 ... 中最小的一个 p 也必然小于 sqrt(N)。而我们已经找到所有小时 sqrt(N) 的素数，并划掉其倍数了，所以找到 p 时必定已经划掉 m。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line">    <span class="keyword">let</span> numboard = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">let</span> sqrt_n = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numboard[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; sqrt_n) <span class="keyword">break</span>; <span class="comment">// 根据上文证明，剩余未标记数也都是素数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = i * i; j &lt; n; j += i) &#123;</span><br><span class="line">                <span class="comment">// j = i * 2 -&gt; j = i * i</span></span><br><span class="line">                numboard[j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numboard[j]) &#123;</span><br><span class="line">            primes.<span class="title function_">push</span>(j);</span><br><span class="line">        &#125; <span class="comment">// 清点未标记数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcPrimes</span>(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></span><br></pre></td></tr></table></figure><p>在算法进入筛法层次后，isPrime() 函数与 calcPrimes() 函数的功能区别也就不再明显。为了判断 N 是否为素数，需要至少计算到 sqrt(N) 的素数，而上文又证明剩余的未标记数也都是素数。差别只是最后判断一下 N 是否在 primes 数组中而已。</p><p>另外，在埃氏筛法中，6k ± 1 等手段不再有优化作用。构造一个『只有奇数的筛盘』是可以的，但后续的划除操作需要大量的脚标奇偶运算，反而会增加计算量。</p><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>在埃氏筛法中，内存占用是一个问题，尤其在筛法本身就是为了计算大 N 而生的。在实际应用中，有时也需要在有限的内存空间内尽量优化。注意到 numboard 数组只是用来标记是否为素数，只需要 0,1 两个状态，因此可以用位运算来减少内存占用。这使得内存的占用降为原来的 1&#x2F;8。但此时算法的实现与编程语言也开始耦合，不是每种编程语言都支持直接的位运算，例如 JavaScript 的位运算就只是某种『模拟』，效率并不高。Javascript 也不支持直接修改某个 bit 位，而要经过多次字节操作来实现。尽管如此，我们仍可以编写一个 setBitFalse() 函数来模拟这个操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setBitFalse</span>(<span class="params">arr, i</span>) &#123;</span><br><span class="line">    arr[i &gt;&gt; <span class="number">5</span>] &amp;= ~(<span class="number">1</span> &lt;&lt; (i &amp; <span class="number">31</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><ul><li>JavaScript 里数值默认 32 位，通过 i &gt;&gt; 5 相当于 i&#x2F;32 取整，可以得到对应的数组下标，即具体操作哪个元素。</li><li>i &amp; 31 将 i 与 31 (00001111) 进行按位与操作，相当于对 32 取余，得到具体操作该元素的第几个 bit 位。</li><li>1 &lt;&lt; (i &amp; 31) 将 1 左移 i &amp; 31 位，得到一个只有第 i &amp; 31 位为 1 的数，即只有指定 bit 位是 1 其它都是 0 的掩码。</li><li>~( ... ) 按位取反以后就得到了 1111....0...111 的反掩码，只有指定 bit 位为 0。</li><li>&amp;&#x3D; 是按位与且赋值，将数组指定元素与反掩码进行按位与运算，其它位与 1 后值不变，指定 bit 位则变为 0。目标达成。</li></ul><p>然后，我们需要写一个 isBitTrue() 函数来判断某个位是否为 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isBitTrue</span>(<span class="params">arr, i</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (arr[i &gt;&gt; <span class="number">5</span>] &amp; (<span class="number">1</span> &lt;&lt; (i &amp; <span class="number">31</span>))) !== <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似地，函数计算数组下标和 bit 位置，生成一个只有指定 bit 位是 1 的掩码，将其与数组元素进行按位与操作。因为按位与操作遇 0 必 0，所以其它位都会被掩码数值置为 0。如果结果不为 0，则说明数组元素与掩码在该 bit 位上都是 1。</p><p>最后，我们还需要写一个 bitsToNums() 函数，将位运算后的结果数组转换为素数数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bitsToNums</span>(<span class="params">arr,n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">                primes.<span class="title function_">push</span>(i * <span class="number">32</span> + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> real_primes = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        real_primes.<span class="title function_">push</span>(primes[j])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 因为是字节位长的整倍数，位运算可能会多一些数字，因此要二次筛选一下</span></span><br><span class="line">    <span class="keyword">let</span> real_primes = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (primes[j] &lt;= n) real_primes.<span class="title function_">push</span>(primes[j]) <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> real_primes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将几个函数代入原程序中的对应位置，我们可以得到一个位运算版本的埃拉托斯特尼筛选算法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> bitboard = <span class="keyword">new</span> <span class="title class_">Array</span>((n &gt;&gt; <span class="number">5</span>) + <span class="number">1</span>).<span class="title function_">fill</span>(-<span class="number">1</span>); <span class="comment">// 位运算数组</span></span><br><span class="line">    <span class="keyword">let</span> sqrt_n = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isBitTrue</span>(bitboard, i)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; sqrt_n) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = i * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                <span class="title function_">setBitFalse</span>(bitboard, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">bitsToNums</span>(bitboard);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcPrimes</span>(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></span><br></pre></td></tr></table></figure><p>可以看到，位运算版本的代码更为复杂，原本只是根据下标取数组元素并判断 true&#x2F;false 的操作，现在需要生成掩码，计算偏移量，转换位数等多次计算。只有在 N 极大，以至于必须减少内存占用的情况下，才需要使用位运算。在一般情况下并不值得作此妥协。</p><p>同时，对于 JavaScript &#x2F; Python &#x2F; java 等高级语言，位运算的效率并不高。即使实际情况确实拮据，也必须先考虑更换编程语言。比如在 C++ 中，<a href="https://zh.cppreference.com/w/cpp/utility/bitset">std::bitset</a> 这种数据结构，就特别适合于埃氏筛法结合位运算计算素数表。</p><h4 id="分段筛法"><a href="#分段筛法" class="headerlink" title="分段筛法"></a>分段筛法</h4><p>说到内存不足，很容易就能想到另一种解决方案：分段筛法。在筛选过程中，我们把素数放进了单独的 primes 数组，而 numboard 数组则只是用来筛除合数。当 primes 找到大小为 p 的素数，就意味着 p*p 之前的 numboard 数据已经没有用了，如果我们能把这部分内存释放掉，就能大幅减少内存占用。</p><p>因此从逻辑上讲，当求 N 以内的素数时，我们只需要保留 sqrt(N) 以内的素数，并将整个 N 范围划为若干块，对每一块使用 primes 数组进行筛选。如果不考虑分块本身的内存分配回收时间，单只考虑数值与操作量的话，分段筛法的时间复杂度与原始筛法是相同的。对于每一个被筛选的元素，都会被其每一个独特的素因数筛选一次，无论是在全局 numboard 中，还是在局部 numboard_i 中，都一样。</p><p>基于前文的铺垫，似乎分块大小设置为 sqrt(N) 是直觉上合理的方案。但实践中，分块大小更多与内存大小有关。比如 nodejs 的默认内存上限为 2GB，尽管可以通过 <code>--max-old-space-size</code> 参数调整，但在个人电脑环境下再提升其实也并不会有什么质变。只要确保 primes 数组空间的前提下仍有足够的内存，就是合理的块大小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript 数值默认 4Byte，1GB 内存可以存储 2^28 个数值。约 2.68 * 10^8 个。</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BOARD_SIZE</span> = <span class="number">10</span>; <span class="comment">// 分块大小，基于演示目的设置为 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cleanBoard</span>(<span class="params">s, e</span>) &#123;</span><br><span class="line">        <span class="comment">// 分块筛选区间 [s, e] 素数的子函数</span></span><br><span class="line">        <span class="keyword">let</span> board = <span class="keyword">new</span> <span class="title class_">Array</span>(e - s + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">let</span> sqrt_e = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; primes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 用先前得到的素数筛选本区间</span></span><br><span class="line">            <span class="keyword">let</span> p = primes[i];</span><br><span class="line">            <span class="keyword">let</span> start = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(s / p) * p;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = start; j &lt;= e; j += p) &#123;</span><br><span class="line">                board[j - s] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; board.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 本区间埃筛</span></span><br><span class="line">            <span class="keyword">if</span> (board[i]) &#123;</span><br><span class="line">                <span class="keyword">let</span> p = i + s;</span><br><span class="line">                <span class="keyword">if</span> (p &gt; sqrt_e) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = p * p; j &lt;= e; j += p) &#123;</span><br><span class="line">                    board[j - s] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; board.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 清点本区间的素数</span></span><br><span class="line">            <span class="keyword">if</span> (board[i]) &#123;</span><br><span class="line">                primes.<span class="title function_">push</span>(i + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">cleanBoard</span>(<span class="number">2</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable constant_">BOARD_SIZE</span> - <span class="number">1</span>, n)); <span class="comment">// 第一个区间特殊处理，去掉 0 和 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="title class_">Math</span>.<span class="title function_">ceil</span>(n / <span class="variable constant_">BOARD_SIZE</span>); i++) &#123;</span><br><span class="line">        <span class="title function_">cleanBoard</span>(i * <span class="variable constant_">BOARD_SIZE</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>((i + <span class="number">1</span>) * <span class="variable constant_">BOARD_SIZE</span> - <span class="number">1</span>, n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcPrimes</span>(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></span><br></pre></td></tr></table></figure><h4 id="欧拉筛法"><a href="#欧拉筛法" class="headerlink" title="欧拉筛法"></a>欧拉筛法</h4><p>在埃氏筛法中，我们注意到，数字 6 会被 2, 3 划掉两次，30 会被 2, 3, 5 划掉三次。所有合数都会被其不同的素因数重复操作若干次，浪费还是有不少。但我们并不能去判断筛盘上某个具体的数是否已经划掉，因为『读取与判断』的时间本身可能比直接划掉时间还长。</p><p>进一步用力注意到，筛法的本质是从『验证素数』变成了『排除合数』，而且是有规律的排除合数。考察一个合数 6 &#x3D; 2 x 3，我们希望在算法中，2 x 3 只发生一次，而不是在 2 与 3 的循环中各发生一次。对于 12 也一样，尽管它有 2 x 2 x 3, 4 x 3, 6 x 2 这三种分解方式，但我们希望只有其中一种发生，其它的被跳过。</p><p>仿佛一头雾水但哪里又有一些灵感，这好像是可能的，只要足够聪明合理地安排合数生成，好像可以做到？</p><p>事实确实如此。欧拉筛法就是为了解决这个问题而生的。具体操作是这样的：</p><ol><li>有一个自增的数字 i，从 2 开始。</li><li>有一个数组 primes，存放已经找到的素数。</li><li>如果筛板上 i 还没被划掉，则 i 是素数，将其加入 primes 数组。</li><li>用每一个 i 乘以当前所有 primes 中的素数，得到的数都是合数，在筛板将它们标记为 false 划掉。</li><li>如果 i 是 primes 中某个素数的倍数，那么 i * p 这个数会被标记 false，但后续直接跳过，进到 i+1 轮。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calcPrimes</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = [];</span><br><span class="line">    <span class="keyword">let</span> eularboard = <span class="keyword">new</span> <span class="title class_">Array</span>(n + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eularboard[i]) &#123;</span><br><span class="line">            primes.<span class="title function_">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; primes.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * primes[j] &gt; n) <span class="keyword">break</span>; <span class="comment">// 上限判断</span></span><br><span class="line">            eularboard[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] === <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 跳过本轮后续筛选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> primes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcPrimes</span>(<span class="number">100</span>));</span><br><span class="line"><span class="comment">// [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 ]</span></span><br></pre></td></tr></table></figure><p>在欧拉筛中，我们通过 i * primes[j] 的方式来筛除合数，且当 i 本身为 primes[j] 的倍数时，跳过 i 与后续素数的计算环节。例如：</p><ul><li>当 i &#x3D; 4 时，本应划掉 4 * 2 与 4 * 3，但可以跳过 4 * 3，因为它会被后续的 6 * 2 划掉。</li><li>当 i &#x3D; 35 时，会先划掉 35 * 5，而 35 * 7 会被跳过，因为它将在 i &#x3D; 49 时被 5 划掉。</li></ul><p>一般来说，如果 i &#x3D; k * primes[j]，则接下来要划掉的 <code>s = i * primes[j+1] = k * primes[j] * primes[j+1]</code> 会在 <code>i&#39; = k * primes[j+1]</code> 轮次时会被 <code>primes[j]</code> 划掉（因为 primes[j] 是 i&#39; 的最小素因子），所以此时可以先跳过。</p><p>可以看到，在欧拉筛法中，由于 primes 是从小到大排列的，因此每个合数只在其最小素因数 m 对应的 i &#x3D; n &#x2F; m 轮次时，才会被划掉。</p><p>在这个算法中，合数的分解是唯一且有序的，因此欧拉筛与埃筛内存占用一样，但算法复杂度优化到了大约 O(n)。——严格来说，因为一些必须的额外判断，实际是 $O(nlog_2log_2n)$。</p><blockquote><p><em>※ 数学先师的伟业至今仍被人传颂，有一个算法以他的名字命名。纵然身为一个 18 世纪数学家，那个时代还远未出现计算机。</em></p></blockquote><hr><h4 id="素数的分布"><a href="#素数的分布" class="headerlink" title="素数的分布"></a>素数的分布</h4><p>有了高效的素数筛选算法，我们可以开始搜索大范围的素数了。计算 1 亿以内的素数，并每 10 万分为一组，统计每组的数量。可以看到，虽然有波动，但整体是逐渐减少的，并且这个图好像有点眼熟？</p><p><img src="/../attach/2024/04/primes_count_1e8.png" alt="素数频率" loading="lazy"></p><p>事实上，确实有一个 <a href="https://baike.baidu.com/item/%E7%B4%A0%E6%95%B0%E5%AE%9A%E7%90%86/1972457">素数渐近分布定理</a>，大致描述了素数的分布规律：</p><blockquote><p><strong>设不大于 n 的所有素数的个数为 π(n)，则 π(n) ≈ n &#x2F; ln(n)</strong></p></blockquote><p>具体举例来说，当 n &#x3D; 1 亿时，使用前文的程序计算出素数具体有 5761455 个，而 $n&#x2F;ln(n)\approx 5428681$，两者比例为 1.061，较为近似。而当 n→∞ 时，值趋近于 1。</p><p>另外也可以得到一个推论，在 n 附近随机取一个数字，它是素数的概率是 $P(n)\approx 1&#x2F;ln(n)$。函数下降不算快，就算 n &#x3D; 1 亿，概率也有 1&#x2F;18.42，5.43%。</p><p>这个定理已经被证明，但这个值本身只是一个渐近值。也就是说，虽然 $\lim\limits_{x \rightarrow 0}\frac{\pi(n)}{ n &#x2F; ln(n)} &#x3D; 1$，但 $\lim\limits_{x \rightarrow 0} [\pi(n) - n &#x2F; ln(n)]$ 却是越来越大的。从函数图像上而言，两者只是越来越接近于平行，但距离却越来越远。</p><p>素数的分布规律是数论的一个重要研究方向。后来数学家又提出了几个更精确的估算公式，这一方向的顶点便是著名的黎曼猜想。</p><h4 id="梅森素数与-Lucas-Lehmer-检验。"><a href="#梅森素数与-Lucas-Lehmer-检验。" class="headerlink" title="梅森素数与 Lucas-Lehmer 检验。"></a>梅森素数与 Lucas-Lehmer 检验。</h4><p>在了解素数的大致分布，并回顾欧拉筛法以后，我们发现即使是 O(n) 的算法也仍然有很大的局限性。内存限制是最初的现实问题，但也只是所有问题中最简单的一个，更大的限制仍然是来自于算法本身。我们要筛到至少 sqrt(N)，才能得到 N 是否为素数的结果。在 N 非常非常大时，O(n) 的算法仍然太慢了。</p><p>仔细思考发现，这是因为筛法天然地要求算法结果的素数是连续的，如果跳过某个数，那么后续的合数也可能被认为是素数，整体就会崩盘。那么是否存在『跳过一部分数，快速往更大的素数 N 前进』，以及在不知道小于 sqrt(N) 全部素数的情况下，判断 N 是否为素数的算法呢？</p><p>两者都是存在的，并且有多种方法。典型例子是梅森素数和配套的 Lucas-Lehmer 算法。</p><p>梅森素数是形如 $2^p - 1$ 的素数，并且简单可以证明，当 $2^p - 1$为素数时，p 也是素数。</p><blockquote><p>当 p 是合数时，令 p &#x3D; ab，有：<br>$2^p-1&#x3D; (2^a)^b - 1 \overset{ x&#x3D;2^a}{&#x3D;\!&#x3D;\!&#x3D;} (x - 1)\cdot[x^{b-1}+x^{b-2}+\cdots+x+1]$ 为合数。</p></blockquote><p>尽管反过来并不一定成立，当 p 是素数时，$2^p - 1$ 仍可能是合数，比如 2^11 - 1 &#x3D; 2047 &#x3D; 23 x 89。但即使如此，梅森素数依然有很多优点，比如：</p><ul><li>比普通的序列增长得更快，可以跳过很多中间的数，尽快找到更大的素数。</li><li>$2^p - 1$ 中包含素数的比例比全体自然中要高，因此更容易找到素数。</li><li>否定性验证很容易，只需要验证 p 是否为素数。正向验证难度也比一般的低。</li></ul><p>Lucas-Lehmer 算法是验证梅森素数的一种方法。它构造了一个递推公式：</p><p>\begin{equation*}<br>s_i&#x3D;\begin{cases} 4, &amp; i&#x3D;0 \\ (s_{i-1}^2-2) \mod (2^p-1), &amp; i&gt;0 \end{cases}<br>\end{equation*}</p><p>则当 $s_{p-2} \equiv 0 \pmod{2^p-1}$ 时，$2^p - 1$ 为素数。其算法复杂度为 $O((log\underset{2}{}n)^2)$。</p><blockquote><p><em>※ 在大数环境下的计算需要编程语言和专门的数学包支持，代码就不放了</em></p></blockquote><p>由于梅森素数拥有的诸多优点，目前已知的最大素数都是梅森素数，也有专门的 <a href="https://www.mersenne.org/">互联网协作项目 GIMPS</a> 来众算更大的梅森素数。该项目前段时间正好确认了 M(57885161) 是一个新发现的素数。</p><h4 id="质性检验"><a href="#质性检验" class="headerlink" title="质性检验"></a>质性检验</h4><p>从梅森素数我们得到启发，在合理添加一些额外的限制条件后，素数的出现概率会提高，检验手段也可以针对性设计而变得简单，这对大素数的搜索非常有帮助。</p><p>在这个层次上，calcPrimes() 基本就不再是人们的目标，而 isPrime() 则不断地发展，成为专门的『质性测试』算法。这些算法的目标是尽可能快地判断一个数是否为素数，而不是找到所有素数。在这个领域，有很多经典的算法，比如：</p><p><strong>Lucas-Lehmer 检验</strong></p><p>上文提到的梅森素数检验算法。仅适用于 $2^p - 1$ 形式的素数。</p><p><strong>Pépin 检验</strong></p><p>验证费马数 $2^{2^n} + 1$ 是否为素数的算法。但由于费马数目前只发现 n&#x3D;0,1,2,3,4 五个，后面都是合数，甚至有猜想认为 n &gt; 4 时皆为合数。因此 Pépin 检验的应用范围有限。而欧拉和卢卡斯接力证明了费马数的素因数皆可表达为 $k^{2n+2} + 1$，为具体的因数分解也提供了不小的方便。</p><blockquote><p><em>※ 感觉 Pépin 被费马坑了。</em></p></blockquote><p><strong>Miller-Rabin 素数测试算法</strong></p><p>一个随机性的否定性算法。当测试结果为 false 则一定是合数，测试结果为 true 可能为素数。算法基于费马小定理和二次探测定理，在进行 n 次测试后，错误概率为 $1&#x2F;4^n$。</p><p><strong>费马小定理</strong>：如果 p 是一个素数，而 a 是任意不是 p 的倍数的整数，则 $a^{p-1} ≡ 1 (mod\ p)$。这意味着对于任意素数 p，选择一个不是 p 的倍数的整数 a，计算 $a^{p-1}\ \% \ p$，如果不等于 1，则 p 一定不是素数；等于 1，则 p 可能是素数 。<br><strong>二次探测定理</strong>：假设 p 是一个素数，我们可以将 p-1 写为 $2^s * d$ 的形式，其中 d 是奇数。则对于任意整数 a，如果存在整数 x 满足：</p><blockquote><ol><li>$a^d ≡ 1 (mod\ p)$</li><li>存在一个 i 满足 0 ≤ i &lt; s，使得 $a^{2^i * d} ≡ -1 (mod\ p)$</li></ol></blockquote><p>以上两个条件之一，则 a 是一个模 p 的非平凡平方根，即 $a^2 ≡ x (mod\ p)$：</p><p>假设我们要测试数字 p &#x3D; 17 是否为素数。</p><ol><li><p>选择不是 p 的倍数的整数 a，假设选择 a &#x3D; 3。计算 $a^{p-1}\ \%\ p &#x3D; 3^{16} \% 17 &#x3D; 1$ 结果等于 1。根据费马小定理，17 可能是素数。</p></li><li><p>根据二次探测定理，当 p &#x3D; 17，有 $p-1&#x3D;16&#x3D;2^4*1$，因此 s &#x3D; 4，d &#x3D; 1。我们需验证任意整数 a，可以满足以下两个条件之一：</p><ul><li>$a^d &#x3D; a ≡ 1 (mod 17)$</li><li>存在一个 i 满足 0 ≤ i &lt; 4，使得 $a^{2^i} ≡ -1 (mod 17)$</li></ul><p> 假若仍然选择 a&#x3D;3，则 $3 \% 17 &#x3D;3 \neq 1$，不满足条件一，继续检验条件二：</p><ul><li>$i&#x3D;0, 3^{2^0}\ \% 17 &#x3D; 3$</li><li>$i&#x3D;1, 3^{2^1}\ \% 17 &#x3D; 9$</li><li>$i&#x3D;2, 3^{2^2}\ \% 17 &#x3D; 13$</li><li>$i&#x3D;3, 3^{2^3}\ \% 17 &#x3D; 16 &#x3D; -1$，满足条件。因此 17 可能是素数。</li></ul></li></ol><p>继续类似地进行多轮测试，如果任意一轮验证失败，则 p 一定是合数，反之随着验证轮次增加，p 为素数的可能性便越来越大。</p><p><strong>AKS 类质性测试</strong></p><p>一个确定性的质性测试算法，复杂度为 $O(log^{6+\epsilon}n)$。AKS 是第一个被发表的一般的、多项式的、确定性的和无依赖的素数判定算法。算法基于一个简单定理：</p><blockquote><p>当 $(x+a)^n\equiv(x^n+a)(\text{mod}\ n)$ 时，n 为素数。</p></blockquote><p>后续 ASK 被不同科学家多次改进，因此有多个版本，统称为 AKS 类算法。AKS 类算法也是目前效率最高的确定性算法，只要算法给出 true 的结果就一定是素数。</p><blockquote><p><em>※ ChatGPT 与 Copilot 对本文亦有贡献。</em></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;质数，也叫素数，是对 Prime Number 的不同翻译。素数的叫法大概率来自日语，素在日语里引申出了根本，源头以及不可再分割的意思，这一点古汉语里是没有的。因此诞生出了一大批和制词汇，比如元素，素材，要素等等。而 Prime Number 正好符合这个特性，叫素数再合适</summary>
      
    
    
    
    <category term="硬用数学" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E7%94%A8%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="素数" scheme="https://www.kaikai.men/tags/%E7%B4%A0%E6%95%B0/"/>
    
    <category term="编程" scheme="https://www.kaikai.men/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="程序优化" scheme="https://www.kaikai.men/tags/%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>几种奖池抽取期望计算</title>
    <link href="https://www.kaikai.men/deck-drawing-expectations/"/>
    <id>https://www.kaikai.men/deck-drawing-expectations/</id>
    <published>2024-02-23T11:31:22.000Z</published>
    <updated>2025-08-30T14:15:58.638Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-不放回抽取"><a href="#1-不放回抽取" class="headerlink" title="1. 不放回抽取"></a>1. 不放回抽取</h4><p>从一套充分洗匀的扑克中不放回地一直抽，直到抽到两张大小王都抽到，一共抽了多少张的期望值？</p><p>先说结论：</p><blockquote><p>一般地，从 $n$ 张牌中不放回地抽取特定 $k$ 张，期望抽取次数是 $Exp &#x3D; k \cdot (n+1)\ &#x2F;\ (k+1)$</p></blockquote><p>然后说证明：</p><p>首先，在充分洗匀的情况下，从牌堆顶部抽取和从牌堆中间任意位置抽取是等价的，所以可以假设牌堆是从左到右的展开一列，抽取动作等效于从左开始逐张提取卡片，直到所有目标牌都抽取到手里。想像 k 张目标牌已经排成一列，其顺序无关紧要因为最终都会被清空。这 k 张牌相隔包括左右外侧共产生 k+1 个空隙：</p><p><img src="/../attach/2024/02/k+1.jpg" alt="k-divide" loading="lazy"></p><p>然后将 n-k 张非目标牌随机插入这 k+1 个空隙中，每个空隙插入的概率相等，所以期望张数是 $\frac{n-k}{k+1}$。</p><p>最后考察清点过程，显然最右侧外侧可以抛弃，所以需要抽取的期望张数是 $n - \frac{n-k}{k+1} &#x3D; \frac{k \times (n+1)}{k+1}$。得证。</p><p>这类抽奖励在各类游戏中都有，其特点是：</p><ul><li>奖池有限</li><li>不会抽到重复的奖品</li><li>通常玩家心仪的是奖池中的几个特定奖品，其它是无关紧要的</li></ul><p>有些游戏会添加『升星级』的设置，某个抽卡人物 A 多次抽到后，会升级为 A+，A++ 等。这种情况完全可以视为若干个独立的 A 在奖池中，需要全部抽齐，计算时调整 n 与 k 的值即可。</p><blockquote><p>—— 算下来『全部抽齐』确实是成本很高的目标。</p></blockquote><h4 id="2-放回抽取"><a href="#2-放回抽取" class="headerlink" title="2. 放回抽取"></a>2. 放回抽取</h4><blockquote><p>在数量为 n 的奖池中进行抽取，抽取结果是可重复的（抽完放回），抽完所有 n 件奖品的期望抽取次数是多少？</p></blockquote><p>$$Exp&#x3D; n \cdot (1 + 1&#x2F;2 + 1&#x2F;3 + \cdots + 1&#x2F;n)  &#x3D; n \cdot \sum _{i&#x3D;1}^n \frac{1}{i} &#x3D; n \cdot H_n $$</p><p>$H_n$ 就是调和级数。</p><p>证明，从后往前考察抽取过程：</p><ul><li>如果当前只剩最后一件奖品没抽到，则从 n 件奖品中抽取特定一件的几率是 1&#x2F;n，期望抽取次数是 n。</li><li>如果剩最后两件奖品没抽到，只要从 n 件奖励中抽到这两件的任意一件，就会进入上一条的『只剩一件』状态。抽到这两件奖励之一的几率是 2&#x2F;n，期望抽取次数是 n&#x2F;2。</li><li>每抽到一件新的就会进入下一个状态。而在任意某个状态时，当前对应的期望抽取次数是总数 &#x2F; 剩余新奖品数。</li><li>因此，总的期望抽取次数是所有状态的期望抽取次数之和。</li></ul><p>调和级数是发散的，可以用 Excel 等工具计算期望值，也可以用近似公式 $H_n \approx \ln n + C + 1&#x2F;2n$ 算。这里的 $C$ 就是欧拉常数，约为 0.5772156649。</p><p>进一步的，如果不需要抽完，而只是抽取其中的特定 k 件奖品，仍可以从最后一件倒数推算，其期望抽取次数是：</p><p>$$Exp &#x3D; \frac{n}{1} + \frac{n}{2} + \cdots + \frac{n}{k-1} + \frac{n}{k} &#x3D; n \cdot H_k$$</p><h4 id="3-放回抽取，不同概率"><a href="#3-放回抽取，不同概率" class="headerlink" title="3. 放回抽取，不同概率"></a>3. 放回抽取，不同概率</h4><p>在各类游戏中，奖励物品往往有不同的『品质』等级，以及不同的出现概率。可以简单理解为</p><blockquote><p>奖池分为 $m$ 个小奖池，每个小奖池进入概率分别为 $p_1, p_2, \cdots, p_m$，奖品数量分别为 $n_1, n_2, \cdots, n_m$。获得整个奖池全部奖励的期望抽取次数 $N$ 是多少？</p></blockquote><p>对于每个小奖池，期望抽取次数是 $n_i \cdot H_{n_i}$，再除以小奖池本身的概率 $p_i$，即得 $N_i&#x3D;n_i\cdot H_{n_i} \ &#x2F;\ p_i$。但对于整个奖池，总期望抽取次数 $N$ 不是所有小奖池的次数之和，而是它们之中的最大值。因为当有 $n_i &#x3D; p_i\cdot N$ 的抽取次数落到 $i$ 号小奖池时，也有对应的 $(1-p_i) N$ 溢出到其它小奖池。最大值保证溢出部分覆盖其它小奖池的期望抽取次数。随意举例如下：</p><table><thead><tr><th>品质</th><th>数量</th><th>概率</th><th>期望有效抽取次数</th><th>对应期望抽取总次数</th><th>溢出次数</th></tr></thead><tbody><tr><td>橙色传说</td><td>10</td><td>0.01</td><td>$10\cdot H_{10} \approx 29.29$</td><td>$2928.97$</td><td>$10\cdot H_{10} \ &#x2F;\ 0.01 \cdot 0.99 \approx  2899.68$</td></tr><tr><td>紫色史诗</td><td>20</td><td>0.09</td><td>$20\cdot H_{20} \approx 71.95$</td><td>$799.50$</td><td>$20\cdot H_{20} \ &#x2F;\ 0.09 \cdot 0.91 \approx  727.54$</td></tr><tr><td>蓝色稀有</td><td>50</td><td>0.3</td><td>$50\cdot H_{50} \approx 224.96$</td><td>$749.86$</td><td>$50\cdot H_{50} \ &#x2F;\ 0.3 \cdot 0.7 \approx 524.91 $</td></tr><tr><td>白色普通</td><td>200</td><td>0.6</td><td>$200\cdot H_{200} \approx 1175.6$</td><td>$1959.34$</td><td>$200\cdot H_{200} \ &#x2F;\ 0.6 \cdot 0.4 \approx 783.74$</td></tr></tbody></table><p>总抽取次数 $N$ 会以 $0.01:0.09:0.3:0.6$ 的比例分配到四种品质中。观察表格，橙色传说所需的抽取次数最多，且溢出部分按比例仍可以覆盖其它所有奖池的有效抽取次数，也就是说抽到 2929 次时，期望可以让全部 10 件橙色传说抽取到手里。此时溢出的 2899 次已经完全覆盖了其它三种品质的有效期望抽取次数。所以 $$Exp &#x3D; Max\left(n_i \cdot H_{n_i} \ &#x2F;\ p_i\right)$$</p><p>进一步考虑发现，只要每个小奖池的期望有效抽取次数和设定的小奖池进入概率比例不一致，则一定会有一个小奖池的期望抽取次数最大。如果正好一致，也意味着每个都是最大值。这个结论是普适的。</p><h4 id="4-放回抽取，反还比例"><a href="#4-放回抽取，反还比例" class="headerlink" title="4. 放回抽取，反还比例"></a>4. 放回抽取，反还比例</h4><p>在某些游戏中，抽取到重复奖品时，会通过『碎片』等给予一定的返还比例，若干个碎片可以合成需要的道具。先考虑单个奖池的情况：</p><blockquote><p>假设奖池中有 n 件奖品，抽取概率相同。抽到重复奖品时，返还比例是 r(r&lt;1)，那么抽取次数的期望值是多少？</p></blockquote><p>没有傻逼会去合成已经存在的道具，所以返还可以视为抽取了 r 个新道具。同时由于 r &lt;1，重复的价值仍是小于不重复的，因此在确保碎片可以合成奖池所有剩余奖品前，应当不合成任何奖励减少重复，使得整体收益最大化。再次从后往前考察抽取过程：</p><ul><li>如果只差最后一件奖品没抽到，那么我仍需要从 n 件奖励中抽取，抽到这件奖励的几率是 1&#x2F;n，期望抽取次数是 n。其中 1 次是有效抽取，n-1 次是重复抽取，返还 r(n-1) 碎片。</li><li>如果剩最后两件奖品没抽到，只要从 n 件奖励中抽到这两件的任意一件，就会进入『最后一件』状态，抽到这两件奖励的几率是 2&#x2F;n，期望抽取次数是 n&#x2F;2。其中 1 次是有效抽取，n&#x2F;2-1 次是重复抽取，返还 r(n&#x2F;2-1) 碎片。</li><li>以此类推，在 n 奖池中抽取到 t 个奖品时，对应的总抽取碎片为：</li></ul><p>\begin{align*}<br>R(t) &amp;&#x3D; r\cdot(n-1) + r\cdot(\frac{n}{2}-1) + \cdots + r\cdot(\frac{n}{t-1}-1) +r\cdot(\frac{n}{t}-1) \\<br>&amp;&#x3D; r \cdot \sum_{i&#x3D;1}^t \left( \frac{n}{i} - 1 \right) \\<br>&amp;&#x3D; r \cdot \left( nH_t - t \right) \\<br>\end{align*}</p><p>在某个节点 $t&#x3D;k$ 时，获得的碎片就已经足够合成了所有剩余的奖品，即 $R(k) \geq n-k$。因为 $R$ 单调递增，$k$ 必然存在，此时对应的期望抽取次数即是 $n \cdot H_k$。$k$ 的通式求解超出了我的能力，但使用 Excel 或编程求解在有限的 n 范围内仍是方便的。</p><h4 id="5-放回抽取，反还比例，多个奖池"><a href="#5-放回抽取，反还比例，多个奖池" class="headerlink" title="5. 放回抽取，反还比例，多个奖池"></a>5. 放回抽取，反还比例，多个奖池</h4><blockquote><p>假设还是 $m$ 个分概率的小奖池，但返还的碎片是通用的，那么全部奖品的总抽取次数期望值是多少？</p></blockquote><p>这里需要再添加一个参数，每个奖池的相对价格是不同的，设为 $c_i$。在 r 相同同，高价值奖池重复物品返回的碎片绝对数量更多。需要通过调整各奖池的 $c_i \cdot R(t)$，使各奖池的每抽价值归一化，后续就化为多个小奖池取最大值的已知问题了。即：</p><ul><li>设总抽取次数为 $N$，则对于每个小奖池会分得 $k_i &#x3D; N \cdot p_i$ 次。</li><li>各小奖池 $i$ 各抽取 $k_i$ 次，得到 $t_i$ 个奖品，满足 $n_i \cdot H_{t_i} \leq k_i$，虽然计算期望可以取等号，但调和级数无法依此简化计算。</li><li>此时产生的碎片为 $r\cdot(k_i-t_i)$ 即 $R(t_i)$，剩余未抽取的奖品数量为 $n_i - t_i$。</li><li>当总碎片数量大于等于剩余奖品所须数量时，N 得解。整理得到：</li></ul><p>\begin{array}{l}<br>\left\{<br>\begin{aligned}<br>&amp; k_i &#x3D;N \times p_i, \\<br>&amp;n_i \cdot H_{t_i} \leq k_i, \\<br>&amp;\sum_{i&#x3D;1}^m [R(t_i) \cdot c_i] \geq \sum_{i&#x3D;1}^m [(n_i-t_i)\cdot c_i] \\<br>\end{aligned}<br>\right. \\<br>\\<br>\Rightarrow \large{ N &#x3D; Max\left( k_i &#x2F; p_i \right) }<br>\end{array}</p><ul><li>$c_i$ 为不同奖池间的价值权重，与碎片兑换各级别奖品的相对数量有关，与 $r$ 无关。</li><li>$p_i c_i$ 为定义数据，调和级数只有离散解，每个小奖池计算的全局期望 $N_i$ 仍可能不一致。</li></ul><h4 id="6-概率提升"><a href="#6-概率提升" class="headerlink" title="6. 概率提升"></a>6. 概率提升</h4><blockquote><p>在某些游戏中，当抽取未能获得奖励时，会提升下一次抽取的概率，直到抽取到奖励后重置概率。则真实概率是多少？</p></blockquote><p>先从一个简单例子入手：</p><blockquote><p>事件 A 的发生概率是 1&#x2F;2，事件 B 发生概率为另 1&#x2F;2，当 A 未发生时，下一次发生事件 A 的概率提到 100%。那么在多次重复中，A 事件的真实概率是多少？</p></blockquote><p>直觉可能会认为是 75%。但进一步思考发现，事件 B 的下一轮必定跟随事件 A，而事件 A 的下一轮 A 与 B 各有 50% 几率发生。将多轮过程展开后会发现这是 $A:BA&#x3D;1:1$ 的序列。因此单看事件 A 发生的真实概率为 2&#x2F;3。</p><p>推广到 A 事件 1&#x2F;3 的情况，可以得到：</p><table><thead><tr><th>组合</th><th>概率</th></tr></thead><tbody><tr><td>A</td><td>$1&#x2F;3$</td></tr><tr><td>BA</td><td>$2&#x2F;3 \times 2&#x2F;3 &#x3D; 4&#x2F;9$</td></tr><tr><td>BBA</td><td>$2&#x2F;3 \times 1&#x2F;3 \times 1 &#x3D; 2&#x2F;9$</td></tr></tbody></table><p>在足够长的序列中，三者以 $A:BA:BBA&#x3D;\frac{1}{3}:\frac{4}{9}: \frac{2}{9}$ 的比例出现，序列总长度为 $L &#x3D; \frac{1}{3}\cdot n + \frac{4}{9}\cdot 2n+ \frac{2}{9}\cdot 3n$，其中 A 在每个组合中都出现一次，因此 A 的真实概率是 $\frac{n}{L} &#x3D; \frac{9}{17}$。</p><p>由此观察到一般规律，对于初始概率为 $a$，提升步长为 $p$，达到 100% 时的步数为 $k$，即 $a+kp\geq 1 \Rightarrow k\geq(1-a)&#x2F;p$ 时，真实概率 $P(A)$ 是以下式子的解：</p><p>\begin{align*}<br>L &amp;&#x3D; p(A)+2\cdot p(BA)+3\cdot p(BBA)+ \cdots + k \cdot p(\underbrace{BBB \ldots B}_{k-1}A) + (k+1) \cdot p(\underbrace{BBB \ldots B}_{k}A) \\<br>&amp;&#x3D; a + 2(1-a)(a+p) + 3(1-a)^2(a+2p) + \cdots + k(1-a)^{k-1}(a+(k-1)p) +(k+1)(1-a)^k\cdot1 \\<br>&amp;&#x3D; \sum_{i&#x3D;1}^k \left[i\cdot(1-a)^{i-1}(a+(i-1)\cdot p) \right] + (k+1)(1-a)^k \cdot 1 \\<br>P(A) &amp;&#x3D; k&#x2F;L<br>\end{align*}</p><blockquote><p>这其实就是马尔克夫链与状态转移方程。</p></blockquote><p>因为 $k$ 是有限的，所以式子不涉及无穷级数，但是计算仍然不方便，需要借助工具。</p><p>在 $a &#x3D; p &#x3D; 1&#x2F;n$ 的特殊情况下，可以进一步简化为：</p><p>\begin{align*}<br>L &amp;&#x3D; \frac{1}{n} + \frac{n-1}{n}\cdot\frac{2}{n}\cdot2 + \frac{n-1}{n}\cdot\frac{n-2}{n}\cdot\frac{3}{n}\cdot3 + \cdots + \frac{n-1}{n}\cdot\frac{n-2}{n}\cdots\frac{1}{n}\cdot\frac{n}{n}\cdot n \\<br>&amp; &#x3D; \sum_{i&#x3D;1}^n \left[\frac{i^2}{n^i} \cdot \prod_{j&#x3D;1}^{i-1} (n-j) \right] \\<br>Q(n) &amp;&#x3D; 1&#x2F;L \\<br>\end{align*}</p><p>手动计算几个较小值：<br>\begin{align*}<br>Q(2) &amp;&#x3D; \frac{1}{ \frac{1}{2} + \frac{2^2}{2^2}(2-1) } &#x3D; \frac{2}{3} \\<br>Q(3) &amp;&#x3D; \frac{1}{ \frac{1}{3} + \frac{2^2}{3^2}(3-1) + \frac{3^2}{3^3}(3-1)(3-2) } &#x3D; \frac{9}{17} \approx 0.5294 \\<br>Q(4) &amp;&#x3D; \frac{1}{ \frac{1}{4} + \frac{2^2}{4^2}(4-1) + \frac{3^2}{4^3}(4-1)(4-2) + \frac{4^2}{4^4}(4-1)(4-2)(4-3) } &#x3D; 32&#x2F;71\approx 0.4507 \\<br>Q(5) &amp;&#x3D; \frac{1}{ \frac{1}{5} + \frac{2^2}{5^2}\cdot4 + \frac{3^2}{5^3}\cdot4\cdot3 + \frac{4^2}{5^4}\cdot4\cdot3\cdot2 + \frac{5^2}{5^5}\cdot4\cdot3\cdot2\cdot1 } &#x3D; 625&#x2F;1569\approx 0.3983 \\<br>Q(6) &amp;&#x3D; \frac{1}{ \frac{1}{6} + \frac{2^2}{6^2}\cdot5 + \frac{3^2}{6^3}\cdot5\cdot4 + \frac{4^2}{6^4}\cdot5\cdot4\cdot3 + \frac{5^2}{6^5}\cdot5\cdot4\cdot3\cdot2 + \frac{6^2}{6^6}\cdot5\cdot4\cdot3\cdot2\cdot1 } &#x3D; 324&#x2F;899 \approx 0.3604 \\<br>Q(7) &amp;&#x3D; 117649&#x2F;355081 \approx 0.3313, \\<br>Q(8) &amp;&#x3D; 131072&#x2F;425331 \approx 0.3082, \\<br>Q(9) &amp;&#x3D; 4782969&#x2F;16541017 \approx 0.2892, \\<br>Q(10)&amp;&#x3D; 1562500&#x2F;5719087 \approx 0.2732,<br>\end{align*}</p><p>来个大的：</p><p>\begin{align*}<br>Q(100)&amp;&#x3D;\frac{\tiny{10587911840678754238354031258495524525642395019531250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000}}{\tiny{129277986730885202106151856642773382549665465071825090615034369359178917814747670780594211447306244001059786961886915926297133393516168977984471526892507817}} \\<br>&amp;\approx 0.0819<br>\end{align*}</p><p>再来个图：</p><p><img src="/../attach/2024/02/Q(n)-graph.png" alt="Q(n)" loading="lazy"></p><h4 id="7-保底"><a href="#7-保底" class="headerlink" title="7. 保底"></a>7. 保底</h4><blockquote><p>在某些游戏中，抽取到一定次数后，会有保底机制，即抽取次数超过一定值后，会直接给予某个奖励。</p></blockquote><p>待续。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-不放回抽取&quot;&gt;&lt;a href=&quot;#1-不放回抽取&quot; class=&quot;headerlink&quot; title=&quot;1. 不放回抽取&quot;&gt;&lt;/a&gt;1. 不放回抽取&lt;/h4&gt;&lt;p&gt;从一套充分洗匀的扑克中不放回地一直抽，直到抽到两张大小王都抽到，一共抽了多少张的期望值？&lt;/p&gt;</summary>
      
    
    
    
    <category term="硬用数学" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E7%94%A8%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="抽奖" scheme="https://www.kaikai.men/tags/%E6%8A%BD%E5%A5%96/"/>
    
    <category term="奖池" scheme="https://www.kaikai.men/tags/%E5%A5%96%E6%B1%A0/"/>
    
    <category term="期望" scheme="https://www.kaikai.men/tags/%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>PT 站中的做种公式（魔力值计算）分析</title>
    <link href="https://www.kaikai.men/formula-seeding-pt/"/>
    <id>https://www.kaikai.men/formula-seeding-pt/</id>
    <published>2024-02-19T15:35:40.000Z</published>
    <updated>2025-08-30T14:15:58.638Z</updated>
    
    <content type="html"><![CDATA[<p>PT 站大多使用了 nexusPHP 的方案，因此其 Seeding Bonus，通常称为魔力点数，基本也使用了相同的公式进行计算：</p><p>\begin{align*}<br>&amp;A &#x3D; \sum_i\left( 1-10^{ -\frac{T_i}{T_0} } \right) \cdot S_i \cdot \left( 1+\sqrt2 \cdot 10^{ -\frac{N_i-1}{N_0-1} } \right) \\<br>&amp;B &#x3D; B_0 \cdot \frac{2}{\pi}arctan\left( \frac{A}{L} \right) \\<br>\end{align*}</p><p>其中：</p><ul><li>积分每小时计算并发放一次，后文不再赘述。</li><li>$S_i$ 为第 i 个种子的大小，单位是 GB</li><li>$T_i$ 为第 i 个种子发布起到现在经过的时间，单位为周，$T_0$ 为参数，$T_0 &#x3D; 4$</li><li>$N_i$ 为第 i 个种子当前的做种人数，$N_0$ 为参数，$N_0 &#x3D; 7$</li><li>$L$ 为参数，$L &#x3D; 300$，$B_0$ 为参数，$B_0 &#x3D; 50$，不同站点有时会在 $B_0$ 和 $L$ 上有所调整。</li><li>$B$ 为每小时用户获得的点数，由于 $arctan$ 函数值有上限，因此 $B$ 恒小于 $B_0$</li></ul><p>可以看到，对于 A，实质上是对每个种子的体积进行了加权求和，两个系数分别与时间和做种人数有关，实质上还是某种『有效做种体积』。因此先分析第二段公式，使用 Geogebra 绘制函数 $\frac{2}{\pi} \cdot arctan\left( \frac{A}{L} \right)$ 图像并取若干个样点：</p><p><img src="/../attach/2024/02/GeoGebra_arctan_curve.png" loading="lazy"></p><p>函数图像是个有上限、增幅递减的增函数，在有效做种体积为 200GB 时，可以得到 $0.37B_0$ 的魔力值，在 1000GB 时为 $0.81B_0$。以下列举一些计算结果：</p><table><thead><tr><th align="right">加权体积</th><th>上限比</th><th align="right">加权体积</th><th>上限比</th><th align="right">加权体积</th><th>上限比</th></tr></thead><tbody><tr><td align="right">10 GB</td><td>0.0212 $B_0$</td><td align="right">1 TB</td><td>0.8186 $B_0$</td><td align="right">15 TB</td><td>0.9876 $B_0$</td></tr><tr><td align="right">25 GB</td><td>0.0529 $B_0$</td><td align="right">1.5 TB</td><td>0.8772 $B_0$</td><td align="right">20 TB</td><td>0.9907 $B_0$</td></tr><tr><td align="right">50 GB</td><td>0.1051 $B_0$</td><td align="right">2 TB</td><td>0.9074 $B_0$</td><td align="right">25 TB</td><td>0.9925 $B_0$</td></tr><tr><td align="right">75 GB</td><td>0.1560 $B_0$</td><td align="right">2.5 TB</td><td>0.9257 $B_0$</td><td align="right">30 TB</td><td>0.9938 $B_0$</td></tr><tr><td align="right">100 GB</td><td>0.2048 $B_0$</td><td align="right">3 TB</td><td>0.9380 $B_0$</td><td align="right">35 TB</td><td>0.9947 $B_0$</td></tr><tr><td align="right">200 GB</td><td>0.3743 $B_0$</td><td align="right">3.5 TB</td><td>0.9468 $B_0$</td><td align="right">40 TB</td><td>0.9953 $B_0$</td></tr><tr><td align="right">300 GB</td><td>0.5 $B_0$</td><td align="right">4 TB</td><td>0.9535 $B_0$</td><td align="right">45 TB</td><td>0.9959 $B_0$</td></tr><tr><td align="right">400 GB</td><td>0.5903 $B_0$</td><td align="right">4.5 TB</td><td>0.9586 $B_0$</td><td align="right">50 TB</td><td>0.9963 $B_0$</td></tr><tr><td align="right">500 GB</td><td>0.6560 $B_0$</td><td align="right">5 TB</td><td>0.9627 $B_0$</td><td align="right">55 TB</td><td>0.9966 $B_0$</td></tr><tr><td align="right">600 GB</td><td>0.7048 $B_0$</td><td align="right">6 TB</td><td>0.9689 $B_0$</td><td align="right">60 TB</td><td>0.9969 $B_0$</td></tr><tr><td align="right">700 GB</td><td>0.7422 $B_0$</td><td align="right">7 TB</td><td>0.9734 $B_0$</td><td align="right">70 TB</td><td>0.9973 $B_0$</td></tr><tr><td align="right">800 GB</td><td>0.7716 $B_0$</td><td align="right">8 TB</td><td>0.9767 $B_0$</td><td align="right">80 TB</td><td>0.9977 $B_0$</td></tr><tr><td align="right">900 GB</td><td>0.7952 $B_0$</td><td align="right">9 TB</td><td>0.9793 $B_0$</td><td align="right">90 TB</td><td>0.9979 $B_0$</td></tr><tr><td align="right">1000 GB</td><td>0.8145 $B_0$</td><td align="right">10 TB</td><td>0.9814 $B_0$</td><td align="right">100 TB</td><td>0.9981 $B_0$</td></tr></tbody></table><p>如果要达到特定的目标上限比，几个档位如下：</p><table><thead><tr><th align="right">上限比</th><th>加权体积</th><th align="right">上限比</th><th>加权体积</th><th>上限比</th><th>加权体积</th></tr></thead><tbody><tr><td align="right">0.1 $B_0$</td><td>48 GB</td><td align="right">0.91 $B_0$</td><td>2108 GB (2.06 TB)</td><td>0.991 $B_0$</td><td>21220 GB (20.72 TB)</td></tr><tr><td align="right">0.2 $B_0$</td><td>98 GB</td><td align="right">0.92 $B_0$</td><td>2375 GB (2.32 TB)</td><td>0.992 $B_0$</td><td>23872 GB (23.31 TB)</td></tr><tr><td align="right">0.3 $B_0$</td><td>153 GB</td><td align="right">0.93 $B_0$</td><td>2718 GB (2.65 TB)</td><td>0.993 $B_0$</td><td>27283 GB (26.64 TB)</td></tr><tr><td align="right">0.4 $B_0$</td><td>218 GB</td><td align="right">0.94 $B_0$</td><td>3174 GB (3.10 TB)</td><td>0.994 $B_0$</td><td>31831 GB (31.08 TB)</td></tr><tr><td align="right">0.5 $B_0$</td><td>300 GB</td><td align="right">0.95 $B_0$</td><td>3812 GB (3.72 TB)</td><td>0.995 $B_0$</td><td>38197 GB (37.30 TB)</td></tr><tr><td align="right">0.6 $B_0$</td><td>413 GB</td><td align="right">0.96 $B_0$</td><td>4769 GB (4.66 TB)</td><td>0.996 $B_0$</td><td>47746 GB (46.63 TB)</td></tr><tr><td align="right">0.7 $B_0$</td><td>589 GB</td><td align="right">0.97 $B_0$</td><td>6362 GB (6.21 TB)</td><td>0.997 $B_0$</td><td>63662 GB (62.17 TB)</td></tr><tr><td align="right">0.8 $B_0$</td><td>924 GB</td><td align="right">0.98 $B_0$</td><td>9547 GB (9.32 TB)</td><td>0.998 $B_0$</td><td>95493 GB (93.25 TB)</td></tr><tr><td align="right">0.9 $B_0$</td><td>1895 GB</td><td align="right">0.99 $B_0$</td><td>19098 GB (18.65 TB)</td><td>0.999 $B_0$</td><td>190986 GB (186.51 TB)</td></tr></tbody></table><p>200 GB 以下大致可视为线性增长，2 TB 时可以达到 90% 上限分数，更高的分值需要极大的硬盘空间，逐渐不甚合理了。$L$ 参数的变化会<strong>等比例地</strong>影响上表中的加权体积数值。</p><hr><p>下面来研究两个系数的影响，这两个系数实现了『实际做种体积』$\rightarrow$『有效做种体积』之间的换算。首先是时间系数，$f(T_i) &#x3D; \left(1-10^{ -\frac{T_i}{T_0}}\right)$，由于 nexusPHP 本身对该分值是基于小数的，且『周』的展示不甚直观，这里直接改用『天』作为单位，换算 $T_0 &#x3D; 28$，其图像为：</p><p><img src="/../attach/2024/02/GeoGebra_time_factor.png" loading="lazy"></p><p>显然这也是和 arctan 一样的有上限、增幅递减的增函数，但增幅比 arctan 要大得多，靠近上限十分容易，也就是说到达 0.999 或更高值是个可行的目标。以下列举一些计算结果：</p><table><thead><tr><th align="right">时间</th><th>系数</th><th align="right">时间</th><th>系数</th><th align="right">时间</th><th>系数</th></tr></thead><tbody><tr><td align="right">1 小时</td><td>0.0034</td><td align="right">2 天</td><td>0.1517</td><td align="right">9 天</td><td>0.5229</td></tr><tr><td align="right">2 小时</td><td>0.0068</td><td align="right">3 天</td><td>0.2186</td><td align="right">15 天</td><td>0.7087</td></tr><tr><td align="right">3 小时</td><td>0.0102</td><td align="right">4 天</td><td>0.2803</td><td align="right">28 天（4 周）</td><td>0.9</td></tr><tr><td align="right">6 小时</td><td>0.0203</td><td align="right">5 天</td><td>0.3371</td><td align="right">56 天（8 周）</td><td>0.99</td></tr><tr><td align="right">12 小时</td><td>0.0403</td><td align="right">6 天</td><td>0.3895</td><td align="right">84 天（12 周）</td><td>0.999</td></tr><tr><td align="right">24 小时</td><td>0.0789</td><td align="right">7 天</td><td>0.4377</td><td align="right">112 天（16 周）</td><td>0.9999</td></tr></tbody></table><p>因为是 10 的幂运算，计算分段明显。每 28 天小数点后多一位 9，在寻找 free 种子攒积分时，选时间大于三个月 (&gt;0.999) 的就行，『实际做种体积』与『有效做种体积』几乎一致。</p><p>最后是做种人数系数，$f(N_i) &#x3D; \left(1+\sqrt2 \cdot 10^{ -\frac{N_i-1}{N_0-1}}\right)$，在其定义域内这是个有上下限的减函数，其图像为：</p><p><img src="/../attach/2024/02/GeoGebra_seed_factor.png" loading="lazy"></p><p>与前两个系数不同，$N_i$ 做种人数只能取正整数，因此其图像是离散的。以下列举一些计算结果：</p><table><thead><tr><th align="right">做种人数</th><th>系数</th><th align="right">做种人数</th><th>系数</th><th align="right">做种人数</th><th>系数</th></tr></thead><tbody><tr><td align="right">1</td><td>2.4142</td><td align="right">6</td><td>1.2076</td><td align="right">12</td><td>1.0208</td></tr><tr><td align="right">2</td><td>1.9635</td><td align="right">7</td><td>1.1414</td><td align="right">14</td><td>1.0100</td></tr><tr><td align="right">3</td><td>1.6564</td><td align="right">8</td><td>1.0963</td><td align="right">20</td><td>1.0010</td></tr><tr><td align="right">4</td><td>1.4472</td><td align="right">9</td><td>1.0656</td><td align="right">26</td><td>1.0001</td></tr><tr><td align="right">5</td><td>1.3047</td><td align="right">10</td><td>1.0447</td><td align="right">28</td><td>1.0000</td></tr></tbody></table><p>可以看到，只有 8 人以下的种子才有可能达到 &gt;1.1 的系数，而 20 人以上的种子，该系数的增益已经完全可以忽略了。由于做种人数是不可控的，因此可以简单划为两类，20 人以下有加成， 20 人以上无。又因为人数会变动，因此若要从这个系数上获得稳定收益，必须考虑 $N_i&lt;8$ 的种子，以容许一些浮动范围。</p><p>通过以上两个系数的分析，可以得到一个结论，我称为『三八原则』：</p><blockquote><p>三八原则：在 PT 站做种赚取积分时，选择时间大于三个月，做种人数小于 8 人的种子。</p></blockquote><p>原则展开如下：</p><ul><li>做种人数足够少，可以使实际 1GB 的硬盘空间达成 2.4GB 的做种效果，但条件苛刻。</li><li>但再多的做种人数也不过是系数为 1，没有奖励，但不会有折损。</li><li>三个月以前的种子，做种效果几乎 1:1 且容易达成。而一个月以内则折损可观，不是没得选尽量避免保新种。</li><li>积分有上限，有效做种体积 1-2 TB 已经可以达到 80%-90% 的上限了。再增长 10% 到 99% 则需要近 20TB 有效保种，即使都是长寿孤种也需要 8TB，意义不大。</li><li>形势所迫必须新种，则放置一周有 44% 的有效做种体积，准备 4TB 硬盘也就够了。</li><li>孤种才有奖励，新种只有折损。</li></ul><p>这样可以最大化体积系数，从而用相同的硬盘空间获取更大的做种收益。当然，既然是赚取积分，肯定是要选择 free 种子。种子时间可以挑选，但做种人数加成八成是不必指望了。</p><hr><p>其它一些 Bonus：</p><p>各站点会根据自己的实际调整参数，或添加其它的奖励机制，例如：</p><ol><li><p>每个种子 0.7 基本分，最多 14 个。</p><p> 该数值上限 9.8，是直接作为基础值的，因此该站的积分上限为 $9.8+B_0$。这个条件几乎不存在代价，保种 1-2 TB 通常来说都会超过 14 个种子。</p></li><li><p>用户等级奖励，每升一级 1% 的比例奖励。</p><p> 这个奖励是在基础值之外的奖励，计算公式为 $(1+1\%\times Level) * (9.8+B_0)$</p><p> 用户等级奖励其实存在很大的隐性的代价。PT 站往往要求上传量远大于下载量才能升级，而 1% 的奖励却聊胜于无。这就像在银行存一百万拿 2% 的利息，银行要求你再存一千万升 VIP，而 VIP 的待遇仅仅是利息多 1%，并不是 $2\%\rightarrow 3\%$ 的 1%，而是 $2\%\rightarrow 2.02\%$ 的 1%。如果上传本有余裕，自然升级也就罢了，刻意去为 1% 奖励而花大力气冲没什么意义。</p></li><li><p>为官方种子做种的额外奖励，上限为 25%。</p><p> 百分比类型奖励都是平行的，也就是 $(1+1\%\times Level + 25\%) * (9.8+B_0)$。<br> 注：该站点程序有 bug，多个官种奖励叠加反而会导致总 bonus 下降，因此只保一个 +25% 官种即可。</p></li><li><p>每 100 个种子做种 24 小时以上开始 5% 的比例奖励，无上限，每个种子需要大于 5MB。</p><p> $$(1+1\%\times Level + 25\% + \mathop{SeedsQuantity}\limits_{\substack{seedsize&gt;5\text{MB} \\ seedinghour&gt;24}} &#x2F; 100 \times 5\%) * (9.8+B_0)$$</p><p> 该规则鼓励大量小体积种子做种，理论上来说，以 2TB 的目标计算，若全部靠 5MB 的种子达成，至多可以使用 40 万个种子，单这项 bonus 就能达到 $200B_0$，这是一个巨大的增益。客观上受限于种子总量有限及大小各异，不可能达到这个数量，但成为一个万种大佬还是有可能的。此时的 bonus 为 $$(1+25\%+\frac{10000}{100}*5\%) \times (9.8+0.9\times B_0) &#x3D; 6.25 \times (9.8+0.9\times B_0)$$ 若 $B_0&#x3D;50$，则值为 $342.5$。在该规则下，保种策略是尽量地将大种子更替为小种子，在总量有限而不变的情况下，提升种子数量。</p><p> 但是我们需要进一步讨论。更替小种虽有额外收益但通常也会产生额外的下载流量，需要靠魔力值兑换上传量来冲抵。一个种子的小时增益为 $5\% &#x2F; 100 \times (9.8 + 0.9B_0) &#x3D; 0.0274$，每天可以通过魔力值兑换的上传流量为 $0.0274 \times 24 \; &#x2F; \; 425 \times 1024 &#x3D;  1.5844$ MB，一个 5MB 的种子在 3.15 天回本，因为是独立计算，一百个 5MB 的种子也是 3.15 天回本。回本时间不受种子数量的影响，但与种子体积成正比，当种子体积到 50MB 时回本时间就超过一个月了。</p><p> 另一需要考虑的软性限制是 PT 与站点服务器的通讯。当做种数量足够多时，PT 客户端的 tracker update 操作变得十分频繁，甚至变相成为一种对服务器的 DOS 攻击。这也是热门大站往往 tracker update interval 很长的原因。大量种子对保种用户本身也是存在风险的，对同一地址的短时间频繁请求，在客户端到服务器的整条网络传输路径上的任何一个环节都有可能触发限制。服务器收不到 update 信息，用户就反而无法获得积分。</p></li><li><p>使用 $250\times B_0$ 的价格购买 5% 比例的奖励徽章，可购买多个。</p><p> 同样是某种需要考虑投入产出的增益。该站点没有其它基础值奖励，以每小时 $0.9B_0$ 计算，购买后的增益为 $0.045B_0$，回本时间为 $250B_0 &#x2F;0.045B_0 &#x2F; 24 &#x3D; 231.49$ 天。该站 50G 上传量为 $50B_0$，一个徽章相当于 250 GB 的上传量。从无穷长远来看，一切本金不会湮灭且无通胀环境下的投入都是值得的，算来第 232 天开始可就是净收益了。但是在合理的生命周期内，这个投入产出比是十分低的。因此这个徽章是一个『炫耀』的物品，而不是一个『赚钱』的物品。</p><p> PT 站的生命周期是客观存在的，对于用户方，如果生活中发生了某些变化，帐号有时就冷落消失了。对于站点方，也有可能因为各种原因关闭跑路。长周期的收益更多只是在纸面上的。</p><blockquote><p><em>相聚离开都有时候，没有什么会永垂不朽。</em></p></blockquote></li><li><p>后宫加成，每个下线 5%。</p><p> 这个奖励的 ROI 计算更为复杂，暂不清楚是否有复利加成，即我后宫的后宫是不是我的后宫。单从实践经验来看，$50B_0$ 兑换邀请和赠与新人 $62.5B_0$ 启动资金，换得的是下线的 5% 增益。如果下线足够给力，则可以得到和徽章奖励一致的 $0.045B_0$。回本周期为 105 天。考虑到下线需要积累一段时间才能达到 $0.9B_0$，实际周期在 150 天左右。比起奖章仍合算一些。如果不提供启动资金，回本周期为 47 天，但新人启动时间会长不少，相当于额外再增加一个 0-50G 的启动时间。</p><p> 如果考虑风险因素，ROI 就不好说了。下线的行为是不可控的，且会影响到自己的账号。$112.5B_0$ 的本金浪费是一方面，其它权利影响是则另一方面。除非有站点相关数据作为支撑，否则这些风险很难量化。</p></li><li><p>从奖池中抽道具，部分道具增加 10% 基础魔力值奖励，每次抽取动作消耗 $2.5B_0$。</p><p> 从 n 个道具中抽取特定的 k 个道具，假设无重复时，全部抽齐的期望次数为 $\frac{k(n+1)}{k+1}$，则成本为 $\frac{k(n+1)}{k+1} \times 2.5B_0$，收益为 $k \times 10\% \times 0.9B_0$，回本周期为 $1.1574 \cdot \frac{n+1}{k+1}$ 天，取决于奖池 n 和 k 的比例。事实上哪怕是 1&#x2F;100 的比例，也比上一条后宫加成更合算。</p><p> 进一步考虑，第一个道具在抽出后开始生效，其成本为 $\frac{n+1}{k+1}\times 2.5B_0$，收益为 $10\% \times 0.9B_0$，回本周期同样为 $1.1574 \cdot \frac{n+1}{k+1}$ 天。也就是说，在整个过程中，每个道具的奖励比例一致，则回本周期也都是一致的。</p><p> 当有重复时，情况则有不同，第一个的期望成本为 $n&#x2F;k\times 2.5B_0$，回本周期为 $1.1574 n&#x2F;k$ 天。所有奖品抽到的期望次数为 $n\cdot H_k$，其中 $H_k&#x3D;\sum_{i&#x3D;1}^n\frac{1}{i}$ 为调和级数。越往后面，即使奖励相同，但抽取成本变大也会导致回本周期变长。最后一个的成本是 $n\times 2.5B_0$，回本周期对应为 $1.1574 n$ 天。</p><p> 如果除 k 外的其它道具也有一定的奖励，或者总数 n 难以计算，则 ROI 的计算只能通过少量抽样下的贝叶斯推断来进行了。</p></li><li><p>上传流量的奖励，每 1GB 上传流量奖励 0.1 魔力值。</p><p> PT 站本身上传量就是货币，这个其实属于某种重复奖励，且没有可优化或者可选择的余地。不讨论。</p></li></ol><hr><p>末尾一些啰嗦：</p><p>$f(A) &#x3D; B_0 \cdot \frac{2}{\pi} \cdot arctan\left( \frac{A}{L} \right)$ 的导数为 $f^{&#39;}(A) &#x3D; \frac{2B_0}{\pi L} \cdot \frac{1}{1+\left( \frac{A}{L} \right)^2}$，为 $\frac{1}{1+x^2}$ 的缩放。当前每增加 1GB 的有效做种体积对应多少魔力值增量，可以通过导数来计算。</p><p>通过计算 $Total\_Bonus &#x3D; N_i \cdot \left(\sqrt2 \cdot 10^{ -\frac{N_i-1}{N_0-1}}\right)$ 发现，在 3 人及以下做种时，PT 站额外奖励了更多的体积系数分到所有的人，而人数更多时 Bonus 总增益开始下降，奖励总量反而逐渐减少。算法并非是将固定的 Bonus 分发给所有人，而确实是针对孤种的单独加成：</p><p><img src="/../attach/2024/02/GeoGebra_total_seed_bonus.png" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PT 站大多使用了 nexusPHP 的方案，因此其 Seeding Bonus，通常称为魔力点数，基本也使用了相同的公式进行计算：&lt;/p&gt;
&lt;p&gt;&#92;begin{align*}&lt;br&gt;&amp;amp;A &amp;#x3D; &#92;sum_i&#92;left( 1-10^{ -&#92;frac{T_i}</summary>
      
    
    
    
    <category term="硬用数学" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E7%94%A8%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="PT" scheme="https://www.kaikai.men/tags/PT/"/>
    
    <category term="魔力值公式" scheme="https://www.kaikai.men/tags/%E9%AD%94%E5%8A%9B%E5%80%BC%E5%85%AC%E5%BC%8F/"/>
    
    <category term="Seeding Bonus" scheme="https://www.kaikai.men/tags/Seeding-Bonus/"/>
    
  </entry>
  
  <entry>
    <title>jubeat 游戏数据</title>
    <link href="https://www.kaikai.men/jubeat-game-data/"/>
    <id>https://www.kaikai.men/jubeat-game-data/</id>
    <published>2024-02-02T19:08:11.000Z</published>
    <updated>2025-08-30T14:15:58.638Z</updated>
    
    <content type="html"><![CDATA[<h4 id="不同等级的歌曲在获得对应评价时获得的经验值："><a href="#不同等级的歌曲在获得对应评价时获得的经验值：" class="headerlink" title="不同等级的歌曲在获得对应评价时获得的经验值："></a>不同等级的歌曲在获得对应评价时获得的经验值：</h4><table><thead><tr><th align="right">Score</th><th align="center">Rating</th><th>Lv.1</th><th>Lv.2</th><th>Lv.3</th><th>Lv.4</th><th>Lv.5</th><th>Lv.6</th><th>Lv.7</th><th>Lv.8</th><th>Lv.9</th><th>Lv.10</th></tr></thead><tbody><tr><td align="right">1000000</td><td align="center">Exc</td><td>88</td><td>104</td><td>120</td><td>136</td><td>152</td><td>168</td><td>184</td><td>200</td><td>216</td><td>232</td></tr><tr><td align="right">980000-999999</td><td align="center">SSS</td><td>82</td><td>97</td><td>112</td><td>127</td><td>142</td><td>157</td><td>172</td><td>187</td><td>202</td><td>217</td></tr><tr><td align="right">950000-979999</td><td align="center">SS</td><td>77</td><td>91</td><td>105</td><td>119</td><td>133</td><td>147</td><td>161</td><td>175</td><td>189</td><td>203</td></tr><tr><td align="right">900000-949999</td><td align="center">S</td><td>71</td><td>84</td><td>97</td><td>110</td><td>123</td><td>136</td><td>149</td><td>162</td><td>175</td><td>188</td></tr><tr><td align="right">850000-899999</td><td align="center">A</td><td>66</td><td>78</td><td>90</td><td>102</td><td>114</td><td>126</td><td>138</td><td>150</td><td>162</td><td>174</td></tr><tr><td align="right">800000-849999</td><td align="center">B</td><td>60</td><td>71</td><td>82</td><td>93</td><td>104</td><td>115</td><td>126</td><td>137</td><td>148</td><td>159</td></tr><tr><td align="right">700000-799999</td><td align="center">C</td><td>55</td><td>65</td><td>75</td><td>85</td><td>95</td><td>105</td><td>115</td><td>125</td><td>135</td><td>145</td></tr><tr><td align="right">500000-699999</td><td align="center">D</td><td>49</td><td>58</td><td>67</td><td>76</td><td>85</td><td>94</td><td>103</td><td>112</td><td>121</td><td>130</td></tr><tr><td align="right">0-499999</td><td align="center">E</td><td>44</td><td>52</td><td>60</td><td>68</td><td>76</td><td>84</td><td>92</td><td>100</td><td>108</td><td>116</td></tr></tbody></table><ul><li>同评价下不同等级的歌曲获得的经验值为等差增长数列；</li><li>同等级下不同评价的歌曲获得的经验值为交替增长数列；</li><li>各等级歌曲 Exc 的经验总是 E 的两倍，细分的小数点等级以取整计。</li></ul><h4 id="玩家各等级升级经验："><a href="#玩家各等级升级经验：" class="headerlink" title="玩家各等级升级经验："></a>玩家各等级升级经验：</h4><table><thead><tr><th align="right">Lvl</th><th align="left">Exp</th><th align="right">Lvl</th><th align="left">Exp</th><th align="right">Lvl</th><th align="left">Exp</th><th align="right">Lvl</th><th align="left">Exp</th><th align="right">Lvl</th><th align="left">Exp</th></tr></thead><tbody><tr><td align="right">1</td><td align="left">44</td><td align="right">21</td><td align="left">2505</td><td align="right">41</td><td align="left">7597</td><td align="right">61</td><td align="left">15329</td><td align="right">81</td><td align="left">25701</td></tr><tr><td align="right">2</td><td align="left">113</td><td align="right">22</td><td align="left">2697</td><td align="right">42</td><td align="left">7921</td><td align="right">62</td><td align="left">15785</td><td align="right">82</td><td align="left">26289</td></tr><tr><td align="right">3</td><td align="left">179</td><td align="right">23</td><td align="left">2895</td><td align="right">43</td><td align="left">8251</td><td align="right">63</td><td align="left">16247</td><td align="right">83</td><td align="left">26883</td></tr><tr><td align="right">4</td><td align="left">252</td><td align="right">24</td><td align="left">3100</td><td align="right">44</td><td align="left">8588</td><td align="right">64</td><td align="left">16716</td><td align="right">84</td><td align="left">27484</td></tr><tr><td align="right">5</td><td align="left">332</td><td align="right">25</td><td align="left">3312</td><td align="right">45</td><td align="left">8932</td><td align="right">65</td><td align="left">17192</td><td align="right">85</td><td align="left">28092</td></tr><tr><td align="right">6</td><td align="left">418</td><td align="right">26</td><td align="left">3530</td><td align="right">46</td><td align="left">9282</td><td align="right">66</td><td align="left">17674</td><td align="right">86</td><td align="left">28706</td></tr><tr><td align="right">7</td><td align="left">511</td><td align="right">27</td><td align="left">3755</td><td align="right">47</td><td align="left">9639</td><td align="right">67</td><td align="left">18163</td><td align="right">87</td><td align="left">29327</td></tr><tr><td align="right">8</td><td align="left">611</td><td align="right">28</td><td align="left">3987</td><td align="right">48</td><td align="left">10003</td><td align="right">68</td><td align="left">18659</td><td align="right">88</td><td align="left">29955</td></tr><tr><td align="right">9</td><td align="left">717</td><td align="right">29</td><td align="left">4225</td><td align="right">49</td><td align="left">10373</td><td align="right">69</td><td align="left">19161</td><td align="right">89</td><td align="left">30589</td></tr><tr><td align="right">10</td><td align="left">830</td><td align="right">30</td><td align="left">4470</td><td align="right">50</td><td align="left">10750</td><td align="right">70</td><td align="left">19670</td><td align="right">90</td><td align="left">31230</td></tr><tr><td align="right">11</td><td align="left">949</td><td align="right">31</td><td align="left">4721</td><td align="right">51</td><td align="left">11133</td><td align="right">71</td><td align="left">20185</td><td align="right">91</td><td align="left">31877</td></tr><tr><td align="right">12</td><td align="left">1075</td><td align="right">32</td><td align="left">4979</td><td align="right">52</td><td align="left">11523</td><td align="right">72</td><td align="left">20707</td><td align="right">92</td><td align="left">32531</td></tr><tr><td align="right">13</td><td align="left">1207</td><td align="right">33</td><td align="left">5243</td><td align="right">53</td><td align="left">11919</td><td align="right">73</td><td align="left">21235</td><td align="right">93</td><td align="left">33191</td></tr><tr><td align="right">14</td><td align="left">1346</td><td align="right">34</td><td align="left">5514</td><td align="right">54</td><td align="left">12322</td><td align="right">74</td><td align="left">21770</td><td align="right">94</td><td align="left">33858</td></tr><tr><td align="right">15</td><td align="left">1492</td><td align="right">35</td><td align="left">5792</td><td align="right">55</td><td align="left">12732</td><td align="right">75</td><td align="left">22312</td><td align="right">95</td><td align="left">34532</td></tr><tr><td align="right">16</td><td align="left">1644</td><td align="right">36</td><td align="left">6076</td><td align="right">56</td><td align="left">13148</td><td align="right">76</td><td align="left">22860</td><td align="right">96</td><td align="left">35212</td></tr><tr><td align="right">17</td><td align="left">1803</td><td align="right">37</td><td align="left">6367</td><td align="right">57</td><td align="left">13571</td><td align="right">77</td><td align="left">23415</td><td align="right">97</td><td align="left">35899</td></tr><tr><td align="right">18</td><td align="left">1969</td><td align="right">38</td><td align="left">6665</td><td align="right">58</td><td align="left">14001</td><td align="right">78</td><td align="left">23977</td><td align="right">98</td><td align="left">36593</td></tr><tr><td align="right">19</td><td align="left">2141</td><td align="right">39</td><td align="left">6969</td><td align="right">59</td><td align="left">14437</td><td align="right">79</td><td align="left">24545</td><td align="right">99</td><td align="left">37293</td></tr><tr><td align="right">20</td><td align="left">2320</td><td align="right">40</td><td align="left">7280</td><td align="right">60</td><td align="left">14880</td><td align="right">80</td><td align="left">25120</td><td align="right">100</td><td align="left">38000</td></tr></tbody></table><ul><li>两等级间的经验差额 D<sub>n</sub>&#x3D;Exp<sub>n+1</sub>-Exp<sub>n</sub> 在 n≥2 时符合间隔为 7,7,6,7,7,6,7,6,7,6 的递增序列。</li><li>即 Exp<sub>n+10</sub>-Exp<sub>n</sub>&#x3D;830+66n, n≥2。E<sub>2</sub>~E<sub>11</sub> 为基准值。</li><li>可以进一步推测，Exp<sub>1</sub> 原本应为 53，但为了确保任何一个新玩家哪怕是最初级的玩家也能立刻体验到升级效果，单独修正为 44。</li></ul><h4 id="玩家等级与体力值："><a href="#玩家等级与体力值：" class="headerlink" title="玩家等级与体力值："></a>玩家等级与体力值：</h4><p>スタミナ &#x3D; プレーヤーレベル + 49，即 Stamina 体力 &#x3D; Player Level 玩家等级 + 49，初始 1 级 50 点体力。</p><ul><li><p>1-3 级歌曲，每次游玩消耗 20 点体力</p></li><li><p>4-6 级歌曲，每次游玩消耗 25 点体力</p></li><li><p>7-10 级歌曲，每次游玩消耗 30 点体力</p></li><li><p>每 3 分钟恢复 1 点体力，直到达到体力上限；</p></li><li><p>当用户升级时，会恢复体力上限等额的体力，此时可用体力会超过上限；</p></li><li><p>当前体力不足以游玩指定歌曲时，系统会提示用户观看广告获得 50 点体力，当上限小于 79 时，可用体力可能会超过上限；</p></li><li><p>观看广告获得 50 体力，这一行为本身有 1 小时的 CD，不影响其它情况下观看广告获得加成。</p></li><li><p>使用 1 个可乐道具，或 50 个 jBlock 道具可以换取 50 点体力，无 CD，道具通过各类任务获得，也可以直接付费购买；</p></li><li><p>使用 jBlock 在 plus 模式下购买的曲包可以无限次游玩，不消耗体力，但也不会获得经验值；</p></li><li><p>使用 Skip 券可以跳过指定谱面的实际游玩过程，直接按该谱面的历史最高分结算奖励，也会消耗体力。该谱面必须之前有过演奏记录。节约时间用。</p></li></ul><h4 id="尽快升级"><a href="#尽快升级" class="headerlink" title="尽快升级"></a>尽快升级</h4><ul><li>由于体力上限与等级成正比，因此在游戏初期，尽快升级是提高游戏体验的要素之一。</li><li>由于歌曲难度等级对应体力消耗不同，且歌曲难度对 Rating 有影响，因此同体力最多 Exp 的升级路线要根据个人能力调整。</li><li>例如，都为 E 级，Lv.6 的 84&#x2F;25 &#x3D; 3.36 就大于 Lv.8 的 100&#x2F;30 &#x3D; 3.33。</li><li>如果所有歌都能打相同 Rating，优势顺序为 10 9 6 8 7 5 3 4 2 1。如果不是，就需要按下表排列：</li></ul><table><thead><tr><th align="center">档位</th><th align="left">效率比例与等级</th></tr></thead><tbody><tr><td align="center">≥ 7</td><td align="left"><strong>10Exc</strong> (7.73) <strong>10SSS</strong> (7.23) <strong>9Exc</strong> (7.2)</td></tr><tr><td align="center">≥ 6.5</td><td align="left"><strong>10SS</strong> (6.77) <strong>9SSS</strong> (6.73) <strong>6Exc</strong> (6.72) <strong>8Exc</strong> (6.67)</td></tr><tr><td align="center">≥ 6</td><td align="left"><strong>9SS</strong> (6.3) <strong>6SSS</strong> (6.28) <strong>10S</strong> (6.27) <strong>8SSS</strong> (6.23) <strong>7Exc</strong> (6.13) <strong>5Exc</strong> (6.08) <strong>3Exc</strong> (6)</td></tr><tr><td align="center">≥ 5.5</td><td align="left"><strong>6SS</strong> (5.88) <strong>8SS</strong> (5.83) <strong>9S</strong> (5.83) <strong>10A</strong> (5.8) <strong>7SSS</strong> (5.73) <strong>5SSS</strong> (5.68) <strong>3SSS</strong> (5.6)</td></tr><tr><td align="center">≥ 5</td><td align="left"><strong>6S</strong> (5.44) <strong>4Exc</strong> (5.44) <strong>8S</strong> (5.4) <strong>9A</strong> (5.4) <strong>7SS</strong> (5.37) <strong>5SS</strong> (5.32) <strong>10B</strong> (5.3) <strong>3SS</strong> (5.25) <strong>2Exc</strong> (5.2) <strong>4SSS</strong> (5.08) <strong>6A</strong> (5.04) <strong>8A</strong> (5)</td></tr><tr><td align="center">≥ 4.5</td><td align="left"><strong>7S</strong> (4.97) <strong>9B</strong> (4.93) <strong>5S</strong> (4.92) <strong>3S</strong> (4.85) <strong>2SSS</strong> (4.85) <strong>10C</strong> (4.83) <strong>4SS</strong> (4.76) <strong>6B</strong> (4.6) <strong>7A</strong> (4.6) <strong>8B</strong> (4.57) <strong>5A</strong> (4.56) <strong>2SS</strong> (4.55) <strong>3A</strong> (4.5) <strong>9C</strong> (4.5)</td></tr><tr><td align="center">≥ 4</td><td align="left"><strong>1Exc</strong> (4.4) <strong>4S</strong> (4.4) <strong>10D</strong> (4.33) <strong>6C</strong> (4.2) <strong>2S</strong> (4.2) <strong>7B</strong> (4.2) <strong>8C</strong> (4.17) <strong>5B</strong> (4.16) <strong>1SSS</strong> (4.1) <strong>3B</strong> (4.1) <strong>4A</strong> (4.08) <strong>9D</strong> (4.03)</td></tr><tr><td align="center">≥ 3.5</td><td align="left"><strong>2A</strong> (3.9) <span style="color:red"><strong>10E</strong></span> (3.87) 1SS (3.85) 7C (3.83) 5C (3.8) 6D (3.76) 3C (3.75) 8D (3.73) 4B (3.72) 9E (3.6) 1S (3.55) 2B (3.55)</td></tr><tr><td align="center">≥ 3</td><td align="left">7D (3.43) 5D (3.4) 4C (3.4) 6E (3.36) 3D (3.35) 8E (3.33) 1A (3.3) 2C (3.25) 7E (3.07) 5E (3.04) 4D (3.04) 1B (3) 3E (3)</td></tr><tr><td align="center">≥ 2</td><td align="left">2D (2.9)1C (2.75)4E (2.72)2E (2.6)1D (2.45)1E (2.2)</td></tr></tbody></table><blockquote><p>这里有个重要的点位是 10E(3.87)。E 是最低评价，摆烂也能拿。也就是说，对于效率升级的目标，即以相同体力获得最多经验经验值来说，即使你 1 级歌能打 SS，都不如开 10 级歌放那里不动等 0 分结算快。</p></blockquote><h4 id="コイン-Coin"><a href="#コイン-Coin" class="headerlink" title="コイン (Coin)"></a>コイン (Coin)</h4><ul><li>1-3 级歌曲，每次游玩后奖励 3 个宝箱</li><li>4-6 级歌曲，每次游玩后奖励 4 个宝箱，其中 1 个为劣质宝箱</li><li>7-10 级歌曲，每次游玩后奖励 5 个宝箱，其中 2 个为劣质宝箱</li><li>宝箱可能开出 20, 30, 50, 100, 200, 1000, 10000 等数额的金币。</li><li>根据 Rating 不同，宝箱开出的金币数目不同，且有一定的随机性。</li><li>在 Rating &#x3D; E 的情况下，宝箱开出的金币绝大部分为 20, 30 两种。</li><li>完成任务和日常签到也会获得金币、jBlock 和道具奖励，数额不等。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;不同等级的歌曲在获得对应评价时获得的经验值：&quot;&gt;&lt;a href=&quot;#不同等级的歌曲在获得对应评价时获得的经验值：&quot; class=&quot;headerlink&quot; title=&quot;不同等级的歌曲在获得对应评价时获得的经验值：&quot;&gt;&lt;/a&gt;不同等级的歌曲在获得对应评价时获得的经验</summary>
      
    
    
    
    <category term="游戏中心" scheme="https://www.kaikai.men/categories/%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="jubeat" scheme="https://www.kaikai.men/tags/jubeat/"/>
    
    <category term="游戏数据" scheme="https://www.kaikai.men/tags/%E6%B8%B8%E6%88%8F%E6%95%B0%E6%8D%AE/"/>
    
    <category term="game data" scheme="https://www.kaikai.men/tags/game-data/"/>
    
  </entry>
  
  <entry>
    <title>Latex 语法简单总结</title>
    <link href="https://www.kaikai.men/latex-syntax-mathjax/"/>
    <id>https://www.kaikai.men/latex-syntax-mathjax/</id>
    <published>2024-01-05T13:36:16.000Z</published>
    <updated>2025-08-30T14:15:58.638Z</updated>
    
    <content type="html"><![CDATA[<style >.red {    color: red;}.green {    color: green;}.f{    border-bottom: 1px solid #333;    padding-bottom: 2px;    font-size:0.9em}</style><h2 id="Hexo-Next-开启-Mathjax"><a href="#Hexo-Next-开启-Mathjax" class="headerlink" title="Hexo Next 开启 Mathjax"></a>Hexo Next 开启 Mathjax</h2><p>Hexo Next 主题默认支持 Mathjax 和 katex，以在博客文章中显示数学公式。其中，Mathjax 默认以『按需加载』的方式开着，只需要在 md 文件的头部区域添加 <code>mathjax: true</code> 即可激活该文的 Mathjax 支持。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&quot;Latex 简单语法总结&quot;</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span> <span class="comment"># 开启 Mathjax</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>也可以在 <code>_config.next.yml</code> 配置文件中设置 <code>math: ↴ every_page: true</code> 为所有文章开启数学公式支持。</p><h2 id="Latex-语法"><a href="#Latex-语法" class="headerlink" title="Latex 语法"></a>Latex 语法</h2><blockquote><p>Mathjax 不只支持 Latex，还支持 MathML 等语法。本着快速入门的实用主义角度，本文只记录一部分 Latex 语法。</p></blockquote><p>Latex 的基本语法包括：</p><ul><li>开头结尾与键盘字符。</li><li>格式控制，包括公式组合、上下标、分数、根式、矩阵等 。</li><li>转义字符，包括希腊字符、数学符号、运算符、箭头、修饰符等。</li><li>打印控制，包括字体、颜色、大小、对齐等。</li><li>宏定义与扩展包，包括自定义命令、环境等。</li></ul><h3 id="开头结尾与键盘字符"><a href="#开头结尾与键盘字符" class="headerlink" title="开头结尾与键盘字符"></a>开头结尾与键盘字符</h3><p>用 <code>$ ... $</code> 包裹的内容会被 Mathjax 重新改写为 <span class="f">行内公式</span>，比如 <span class="f">\$F&#x3D;ma\$</span> 就会被自动渲染为 $F&#x3D;ma$，行内公式后续文字会在同一行继续。用 <code>$$ ... $$</code> 包裹的内容称为 <span class="f">行间公式</span> 或者 <span class="f">块内公式</span>，公式在文章中是独立的块，<span class="f">\$\$E&#x3D;mc^2\$\$</span> 会被渲染为 $$E&#x3D;mc^2$$ 文字将被断开换行并形成上下围绕。</p><p>对于英文字母以及一些键盘上的符号，Mathjax 也会适当地重新渲染，$+ - * &#x2F; &#x3D; &gt; &lt; ( ) [ ]$ 等均会被渲染为数学符号。因此像 F&#x3D;ma 这样的公式，直接前后套上 $，变为 <span class="f">\$F&#x3D;ma\$</span> 就是 Latex 表达式了。</p><h3 id="格式控制：初步"><a href="#格式控制：初步" class="headerlink" title="格式控制：初步"></a>格式控制：初步</h3><p>从上面我们还注意到，c^2 经过 Mathjax 渲染后变成了 $c^2$。没错，<code>^</code> 就是上标控制符，将紧随其后的字符变为上标。同理，<code>_</code> 就是下标控制符。<span class="f">\$C_4^1 * C^2_4\$</span> 将渲染为 $C_4^1 * C^2_4$。上下标没有先后顺序，都会附着到前一个全高字符上。</p><p>当表达『24 选 4』时，<span class="f">\$C_24^4\$</span> 却被渲染为了 $C_24^4$。规则是严格执行的，但结果却不是我们想要的。这时候需要用到花括号 <code>&#123;&#125;</code> 来控制上下标的范围，用 <span class="f">\$C_<code>&#123;</code>24<code>&#125;</code>^4\$</span> 就能正确渲染为 $C_{24}^4$ 了。</p><p><code>&#123;&#125;</code> 『分组符』不光能用于上下标，其用途如名字所言，是将若干 latex 表达式定义为一个组，以一个整体与表达式中其它部分作用。比如 <span class="f">\$1^{3^{5^{7^9}}}\$</span> $\Rightarrow$ $1^{3^{5^{7^9}}}$，就是先将 7^9 视为整体，作为 5 的上标，再以三者的组合作为整体，作为 3 的上标，以此类推直到完成这个叠幂公式。你甚至可以反过来，比如 <span class="f">\${{{1^3}^5}^7}^9\$</span> $\Rightarrow$ ${{{1^3}^5}^7}^9$。分组符的灵活应用是大型公式的基础之一。</p><blockquote><p>注意看两种不同的叠幂公式的渲染效果，有什么不同？为什么？</p></blockquote><p>$C_{24}^4$ 可以展开为 $(24 \cdot 23 \cdot 22 \cdot 21)&#x2F;(1 \cdot 2 \cdot 3 \cdot 4)$。即通项公式 $C_n^k &#x3D; \frac{1 \times 2 \times \dots \times k}{n (n-1) (n-2) (n-k+1)}$，其 Latex 表达式为 <span class="f">\$ C_n^k &#x3D; \frac{1 \times 2 \times \dots \times k}{n (n-1) (n-2) (n-k+1)} \$</span>。</p><p>从这里我们开始入门大型公式。上述分数的表达式是 <code>$\frac&#123;分子&#125;&#123;分母&#125;$</code>，在 <code>\frac</code> 后面，分子和分母的位置是固定的，分子在前，分母在后，与上下标有所不同。大括号 <code>&#123;&#125;</code> 则继续发挥分组的作用。在分子分母两组内部，我们又用了 <code>\times</code> 作为乘号，<code>\dots</code> 作为三点省略号。Mathjax 会自动识别空格，因此我们不必担心空格的问题，在源代码上添加空格可以使阅读与编辑更方便，有时也能避免一些 latex 的编译错误。</p><p>在初步掌握格式控制后，就可以展开阅读以下表格了：</p><table><thead><tr><th align="center">控制符</th><th align="center">作用</th><th align="left">效果</th><th align="center"></th><th align="center">控制符</th><th align="center">作用</th><th align="left">效果</th></tr></thead><tbody><tr><td align="center"><strong>^</strong></td><td align="center">上标</td><td align="left">2^3 $\Rightarrow$ $2^3$</td><td align="center"></td><td align="center"><strong>_</strong></td><td align="center">下标</td><td align="left">C_2 $\Rightarrow$ $ C_2$</td></tr><tr><td align="center">{ }</td><td align="center">分组</td><td align="left">1^{3^5} $\Rightarrow$ $1^{3^5}$</td><td align="center"></td><td align="center">\quad</td><td align="center">宽度 1em 的空格$^*$</td><td align="left">1 \quad 2 $\Rightarrow$ $1\quad 2$</td></tr><tr><td align="center">\frac</td><td align="center">上下分式</td><td align="left">\frac 1 2 $\Rightarrow$ $\frac 1 2$</td><td align="center"></td><td align="center">\over</td><td align="center">上下分式</td><td align="left">1 \over 2 $\Rightarrow$ $ {1\over2}$</td></tr><tr><td align="center">\sqrt</td><td align="center">根号</td><td align="left">\sqrt[3]{27} $\Rightarrow$ $\sqrt[3]{27}$</td><td align="center"></td><td align="center">\binom</td><td align="center">组合数</td><td align="left">\binom{4}{24} $\Rightarrow$ $\binom{4}{24}$</td></tr><tr><td align="center">\left(</td><td align="center">左大括号$^*$</td><td align="left">\left( \frac{4}{24} \right) $\Rightarrow$ $\left( \dfrac4{24} \right)$</td><td align="center">$\Leftrightarrow$</td><td align="center">\right)</td><td align="center">右大括号</td><td align="left">&lt;反例&gt; (\frac{4}{24}) $\Rightarrow$ $( \dfrac4{24} )$</td></tr><tr><td align="center">\left[</td><td align="center">左大方括号</td><td align="left">\left[ \frac{4}{24} \right] $\Rightarrow$ $\left[ \dfrac4{24} \right]$</td><td align="center">$\Leftrightarrow$</td><td align="center">\right]</td><td align="center">右大方括号</td><td align="left">&lt;反例&gt; [\frac{4}{24}] $\Rightarrow$ $[ \dfrac4{24} ]$</td></tr><tr><td align="center">\left\{</td><td align="center">左大方括号</td><td align="left">\left\{ \frac{4}{24} \right\} $\Rightarrow$ $\left\{\dfrac4{24}\right\}$</td><td align="center">$\Leftrightarrow$</td><td align="center">\right]</td><td align="center">右大方括号</td><td align="left">&lt;反例&gt; \{\frac{4}{24}\} $\Rightarrow$ $\{\dfrac4{24}\}$</td></tr></tbody></table><p>* 为兼容源代码的可读性，Latex 会忽略普通空格。因此在公式中需要添加额外空格时要用 \quad。后续排版环节会介绍更多距离控制符。<br>* 在所属代码块内，以最大上下范围为准，自动调整括号大小。</p><h3 id="转义字符与修饰符号"><a href="#转义字符与修饰符号" class="headerlink" title="转义字符与修饰符号"></a>转义字符与修饰符号</h3><p>在数学中我们会用到很多字符，比如圆周率 π，积分符号 ∫，无穷大 ∞，等等。归功于 unicode 的普及，我们可以直接从输入法的特殊字符输入，或者其它查码表的方式来输入这些字符，Mathjax 也都是支持的。但 Latex 出身甚早，自身也提供了一套转义字符以输入这些特殊字符，显示效果也更好。</p><h4 id="希腊字符"><a href="#希腊字符" class="headerlink" title="希腊字符"></a>希腊字符</h4><table><thead><tr><th align="center">小写希腊字符</th><th>Latex 转义</th><th align="center">Mathjax 效果</th><th></th><th align="center">大写希腊字符</th><th>Latex 转义</th><th>Mathjax 效果</th><th align="center">Unicode</th></tr></thead><tbody><tr><td align="center">α</td><td>\alpha</td><td align="center">$\alpha$</td><td></td><td align="center">Α</td><td>\Alpha</td><td>$\Alpha$</td><td align="center">x0391</td></tr><tr><td align="center">β</td><td>\beta</td><td align="center">$\beta$</td><td></td><td align="center">Β</td><td>\Beta</td><td>$\Beta$</td><td align="center">x0392</td></tr><tr><td align="center">γ</td><td>\gamma</td><td align="center">$\gamma$</td><td></td><td align="center">Γ</td><td>\Gamma</td><td>$\Gamma$</td><td align="center">x0393</td></tr><tr><td align="center">δ</td><td>\delta</td><td align="center">$\delta$</td><td></td><td align="center">Δ</td><td>\Delta</td><td>$\Delta$</td><td align="center">x0394</td></tr><tr><td align="center">ϵ</td><td>\epsilon</td><td align="center">$\epsilon$</td><td></td><td align="center">Ε</td><td>\Epsilon</td><td>$\Epsilon$</td><td align="center">x0395</td></tr><tr><td align="center">ζ</td><td>\zeta</td><td align="center">$\zeta$</td><td></td><td align="center">Ζ</td><td>\Zeta</td><td>$\Zeta$</td><td align="center">x0396</td></tr><tr><td align="center">η</td><td>\eta</td><td align="center">$\eta$</td><td></td><td align="center">Η</td><td>\Eta</td><td>$\Eta$</td><td align="center">x0397</td></tr><tr><td align="center">θ</td><td>\theta</td><td align="center">$\theta$</td><td></td><td align="center">Θ</td><td>\Theta</td><td>$\Theta$</td><td align="center">x0398</td></tr><tr><td align="center">ι</td><td>\iota</td><td align="center">$\iota$</td><td></td><td align="center">Ι</td><td>\Iota</td><td>$\Iota$</td><td align="center">x0399</td></tr><tr><td align="center">κ</td><td>\kappa</td><td align="center">$\kappa$</td><td></td><td align="center">Κ</td><td>\Kappa</td><td>$\Kappa$</td><td align="center">x039a</td></tr><tr><td align="center">λ</td><td>\lambda</td><td align="center">$\lambda$</td><td></td><td align="center">Λ</td><td>\Lambda</td><td>$\Lambda$</td><td align="center">x039b</td></tr><tr><td align="center">μ</td><td>\mu</td><td align="center">$\mu$</td><td></td><td align="center">Μ</td><td>\Mu</td><td>$\Mu$</td><td align="center">x039c</td></tr><tr><td align="center">ν</td><td>\nu</td><td align="center">$\nu$</td><td></td><td align="center">Ν</td><td>\Nu</td><td>$\Nu$</td><td align="center">x039d</td></tr><tr><td align="center">ξ</td><td>\xi</td><td align="center">$\xi$</td><td></td><td align="center">Ξ</td><td>\Xi</td><td>$\Xi$</td><td align="center">x039e</td></tr><tr><td align="center">ο</td><td>\omicron</td><td align="center">$\omicron$</td><td></td><td align="center">Ο</td><td>\Omicron</td><td>$\Omicron$</td><td align="center">x039f</td></tr><tr><td align="center">π</td><td>\pi</td><td align="center">$\pi$</td><td></td><td align="center">Π</td><td>\Pi</td><td>$\Pi$</td><td align="center">x03a0</td></tr><tr><td align="center">ρ</td><td>\rho</td><td align="center">$\rho$</td><td></td><td align="center">Ρ</td><td>\Rho</td><td>$\Rho$</td><td align="center">x03a1</td></tr><tr><td align="center">σ</td><td>\sigma</td><td align="center">$\sigma$</td><td></td><td align="center">Σ</td><td>\Sigma</td><td>$\Sigma$</td><td align="center">x03a3</td></tr><tr><td align="center">τ</td><td>\tau</td><td align="center">$\tau$</td><td></td><td align="center">Τ</td><td>\Tau</td><td>$\Tau$</td><td align="center">x03a4</td></tr><tr><td align="center">υ</td><td>\upsilon</td><td align="center">$\upsilon$</td><td></td><td align="center">Υ</td><td>\Upsilon</td><td>$\Upsilon$</td><td align="center">x03a5</td></tr><tr><td align="center">ϕ</td><td>\phi</td><td align="center">$\phi$</td><td></td><td align="center">Φ</td><td>\Phi</td><td>$\Phi$</td><td align="center">x03a6</td></tr><tr><td align="center">χ</td><td>\chi</td><td align="center">$\chi$</td><td></td><td align="center">Χ</td><td>\Chi</td><td>$\Chi$</td><td align="center">x03a7</td></tr><tr><td align="center">ψ</td><td>\psi</td><td align="center">$\psi$</td><td></td><td align="center">Ψ</td><td>\Psi</td><td>$\Psi$</td><td align="center">x03a8</td></tr><tr><td align="center">ω</td><td>\omega</td><td align="center">$\omega$</td><td></td><td align="center">Ω</td><td>\Omega</td><td>$\Omega$</td><td align="center">x03a9</td></tr></tbody></table><div id="GCLUE"></div>可以看到，希腊字母的转义就是它的英语名称前加反斜杠 `\`。大写希腊字母则首字母大写。同时也会注意到，不少大写的 Mathjax 渲染效果并不是西腊字符，而是<span class="red">将源码染红</span>了。<p>标红是因为 Mathjax 认为它是错误代码。标红错误代码有助于作者顺利进行排查，比如 $\fracc{k}{n(n-k)}$ 很容易便能看出来是 \frac 拼写错误。但为何 $\Alpha$ 是错误的呢？原因如下：</p><blockquote><p><a href="https://tex.stackexchange.com/a/111549">[引用]</a> There is no uppercase Alpha, Beta etc. deﬁned in LATEX2ε because it looks the same as a normal roman A, B.</p></blockquote><p>由于历史原因，Latex 以『形状相似』为由，没有定义几个与英文相似的大写希腊字母，包括 Α Β Ε Ζ Τ 等，遇到就报错，建议你用英文字母代替这几个大写希腊字符。所以 Mathjax 也跟着报错了。仔细想来，只是用于公式排版倒也差不多说得过去。只是极端节省到这地步，我的心情如下述评论：</p><blockquote><p><a href="https://math.meta.stackexchange.com/a/22051">[引用]</a> The fact that they actually bothered to make a capital tau symbol surprises me ...</p></blockquote><p>这种情况下，如果有必要输入正确的大写希腊字符，例如某些可能会被复制的场合。可以直接用输入法的特殊字符输入，或者用 Latex 后续版本扩展出来的 \unicode{} 方法，例如 <span class="f">\$\unicode{x0391} \neq \text{A}\$</span> $\Rightarrow$ $\unicode{x0391}\neq \text{A}$。</p><h4 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h4><p>Latex 定义了大量的符号，下表只列出了一小部分。大部分符号用不到就是不需要，知识领域没覆盖那部分。<a href="../attach/2024/01/symbols-a4.pdf">这里</a> 有一份号称完整的符号表，不过比起查书，问问 ChatGPT 也许更直接。</p><table><thead><tr><th align="center">效果</th><th>Latex</th><th align="center">效果</th><th>Latex</th><th align="center">效果</th><th>Latex</th><th align="center">效果</th><th>Latex</th></tr></thead><tbody><tr><td align="center">$\infty$</td><td>\infty</td><td align="center">$\aleph$</td><td>\aleph</td><td align="center">$\because$</td><td>\because</td><td align="center">$\therefore$</td><td>\therefore</td></tr><tr><td align="center">$\approx$</td><td>\approx</td><td align="center">$\neq$</td><td>\neq</td><td align="center">$\equiv$</td><td>\equiv</td><td align="center">$\mid$</td><td>\mid</td></tr><tr><td align="center">$\oplus$</td><td>\oplus</td><td align="center">$\pm$</td><td>\pm</td><td align="center">$\parallel$</td><td>\parallel</td><td align="center">$\nparallel$</td><td>\nparallel</td></tr><tr><td align="center">$\times$</td><td>\times</td><td align="center">$\div$</td><td>\div</td><td align="center">$\forall$</td><td>\forall</td><td align="center">$\exists$</td><td>\exists</td></tr><tr><td align="center">$\cup$</td><td>\cup</td><td align="center">$\cap$</td><td>\cap</td><td align="center">$\subset$</td><td>\subset</td><td align="center">$\supset$</td><td>\supset</td></tr><tr><td align="center">$\in$</td><td>\in</td><td align="center">$\notin$</td><td>\notin</td><td align="center">$\sum$</td><td>\sum</td><td align="center">$\prod$</td><td>\prod</td></tr><tr><td align="center">$\partial$</td><td>\partial</td><td align="center">$\int$</td><td>\int</td><td align="center">$\iint$</td><td>\iint</td><td align="center">$\oint$</td><td>\oint</td></tr><tr><td align="center">$\geq$</td><td>\geq</td><td align="center">$\leq$</td><td>\leq</td><td align="center">$\gg$</td><td>\gg</td><td align="center">$\ll$</td><td>\ll</td></tr><tr><td align="center">$\to$</td><td>\to</td><td align="center">$\gets$</td><td>\gets</td><td align="center">$\mapsto$</td><td>\mapsto</td><td align="center">$\leadsto$</td><td>\leadsto</td></tr><tr><td align="center">$\uparrow$</td><td>\uparrow</td><td align="center">$\upuparrows$</td><td>\upuparrows</td><td align="center">$\Uparrow$</td><td>\Uparrow</td><td align="center">$\downarrow$</td><td>\downarrow</td></tr><tr><td align="center">$\updownarrow$</td><td>\updownarrow</td><td align="center">$\leftrightarrow$</td><td>\leftrightarrow</td><td align="center">$\twoheadrightarrow$</td><td>\twoheadrightarrow</td><td align="center">$\xtwoheadrightarrow{abc}$</td><td>\xtwoheadrightarrow{abc}</td></tr><tr><td align="center">$\curvearrowleft$</td><td>\curvearrowleft</td><td align="center">$\curvearrowright$</td><td>\curvearrowright</td><td align="center">$\circlearrowleft$</td><td>\circlearrowleft</td><td align="center">$\circlearrowright$</td><td>\circlearrowright</td></tr><tr><td align="center">$\square$</td><td>\square</td><td align="center">$\triangle$</td><td>\triangle</td><td align="center">$\perp$</td><td>\perp</td><td align="center">$\angle$</td><td>\angle</td></tr><tr><td align="center">$\lim$</td><td>\lim</td><td align="center">$\log$</td><td>\log</td><td align="center">$\sin$</td><td>\sin</td><td align="center">$\cos$</td><td>\cos</td></tr></tbody></table><h4 id="特殊转义符"><a href="#特殊转义符" class="headerlink" title="特殊转义符"></a>特殊转义符</h4><p>我们使用 <code>$ ... $</code> 和 <code>$$ ... $$</code> 来包裹 Latex 表达式，用 <code>&#123;&#125;</code> 来分组包裹，用 <code>^_</code> 作为上下标。那么当我们需要在公式中直接显示这几个字符时，就需要额外添加转义符了。</p><table><thead><tr><th align="center">转义字符</th><th align="center">Latex 表示法</th><th align="center">Mathjax 效果</th><th>说明</th></tr></thead><tbody><tr><td align="center">$ _ { }</td><td align="center">\\$ \_ \{ \}</td><td align="center">\\{ \\_ \\\$ \\} $\Rightarrow$ $ \{ \_ \$ \}$</td><td>普通地添加 \ 前缀即可，{} 大括号本身也是公式常用字符。</td></tr><tr><td align="center">^</td><td align="center">\verb!^! $^*$</td><td align="center">3\verb!^!3&#x3D;27 $\Rightarrow$ $3\verb!^!3&#x3D;27$</td><td>\verb 可能在一些复杂公式中与其它控制符冲突。</td></tr><tr><td align="center">^</td><td align="center">^\wedge</td><td align="center">3^\wedge3&#x3D;27 $\Rightarrow$ $3^\wedge3&#x3D;27$</td><td>只是像，不是同一个字符。但<a href="#GCLUE">参考上文</a>，像有时就够了。</td></tr><tr><td align="center">\</td><td align="center">\backslash</td><td align="center">C:{\backslash}Windows $\Rightarrow$ $ C:{\backslash}Windows$</td><td>这里用到 { } 是因为要与 Windows 这个单词分开。</td></tr></tbody></table><p>* verb 是 verbatim 的简写，verbatim text 意为原始文本。\verb 的语法较为特殊，首先以 \verb 开头，然后紧接着一个<span class="green">界定符</span>，这个界定符可以是 ! | # 等各种符号任选，只需要与正文不冲突即可，再继续输入正文，最后再以相同的界定符结尾。两个界定符之间的内容将被原样输出，不会被 Mathjax 渲染。界定符甚至可以是数字，比如 <span class="f">\$\verb<span class="green">0</span>3^3<span class="green">0</span>\$</span> 将输出 $\verb03^30$，前后两个 0 成为了首尾界定符，但唯独不能是字母，因为会和 verb 本身形成新的单词短语导致解析错误，<span class="f">\$\verba3^3a\$</span> $\Rightarrow$ $\verba3^3a$。</p><h4 id="修饰符号"><a href="#修饰符号" class="headerlink" title="修饰符号"></a>修饰符号</h4><table><thead><tr><th align="center">效果</th><th>Latex</th><th align="center">效果</th><th>Latex</th><th align="center">效果</th><th>Latex</th><th align="center">效果</th><th>Latex</th></tr></thead><tbody><tr><td align="center">$\hat{abc}$</td><td>\hat{abc}</td><td align="center">$\widehat{abc}$</td><td>\widehat{abc}</td><td align="center">$\bar{abc}$</td><td>\bar{abc}</td><td align="center">$\overline{abc}$</td><td>\overline{abc}</td></tr><tr><td align="center">$\vec{abc}$</td><td>\vec{abc}</td><td align="center">$\overrightarrow{abc}$</td><td>\overrightarrow{abc}</td><td align="center">$\dot{abc}$</td><td>\dot{abc}</td><td align="center">$\ddot{abc}$</td><td>\ddot{abc}</td></tr><tr><td align="center">$\tilde{abc}$</td><td>\tilde{abc}</td><td align="center">$\widetilde{abc}$</td><td>\widetilde{abc}</td><td align="center">$\overbrace{abc}^n$</td><td>\overbrace{abc}^n</td><td align="center">$\underbrace{abc}_n$</td><td>\underbrace{abc}_n</td></tr></tbody></table><p>修饰符号的使用类似于函数，用 <code>&#123;&#125;</code> 将修饰对象包裹起来，修饰符号的位置总是相对于修饰对象进行调整，而与修饰对象在整个公式中的位置无关。</p><h3 id="从大型运算符到修饰命令"><a href="#从大型运算符到修饰命令" class="headerlink" title="从大型运算符到修饰命令"></a>从大型运算符到修饰命令</h3><p>我们在前面已经见到了 \sum \prod \int 等大型运算符，这些符号在公式中往往还配有上下限、积分定义域等算子与脚标。Mathjax 会自动根据行内或块内的场景来调整算子的大小和脚标的相对位置。比如 <span class="f">\$\sum_{i&#x3D;1}^n i^2 &#x3D; \frac {n(n+1)(2n+1)} 6\$</span> 将渲染为 $\sum_{i&#x3D;1}^n i^2 &#x3D; \frac {n(n+1)(2n+1)} 6$，而相同的公式在块内渲染为：</p><p>$$\sum_{i&#x3D;1}^n i^2 &#x3D; \frac {n(n+1)(2n+1)} 6$$</p><p>可以看到，$_{i&#x3D;1}$ 与 $^n$ 的位置随着不同的条件自动调整了。这种自动调整的机制在大型公式中非常有用，我们只需要关心公式的结构即可。但如果一定要坚持特定的格式，也可以用 \limits 和 \nolimits 来强制调整上下限的位置。比如 <span class="f">\$\sum<span class="green">\limits</span>_{i&#x3D;1}^n i^2 &#x3D; \frac {n(n+1)(2n+1)} 6\$</span> 将渲染为 $\sum\limits_{i&#x3D;1}^n i^2 &#x3D; \frac {n(n+1)(2n+1)} 6$。而<span class="f">\$\$\sum<span class="green">\nolimits</span>_{i&#x3D;1}^n i^2 &#x3D; \frac {n(n+1)(2n+1)} 6\$\$</span> 将渲染为：</p><p>$$\sum\nolimits_{i&#x3D;1}^n i^2 &#x3D; \frac {n(n+1)(2n+1)} 6$$</p><p><span class="green">\limits</span> 与 <span class="green">\nolimits</span> 没有自己的符号，但可以修饰很多带脚标的大形运算符，强制调整其形式，且只能用在运算符上。如果你用在别处，Mathjax 会报错。比如： <span class="f">\$C\limits_4^2\$</span> $\Rightarrow$ $C\limits_4^2$，报错了。我们期望的是 4 出现在 C 的下方，正确的实现方式是用下面的 \underset 命令：</p><table><thead><tr><th align="left"><div style="width:130px">修饰命令</div></th><th><div style="width:280px">作用</div></th><th>效果</th></tr></thead><tbody><tr><td align="left">\limits \nolimits</td><td>强制上下限以指定场景显示</td><td>上文已述</td></tr><tr><td align="left">\substack{}</td><td>创建一个多行块，整体通常作为上下标</td><td>\sum*{\substack{0&lt;i&lt;3\\\\0&lt;j&lt;5}}a*{ij} $\Rightarrow$ $\sum_{\substack{0&lt;i&lt;3\\0&lt;j&lt;5}}a_{ij}$</td></tr><tr><td align="left">\mathop{}</td><td>将 { }内的内容整体视作一个大型运算符</td><td>\mathop{\sum\sum}\limits_{i \neq j} (i *j) $\Rightarrow$ $\mathop{\sum\sum}\limits_{i \neq j} (i *j)$</td></tr><tr><td align="left">\mbox{}</td><td>{ } 内的文本不会断行，可能导致溢出</td><td>\mbox{ ... very long contnet ... } $\Rightarrow$ $$\mbox{Very very very very very very very long content in the mbox and there is no line break. }$$</td></tr><tr><td align="left">\sideset{}{}\prod</td><td>在 \prod 的左右边分别添加指定内容</td><td>\sideset{_1^2}{_3^4}\prod $\Rightarrow$ $\sideset{_1^2}{_3^4}\prod$</td></tr><tr><td align="left">\overset{A}{B}</td><td>在内容 B 的上方添加内容 A</td><td>2Cu+2Al\overset{\triangle}{&#x3D;}2Au+Cl_2\uparrow $\Rightarrow$ $2Cu+2Al\overset{\triangle}{&#x3D;}2Au+Cl_2\uparrow$</td></tr><tr><td align="left">\underset{A}{B}</td><td>在内容 B 的下方添加内容 A</td><td>\underset{probability}{P}(X&#x3D;x) &#x3D; \frac{1}{x}^2 $\Rightarrow$ $\underset{probability}{P}(X&#x3D;x) &#x3D; \frac{1}{x}^2$</td></tr></tbody></table><h3 id="多行公式组：矩阵，表格及其它"><a href="#多行公式组：矩阵，表格及其它" class="headerlink" title="多行公式组：矩阵，表格及其它"></a>多行公式组：矩阵，表格及其它</h3><h4 id="equation-与-cases"><a href="#equation-与-cases" class="headerlink" title="equation 与 cases"></a>equation 与 cases</h4><p>经过前面的铺垫，我们可以开始对公式进行组合了。公式组的基本形式是：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line">        x + y = 35 <span class="keyword">\\</span></span><br><span class="line">        2x + 4y = 94</span><br><span class="line">    <span class="keyword">\end</span>&#123;cases&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br>\begin{equation}<br>\begin{cases}<br>x + y &#x3D; 35 \\<br>2x + 4y &#x3D; 94<br>\end{cases}<br>\end{equation}</p><ul><li>多行公式组不需要以 <code>$ ... $</code> 包裹，但需要以 <code>\begin&#123;env&#125;</code> <code>\end&#123;env&#125;</code> 单独的首尾声明作为公式起止。<code>env</code> 则是由 latex 预先定义的一些环境，比如上面的 <code>equation</code> 就是一个环境。</li><li><code>equation</code> 环境的作用是将包裹的所有内容视作一个公式全局自动编号，编号的位置在公式组的最右侧。而 <code>cases</code> 环境的作用是为包裹的所有内容添加左大括号，形成一个公式组。</li><li>公式组内部仍可以用其它的公式控制符，比如 \frac \sum \int 等。</li><li>公式组内部通常都有多行，需要用 <code>\\</code> 来换行。Latex 源码的回车换行和空格一样会在渲染时忽略，多行 latext 公式组在源码上仍然可以只写成一行，<span class="f">\\begin{equation}\\begin{cases}x+y&#x3D;35\\\\2x+4y&#x3D;94\end{cases}\end{equation}</span> 的效果是一样的，但合理书写可以让源码可读性及可编辑性更高。</li><li><code>\begin&#123;env&#125;</code> <code>\end&#123;env&#125;</code> 是可以嵌套的，在上面的例子中，我们用了两个环境，在 equation 环境内部嵌套了 cases 环境，效果是将鸡兔同笼的两个二元一次方程合并成组，并做了全局编号。</li></ul><h4 id="align-与-align"><a href="#align-与-align" class="headerlink" title="align 与 align*"></a>align 与 align*</h4><p><code>align</code> 的作用是将每一个包裹的公式对齐，比较适合于表现演算过程。要注意的是，align 并不会自动以 $&#x3D;$ 对齐，而是要用 <code>&amp;</code> 指定竖向对齐位置。比如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;align&#125;</span><br><span class="line">    f(x) <span class="built_in">&amp;</span>= x<span class="built_in">^</span>4 + 4 <span class="keyword">\\</span></span><br><span class="line">         <span class="built_in">&amp;</span>= x<span class="built_in">^</span>4 + 4x<span class="built_in">^</span>2 + 4 - 4x<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line">         <span class="built_in">&amp;</span>= (x<span class="built_in">^</span>2 + 2)<span class="built_in">^</span>2 - (2x)<span class="built_in">^</span>2 <span class="keyword">\\</span></span><br><span class="line">         <span class="built_in">&amp;</span>= (x<span class="built_in">^</span>2 + 2x + 2)(x<span class="built_in">^</span>2 - 2x + 2)</span><br><span class="line"><span class="keyword">\end</span>&#123;align&#125;</span><br></pre></td></tr></table></figure><p>得到：<br>\begin{align}<br>f(x) &amp;&#x3D; x^4 + 4 \\<br>&amp;&#x3D; x^4 + 4x^2 + 4 - 4x^2 \\<br>&amp;&#x3D; (x^2 + 2)^2 - (2x)^2 \\<br>&amp;&#x3D; (x^2 + 2x + 2)(x^2 - 2x + 2)<br>\end{align}</p><p>可以看到，每个公式后面都加上了全局编号，如果不想要的话，可以用 <code>align*</code> 来代替 <code>align</code>，效果如下：</p><p>\begin{align*}<br>f(x) &amp;&#x3D; x^4 + 4 \\<br>&amp;&#x3D; x^4 + 4x^2 + 4 - 4x^2 \\<br>&amp;&#x3D; (x^2 + 2)^2 - (2x)^2 \\<br>&amp;&#x3D; (x^2 + 2x + 2)(x^2 - 2x + 2)<br>\end{align*}</p><p>同样的情况也适用于 <code>equation</code>，即无编号公式 <code>equation*</code>，不再演示。</p><h4 id="matrix-矩阵与省略号"><a href="#matrix-矩阵与省略号" class="headerlink" title="matrix 矩阵与省略号"></a>matrix 矩阵与省略号</h4><p><code>matrix</code> 环境用于矩阵排版，例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line">    a<span class="built_in">_</span>1 <span class="built_in">&amp;</span> b<span class="built_in">_</span>1 <span class="built_in">&amp;</span> c<span class="built_in">_</span>1 <span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>2 <span class="built_in">&amp;</span> b<span class="built_in">_</span>2 <span class="built_in">&amp;</span> c<span class="built_in">_</span>2 <span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>3 <span class="built_in">&amp;</span> b<span class="built_in">_</span>3 <span class="built_in">&amp;</span> c<span class="built_in">_</span>3</span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;</span><br></pre></td></tr></table></figure><p>\begin{matrix}<br>a_1 &amp; b_1 &amp; c_1 \\<br>a_2 &amp; b_2 &amp; c_2 \\<br>a_3 &amp; b_3 &amp; c_3<br>\end{matrix}<br>同样是用 <code>&amp;</code> 来进行上下对齐。上述渲染结果相比于常见的矩阵缺少了左右 $[ ]$，可以使用上文的 \left[ \right] 命令来添加：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\left</span>[</span><br><span class="line"><span class="keyword">\begin</span>&#123;matrix&#125;</span><br><span class="line">    a<span class="built_in">_</span>1 <span class="built_in">&amp;</span> b<span class="built_in">_</span>1 <span class="built_in">&amp;</span> c<span class="built_in">_</span>1 <span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>2 <span class="built_in">&amp;</span> b<span class="built_in">_</span>2 <span class="built_in">&amp;</span> c<span class="built_in">_</span>2 <span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>3 <span class="built_in">&amp;</span> b<span class="built_in">_</span>3 <span class="built_in">&amp;</span> c<span class="built_in">_</span>3</span><br><span class="line"><span class="keyword">\end</span>&#123;matrix&#125;</span><br><span class="line"><span class="keyword">\right</span>]<span class="built_in">$</span><span class="built_in">$</span>  <span class="comment">% 当内容放在 \begin \end 之外时，需要用 $ 或 $$ 包裹</span></span><br></pre></td></tr></table></figure><p>$$<br>\left[<br>\begin{matrix}<br>    a_1 &amp; b_1 &amp; c_1 \\<br>    a_2 &amp; b_2 &amp; c_2 \\<br>    a_3 &amp; b_3 &amp; c_3<br>\end{matrix}<br>\right]<br>$$</p><p>也可以用 <code>pmatrix</code> <code>bmatrix</code> <code>Bmatrix</code> <code>vmatrix</code> <code>Vmatrix</code> 等环境来代替 matrix，效果如下：<br>$$ \text{pmatrix:}\begin{pmatrix} a_1 &amp; b_1 \\ a_2 &amp; b_2 \end{pmatrix}, \text{bmatrix:}\begin{bmatrix} a_1 &amp; b_1 \\ a_2 &amp; b_2 \end{bmatrix}, \text{Bmatrix:}\begin{Bmatrix} a_1 &amp; b_1 \\ a_2 &amp; b_2 \end{Bmatrix},\text{vmatrix:}\begin{vmatrix} a_1 &amp; b_1 \\ a_2 &amp; b_2 \end{vmatrix}, \text{Vmatrix:}\begin{Vmatrix} a_1 &amp; b_1 \\ a_2 &amp; b_2 \end{Vmatrix}$$</p><p>另外还有一个 <code>smallmatrix</code> 环境，用于在行内排版小矩阵，如下： <span class="f">\$\left(\\begin{smallmatrix}a_1&amp;b_1\\\\a_2&amp;b_2\end{smallmatrix}\right)\$</span> $\Rightarrow$ $\left(\begin{smallmatrix} a_1 &amp; b_1 \\ a_2 &amp; b_2 \end{smallmatrix}\right)$，但它没有 \smallBmatrix 等变化形式，需要括号时用普通的即可。</p><p>当矩阵很大时，会使用省略号来代替部分内容：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;pmatrix&#125;</span><br><span class="line">    a<span class="built_in">_</span>&#123;11&#125; <span class="built_in">&amp;</span> a<span class="built_in">_</span>&#123;12&#125; <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>&#123;1n&#125; <span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>&#123;21&#125; <span class="built_in">&amp;</span> a<span class="built_in">_</span>&#123;22&#125; <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>&#123;2n&#125; <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\ddots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span> <span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>&#123;m1&#125; <span class="built_in">&amp;</span> a<span class="built_in">_</span>&#123;m2&#125; <span class="built_in">&amp;</span> <span class="keyword">\cdots</span> <span class="built_in">&amp;</span> a<span class="built_in">_</span>&#123;mn&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;pmatrix&#125;</span><br></pre></td></tr></table></figure><p>\begin{pmatrix}<br>a*{11} &amp; a*{12} &amp; \cdots &amp; a*{1n} \\<br>a*{21} &amp; a*{22} &amp; \cdots &amp; a*{2n} \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>a*{m1} &amp; a*{m2} &amp; \cdots &amp; a_{mn}<br>\end{pmatrix}</p><p>我们上文用过 \dots，此处又使用了 \cdots \vdots \ddots 等命令来输出省略号，可以认为前缀字母 c &#x3D; center，v &#x3D; vertical，d &#x3D; diagonal，分别表示水平、垂直、对角线方向。另外还有 \ldots，l &#x3D; lower 表示靠近底线的省略号。</p><h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><p><code>array</code> 可以起到与 <code>matrix</code> 一致的效果，但可以容纳更多的修饰或控制符使得表现效果更丰富，当然也意味着更多的 latex 代码量和复杂度。因为可以添加横竖线作为表格边框，array 一般用来表现表格：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;array&#125;&#123;c|lcr&#125;</span><br><span class="line">    n <span class="built_in">&amp;</span> 左对齐 <span class="built_in">&amp;</span> 居中对齐                         <span class="built_in">&amp;</span> 右对齐 <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\hline</span>    <span class="comment">% 横线不占用行高，不必添加 \\ 换行</span></span><br><span class="line">    1 <span class="built_in">&amp;</span> <span class="keyword">\pi</span>   <span class="built_in">&amp;</span> rad                              <span class="built_in">&amp;</span> 355/113 <span class="keyword">\\</span></span><br><span class="line">    2 <span class="built_in">&amp;</span> e     <span class="built_in">&amp;</span> &#123;<span class="keyword">\left</span>(1+<span class="keyword">\frac</span>&#123;1&#125;&#123;n&#125;<span class="keyword">\right</span>)&#125;<span class="built_in">^</span>n   <span class="built_in">&amp;</span> <span class="keyword">\ln</span> x <span class="keyword">\\</span></span><br><span class="line">    3 <span class="built_in">&amp;</span> i     <span class="built_in">&amp;</span> <span class="keyword">\sqrt</span>&#123;-1&#125;                        <span class="built_in">&amp;</span> sin(<span class="keyword">\theta</span>)+icos(<span class="keyword">\theta</span>)</span><br><span class="line"><span class="keyword">\end</span>&#123;array&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p>$$<br>\begin{array}{c|lcr}<br>    n &amp; 左对齐 &amp; 居中对齐                         &amp; 右对齐 \\<br>    \hline<br>    1 &amp; \pi   &amp; rad                              &amp; 355&#x2F;113 \\<br>    2 &amp; e     &amp; {\left(1+\frac{1}{n}\right)}^n   &amp; \ln x \\<br>    3 &amp; i     &amp; \sqrt{-1}                        &amp; sin(\theta)+icos(\theta)<br>\end{array}<br>$$</p><p>代码首行 \begin{array}{c|lcr} 中的 <code>&#123;c|lcr&#125;</code> 部分是 array 环境的参数，用于指定每一列的对齐方式，c &#x3D; center，l &#x3D; left，r &#x3D; right，| 表示添加竖线作为列分隔符，可以不添加也可以添加多条。在内容部分，用 <code>&amp;</code> 来对齐各列，用 <code>\\</code> 来换行。用 \hline 添加横线，会自动置入两行之间，不影响文本的行高，也不必添加 \ 换行。</p><p>{array}也同样可以配合 \left{ \right} 来构造方程组，一些形式上要求齐次对齐的方程组，使用 array 会比较方便：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\left</span><span class="keyword">\\</span>&#123;</span><br><span class="line">    <span class="keyword">\begin</span>&#123;array&#125;&#123;lrrrrr&#125;</span><br><span class="line">        f<span class="built_in">_</span>1(x) = <span class="built_in">&amp;</span>      <span class="built_in">&amp;</span>       <span class="built_in">&amp;</span>       <span class="built_in">&amp;</span> x   <span class="built_in">&amp;</span> +1 <span class="keyword">\\</span></span><br><span class="line">        f<span class="built_in">_</span>2(x) = <span class="built_in">&amp;</span>      <span class="built_in">&amp;</span>       <span class="built_in">&amp;</span> 8x<span class="built_in">^</span>2  <span class="built_in">&amp;</span> +5x <span class="built_in">&amp;</span> +2 <span class="keyword">\\</span></span><br><span class="line">        f<span class="built_in">_</span>3(x) = <span class="built_in">&amp;</span>      <span class="built_in">&amp;</span> 3x<span class="built_in">^</span>3  <span class="built_in">&amp;</span> +7x<span class="built_in">^</span>2 <span class="built_in">&amp;</span> +2x <span class="built_in">&amp;</span> +9 <span class="keyword">\\</span></span><br><span class="line">        f<span class="built_in">_</span>4(x) = <span class="built_in">&amp;</span> 9x<span class="built_in">^</span>4 <span class="built_in">&amp;</span> +3x<span class="built_in">^</span>3 <span class="built_in">&amp;</span>       <span class="built_in">&amp;</span> +4x <span class="built_in">&amp;</span> +6</span><br><span class="line">    <span class="keyword">\end</span>&#123;array&#125;</span><br><span class="line"><span class="keyword">\right</span>.<span class="built_in">$</span><span class="built_in">$</span> <span class="comment">% 有 \left\&#123; 时，必须要有对应的右括号闭合。但可以用 \right. 放一个不显示内容的右括号。</span></span><br></pre></td></tr></table></figure><p>$$<br>\left\{<br>    \begin{array}{lrrrrr}<br>        f_1(x) &#x3D; &amp;      &amp;       &amp;       &amp; x   &amp; +1 \\<br>        f_2(x) &#x3D; &amp;      &amp;       &amp; 8x^2  &amp; +5x &amp; +2 \\<br>        f_3(x) &#x3D; &amp;      &amp; 3x^3  &amp; +7x^2 &amp; +2x &amp; +9 \\<br>        f_4(x) &#x3D; &amp; 9x^4 &amp; +3x^3 &amp;       &amp; +4x &amp; +6<br>    \end{array}<br>\right.<br>$$</p><h3 id="公式引用"><a href="#公式引用" class="headerlink" title="公式引用"></a>公式引用</h3><h4 id="tag-label-与-eqref"><a href="#tag-label-与-eqref" class="headerlink" title="\tag \label 与 \eqref"></a>\tag \label 与 \eqref</h4><p>公式引用分为被引用，和引用别人的。虽然使用 \begin{equation} 等环境可以自动编号，但却无法直接根据该编号引用对应的公式。在 Latex 中引用公式，必须满足两个条件：</p><ol><li>被引用的公式必须是块公式，行内公式不能被引用。</li><li>被引用的公式必须显式地声明一个 label，用于引用的锚点，语法为 \label{labelname}。</li></ol><p>公式也可以用 \tag{equationname} 来修改默认的全局编号名，但并非必须。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;ef&#125;</span><br><span class="line">    <span class="keyword">\tag</span>&#123;Euler&#x27;s Formula&#125;    <span class="comment">% 自定义公式名，非必须</span></span><br><span class="line">    e<span class="built_in">^</span>&#123;i<span class="keyword">\pi</span>&#125; + 1 = 0</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure><p>\begin{equation}<br>\label{ef}<br>\tag{Euler&#39;s Formula}<br>e^{i\pi} + 1 &#x3D; 0<br>\end{equation}</p><p>在上面的例子中，我们为欧拉公式添加了一个 label <code>ef</code>。如果我们想要引用这个公式，可以使用 \eqref{<code>ef</code>} 命令，引用时则不限于是否是块公式，也不限于是否有 \tag{tagname}，例如：</p><p><span class="f">\$e^{i\theta}\overset{\\eqref{ef}}{&#x3D;}cos\theta+isin\theta\$</span> $\Rightarrow$ $e^{i\theta}\overset{\eqref{ef}}{&#x3D;}cos\theta+isin\theta$。</p><p>可以看到，引用的锚点是 \label{labelname} $\Rightarrow$ \\eqref{ labelname}，而在 \eqref 处显示的则是由 \tag{equationname} 设定的公式名称。labelname 可以是几乎任意字符串，在各种教程中经常出现的 \label{eq:1} 主要是为了方便管理，取『equation No.1』之意。上面的 ef 也是 Euler&#39;s Formula 的缩写。使用 \label 的好处在于，当我们在后续编辑排版时，即使公式的编号变了，引用的地方也会自动更新，因为引用的锚点是固定的。这也是为什么要分别定义 \label 和 \tag 的原因。</p><h4 id="ref-与-href"><a href="#ref-与-href" class="headerlink" title="\ref 与 \href"></a>\ref 与 \href</h4><p>在完整的 latex 中，\ref 与 \eqref 稍有不同，后者是前者子集。但对于 Mathjax 这种限于网页展示的场合，两者并没有什么不同。根据 <a href="https://math.meta.stackexchange.com/a/11491">这里</a> 的说明，\ref 还能引用外链，但我没有尝试成功，可能是 Mathjax 的限制。本来，在 Markdown 博客中引用外链有更简单的方式：<code>[文字](链接地址)</code>，但如果非得拧巴一下，也可以用 \href{链接地址}{文字} 来实现：</p><p>$\href{<a href="https://www.kaikai.men/latex-syntax-mathjax/%7D%7B%E6%9C%AC%E6%96%87%E5%9C%B0%E5%9D%80%7D$">https://www.kaikai.men/latex-syntax-mathjax/}{本文地址}$</a> $\Rightarrow$ $\href{https://www.kaikai.men/latex-syntax-mathjax/}{本文地址}$</p><h3 id="打印控制"><a href="#打印控制" class="headerlink" title="打印控制"></a>打印控制</h3><p>Latex 会自动调整公式的大小和排版，但有时候我们也需要适当地调整一下字体字号、空隙间距等，以达到更好的排版效果。这里介绍一些常用的控制命令。</p><h4 id="空格间距"><a href="#空格间距" class="headerlink" title="空格间距"></a>空格间距</h4><div style="width:720px"><table><thead><tr><th align="left"><div style="width:100px">Latex 源码</div></th><th align="left"><div style="width:100px">效果</div></th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">ab</td><td align="left">$ab$</td><td align="left">ab 间无空格</td></tr><tr><td align="left">a b</td><td align="left">$a b$</td><td align="left">a b 间有空格，无效</td></tr><tr><td align="left">a\ b</td><td align="left">$a\ b$</td><td align="left">使用 \ 转义的空格，有效</td></tr><tr><td align="left">a\ &nbsp;b</td><td align="left">$a\  b$</td><td align="left">第二空格未转义，无效</td></tr><tr><td align="left">a\ \ b</td><td align="left">$a\ \ b$</td><td align="left">两个\ 转义的空格，有效</td></tr><tr><td align="left">a\quad b</td><td align="left">$a\quad b$</td><td align="left">quad 为 1em，一般相当于三个空格</td></tr><tr><td align="left">a\qquad b</td><td align="left">$a\qquad b$</td><td align="left">qquad 为 2em</td></tr><tr><td align="left">a\,b</td><td align="left">$a\,b$</td><td align="left">半个空格</td></tr><tr><td align="left">a\:b</td><td align="left">$a\:b$</td><td align="left">2&#x2F;3 个空格</td></tr><tr><td align="left">a\;b</td><td align="left">$a\;b$</td><td align="left">5&#x2F;6 个空格</td></tr><tr><td align="left">a\!b</td><td align="left">$a\!b$</td><td align="left">负向半个空格，常用于绘制长等号，如： &#x3D;\!&#x3D;\!&#x3D; $\Rightarrow$ $&#x3D;\!&#x3D;\!&#x3D;$</td></tr></tbody></table></div><h4 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h4><p>公式组的多行之间通过 \\\\ 分隔，在分隔符后面可以添加下方行距，允许小数点，如下：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;cases&#125;</span><br><span class="line">    x + y = 35 <span class="keyword">\\</span>[15pt]</span><br><span class="line">    2x + 4y = 94 <span class="keyword">\\</span>[1.5em]</span><br><span class="line">    x = 23, y = 12</span><br><span class="line"><span class="keyword">\end</span>&#123;cases&#125;</span><br></pre></td></tr></table></figure><p>\begin{cases}<br>x + y &#x3D; 35 \\[15pt]<br>2x + 4y &#x3D; 94 \\[1.5em]<br>x &#x3D; 23, y &#x3D; 12<br>\end{cases}</p><h4 id="字形字号"><a href="#字形字号" class="headerlink" title="字形字号"></a>字形字号</h4><table><thead><tr><th align="center">字形</th><th>Latex</th><th align="center">效果</th><th align="center">字体</th><th>Latex</th><th align="center">效果</th><th align="center">字体</th><th>Latex</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">Roman 正体</td><td>\rm E</td><td align="center">$\rm E$</td><td align="center">Italic 斜体</td><td>\it E</td><td align="center">$\it E$</td><td align="center">Bold 黑体</td><td>\bf E</td><td align="center">$\bf E$</td></tr><tr><td align="center">Calligraphic 草书</td><td>\cal E</td><td align="center">$\cal E$</td><td align="center">Fraktur 尖角体</td><td>\frak E</td><td align="center">$\frak E$</td><td align="center">Blackboard Bold 黑板粗体</td><td>\Bbb E</td><td align="center">$\Bbb E$</td></tr><tr><td align="center">Sans-serif 无衬线体</td><td>\sf E</td><td align="center">$\sf E$</td><td align="center">Typewriter 等宽</td><td>\tt E</td><td align="center">$\tt E$</td><td align="center">Script 花体</td><td>\scr E</td><td align="center">$\scr E$</td></tr></tbody></table><table><thead><tr><th align="center">字号</th><th>Latex</th><th align="center">效果</th><th align="center">字号</th><th>Latex</th><th align="center">效果</th><th align="center">字号</th><th>Latex</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">tiny</td><td>\tiny E</td><td align="center">$\tiny E$</td><td align="center">scriptsize</td><td>\scriptsize E</td><td align="center">$\scriptsize E$</td><td align="center">small</td><td>\small E</td><td align="center">$\small E$</td></tr><tr><td align="center">normalsize</td><td>\normalsize E</td><td align="center">$\normalsize E$</td><td align="center">large</td><td>\large E</td><td align="center">$\large E$</td><td align="center">Large</td><td>\Large E</td><td align="center">$\Large E$</td></tr><tr><td align="center">LARGE</td><td>\LARGE E</td><td align="center">$\LARGE E$</td><td align="center">huge</td><td>\huge E</td><td align="center">$\huge E$</td><td align="center">Huge</td><td>\Huge E</td><td align="center">$\Huge E$</td></tr></tbody></table><h4 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h4><p>Mathjax 使用 \color{colorname} 命令来设置字体颜色，colorname 可以是预定义的颜色名，也可以是 RGB 值。比如 <span class="f">\$\color{red} E\$</span> $\Rightarrow$ $\color{red} E$。预定义的颜色名参考 <a href="https://www.w3.org/TR/css-color-3/#svg-color">这里</a>，摘抄一部分如下：</p><p>$\color{aqua}{aqua}$ $\color{black}{black}$ $\color{blue}{blue}$ $\color{blueviolet}{blueviolet}$ $\color{brown}{brown}$ $\color{burlywood}{burlywood}$ $\color{cadetblue}{cadetblue}$ $\color{chocolate}{chocolate}$ $\color{coral}{coral}$ $\color{cornflowerblue}{cornflowerblue}$ $\color{crimson}{crimson}$ $\color{cyan}{cyan}$ $\color{darkblue}{darkblue}$ $\color{darkcyan}{darkcyan}$ $\color{darkgoldenrod}{darkgoldenrod}$ $\color{darkgray}{darkgray}$ $\color{darkgreen}{darkgreen}$ $\color{darkkhaki}{darkkhaki}$ $\color{deeppink}{deeppink}$ $\color{deepskyblue}{deepskyblue}$ $\color{dimgrey}{dimgrey}$ $\color{firebrick}{firebrick}$ $\color{forestgreen}{forestgreen}$ $\color{fuchsia}{fuchsia}$ $\color{gainsboro}{gainsboro}$ $\color{gold}{gold}$ $\color{goldenrod}{goldenrod}$ $\color{gray}{gray}$ $\color{green}{green}$ $\color{greenyellow}{greenyellow}$ $\color{grey}{grey}$ $\color{hotpink}{hotpink}$ $\color{indianred}{indianred}$ $\color{indigo}{indigo}$ $\color{lightblue}{lightblue}$ $\color{lightcoral}{lightcoral}$ $\color{lightsalmon}{lightsalmon}$ $\color{lightseagreen}{lightseagreen}$ $\color{lightskyblue}{lightskyblue}$ $\color{lime}{lime}$ $\color{limegreen}{limegreen}$ $\color{magenta}{magenta}$ $\color{maroon}{maroon}$ $\color{navy}{navy}$ $\color{olive}{olive}$ $\color{orange}{orange}$ $\color{orangered}{orangered}$ $\color{orchid}{orchid}$ $\color{peru}{peru}$ $\color{pink}{pink}$ $\color{plum}{plum}$ $\color{purple}{purple}$ $\color{red}{red}$ $\color{salmon}{salmon}$ $\color{silver}{silver}$ $\color{teal}{teal}$ $\color{thistle}{thistle}$ $\color{tomato}{tomato}$ $\color{turquoise}{turquoise}$ $\color{violet}{violet}$ $\color{yellow}{yellow}$ $\color{yellowgreen}{yellowgreen}$</p><p>如果使用 RGB，格式为 \color{#rrggbb} 或缩写的 \color{#rgb}，其中 rgb 为 0-f 的十六进制数。</p><p>这里有一个新的注意点，在下一节中介绍。</p><h4 id="宏定义与扩展包"><a href="#宏定义与扩展包" class="headerlink" title="宏定义与扩展包"></a>宏定义与扩展包</h4><p>Mathjax 不支持宏与扩展。Latex 本身提供了很多扩展功能，但 Mathjax 仅仅是一个 JS 库，它并不是完整的 Latex。如果需要使用这些功能，需要在 Latex 编译器中进行。</p><p>在这里记一笔，是因为在搜索某个效果的 Latex 语法时，往往会遇到一些使用扩展功能的回答，那些回答不适用于 Mathjax，需要注意。</p><h2 id="与-Markdown-和-Hexo-的冲突处理"><a href="#与-Markdown-和-Hexo-的冲突处理" class="headerlink" title="与 Markdown 和 Hexo 的冲突处理"></a>与 Markdown 和 Hexo 的冲突处理</h2><p>这个博客是 Hexo 搭建，加载了 Hexo Next 主题。使用 Markdown 语法在文本文件中编写博客，由 Hexo 将其编译为 HTML 文件，而 Mathjax 则在 HTML 文件中渲染 Latex 公式。而 Hexo 本身也有自己的模板语法，这使得我们编写的内容，需要经过 Hexo 编译，Markdown 编译，再由 Mathjax 渲染，最后才能在浏览器中显示。这样的多重编译过程，使得我们在写文章时，需要额外考虑一些情况。</p><h3 id="Hexo-处理"><a href="#Hexo-处理" class="headerlink" title="Hexo 处理"></a>Hexo 处理</h3><p>使用 <code>{% raw %} ... {% endraw %}</code> 避免 Hexo 模板语法带来的问题。所有 {% raw %} ... {% endraw %} 两者之间的内容都不会被 Hexo 进一步解释，而是进入 Markdown 解释器层进行下一步处理。</p><p>在使用 \color{#rrggbb} 语法时就会遇到相关问题，<code>{#</code> 会被 Hexo 识别，但又不属于合法的模板语法，导致 Hexo 编译失败报错。相似的情况还出现在 <code>&#123;&#125;</code> 的嵌套场景下，连续的 {{{ 也会被视为错误的 Hexo 模板语法。因此，我们需要用 {% raw %} ... {% endraw %} 来避免这些问题。</p><h3 id="Markdown-处理"><a href="#Markdown-处理" class="headerlink" title="Markdown 处理"></a>Markdown 处理</h3><p>Markdown 语法中，\ 也是转义字符，用于输出特殊字符，比如 \# $\Rightarrow$ # ,\* $\Rightarrow$ * 等。因为 #、*、_ 等字符在 Markdown 中是有意义的（用于标题、列表、强调等），因此需要用 \ 转义。所以为了在 Markdown 处理完以后还能保留 \，我们在写文章时就需要有意地写成 \\\\。</p><p>此外，Markdown 本身也会有意地忽略多余的空格，因此如果需要将多个空格传递给 html，需要使用 &amp;nbsp; 来转义。所幸 &amp;nbsp; 只要隔开连续的空格，每个空格包括 &amp;nbsp; 都会保留，因此可以与空格交替写来省点事。</p><h3 id="Mathjax-处理"><a href="#Mathjax-处理" class="headerlink" title="Mathjax 处理"></a>Mathjax 处理</h3><p>在经过 Markdown 编译后，原始文章已经变成了 HTML 文件。此时 Mathjax 会搜索全文中的 Latex 相关语法，将其渲染为对应的公式。但是由于 Mathjax 也将 \$ 等符号视作特殊字符，因此仍然会再进行一次转义。比如 HTML 中如果有一个『\\\$』，会被 Mathjax 认为是 \$ 符号的转义符，因此会消除 \\，单显示一个 $ 符号。</p><p>与此相似的，还有为了在 Mathjax 渲染后还能正常显示 \\\\ （两个反斜杠），我们在源文件中需要写成惊人的八条反斜杠：\\\\\\\\\\\\\\\\。在 Markdown 编译时，每两条 \\ 会被解释为一条有效的反斜杠，因此在 HTML 文件中会生成连续的四条反斜杠。而 Mathjax 会在 HTML 呈现的内容基础上再作渲染，再一次将每两条反斜杠编译为一条有效的反斜杠，因此最终显示的是两条反斜杠。</p><p>如果能及时注意到 Mathjax 是在页面的 HTML 上再次渲染，就能很好地理解这个过程。</p><h2 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h2><p>本文到这里就差不多尾声了。Mathjax 是为网页提供 latex 公式渲染的 JS 库，并不拥有 latex 的全部功能。Latex 有很多全页排版、宏定义与扩展包，包括自定义命令、环境等功能，在 Mathjax 里是没有的。</p><p>本文的目的是为了介绍 Mathjax 的基本语法，以及与 Markdown 和 Hexo 的冲突处理。如果需要更多的功能，可以参考下面的参考资料。</p><p>Mathjax 的官方文档：<a href="https://docs.mathjax.org/en/latest/index.html">https://docs.mathjax.org/en/latest/index.html</a></p><p>Mathjax 的官方示例：<a href="https://docs.mathjax.org/en/latest/web/start.html#mathjax-cdn">https://docs.mathjax.org/en/latest/web/start.html#mathjax-cdn</a></p><p>Latex 编辑器：<a href="https://www.xm1math.net/texmaker/">TEXMaker</a></p><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/5044">MathJax basic tutorial and quick reference</a></p><p><a href="https://www.rollpie.com/post/471">LaTeX Grammar List @rollpie</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;style &gt;
.red {
    color: red;
}
.green {
    color: green;
}
.f{
    border-bottom: 1px solid #333;
    padding-bottom: 2px;
    font-size</summary>
      
    
    
    
    <category term="软件使用" scheme="https://www.kaikai.men/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="Hexo Next" scheme="https://www.kaikai.men/tags/Hexo-Next/"/>
    
    <category term="Mathjax" scheme="https://www.kaikai.men/tags/Mathjax/"/>
    
    <category term="Latex" scheme="https://www.kaikai.men/tags/Latex/"/>
    
    <category term="Latex Syntax" scheme="https://www.kaikai.men/tags/Latex-Syntax/"/>
    
    <category term="Latex 语法" scheme="https://www.kaikai.men/tags/Latex-%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>通过 DisqusJS 添加 Disqus 评论系统</title>
    <link href="https://www.kaikai.men/disqusjs-installation/"/>
    <id>https://www.kaikai.men/disqusjs-installation/</id>
    <published>2023-12-28T15:30:40.000Z</published>
    <updated>2025-08-30T14:15:58.637Z</updated>
    
    <content type="html"><![CDATA[<p>在博客访问者无法直连 Disqus 时，有个 DisqusJS 的劣化替代方案可供博主使用。方案内置在 Hexo Next 主题中，在正确配置第三方反向代理后，博客可向游客展示评论，但游客无法参与讨论。</p><p>这种方案的效果如本文底部评论区所示。该方案需要在三个地方进行配置，分别是 Disqus 服务提供方（需科学上网）、代理端（本文为 Cloudflare 云函数），以及 Hexo Next 配置文件（本地），没有先后顺序。</p><h2 id="Disqus"><a href="#Disqus" class="headerlink" title="Disqus"></a>Disqus</h2><p>先 <a href="https://disqus.com/profile/signup/intent/">注册 Disqus 账号</a>。注册后，点击首页的『GET STARTED』，并选择『I want to install Disqus on my site』选项。</p><p>下一页，只有 <code>Shortname</code> 会在后续的配置中用到，其余随便选。<br>下一页，付费页面下拉选择 Basic 免费计划。<br>下一页，出现 Installation 界面就可以关闭了，因为 Hexo Next 已经内置，不需要手动安装。左侧菜单其它的审核策略等选项都可以后续有需要再设置。</p><p>然后 <a href="https://disqus.com/api/applications/register">注册 Disqus API 应用</a>。<br>第一页，都随便填，<code>Label</code> 填个自己能看懂的名字，方便后续管理。网址格式要正确。填完以后点『Register my application』<br>下一页，Settings 下的 <code>Domains</code> 填上博客网址，不用加 http&#x2F;https 协议前缀。Disqus 后续会用来匹配 referer。填完后点『Save Changes』<br>保存以后切换到『Details』页面，把 <code>Public Key</code> 的一长串字符复制下来，后续会用到。</p><h2 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h2><blockquote><p>假设你已经有了 Cloudflare 账号，并且有一个由 Cloudflare 管理的域名。</p></blockquote><p>登录 <a href="https://workers.cloudflare.com/">Cloudflare 云函数平台</a>，Login。<br>下一页，点击右上角『Create a Worker』，下一页点击『创建 Worker』，下一页起个名 <code>worker name</code> 后续管理要用，点右下角部署。<br>下一页，『配置 Worker』。<br>下一页，右上角『快速编辑』，复制下面代码，粘贴后点右上角『保存并部署』。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">proxy</span>(event));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">proxy</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getReqHeader</span> = (<span class="params">key</span>) =&gt; event.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(event.<span class="property">request</span>.<span class="property">url</span>);</span><br><span class="line">  url.<span class="property">hostname</span> = <span class="string">&quot;disqus.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> parameter = &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;disqus.com&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;User-Agent&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Language&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="title function_">getReqHeader</span>(<span class="string">&quot;Accept-Encoding&quot;</span>),</span><br><span class="line">      <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">has</span>(<span class="string">&quot;Referer&quot;</span>)) &#123;</span><br><span class="line">    parameter.<span class="property">headers</span>.<span class="property">Referer</span> = <span class="title function_">getReqHeader</span>(<span class="string">&quot;Referer&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">has</span>(<span class="string">&quot;Origin&quot;</span>)) &#123;</span><br><span class="line">    parameter.<span class="property">headers</span>.<span class="property">Origin</span> = <span class="title function_">getReqHeader</span>(<span class="string">&quot;Origin&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(url, event.<span class="property">request</span>), parameter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代码来自 [idawnlight](https://github.com/idawnlight/disqusjs-proxy-cloudflare-workers)</span></span><br></pre></td></tr></table></figure><p>下一页，点击仪表上 『Custom Domains』下面 『0』右边的『查看』，随后点击右上角『添加自定义域』。<br>建议填入 disqus.&lt;你自己拥有的域名&gt;，点击『保存』。这是 <code>cloudflare worker domain</code>，后续会用到。<br>如果你没有自定义域名，也可以用默认的。默认的在仪表上『预览』位置处，格式为 <code>&lt;workername&gt;.&lt;你的cloudflare 帐号名&gt;.worker.dev</code>。</p><p>点击『添加自定义域』，Cloudflare 的配置完成。需要等几分钟生效。期间可以先配置 Hexo Next。</p><h2 id="Hexo-Next"><a href="#Hexo-Next" class="headerlink" title="Hexo Next"></a>Hexo Next</h2><p>编辑 <strong>_config.next.yml</strong> 文件，找到 <code>comments</code> <code>disqus</code> <code>disqusjs</code> 三个配置项，修改内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">disqusjs</span>    <span class="comment"># 这里用 disqusjs 代替了 disqus</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">nav:</span></span><br><span class="line">        <span class="attr">disqusjs:</span>       <span class="comment"># 这里用 disqusjs 代替了 disqus</span></span><br><span class="line">          <span class="attr">text:</span> <span class="string">Load</span> <span class="string">DisqusJS</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span>       <span class="comment"># 这里改为 false，关闭原始的 Disqus</span></span><br><span class="line">    <span class="attr">shortname:</span> </span><br><span class="line">    <span class="attr">count:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># DisqusJS</span></span><br><span class="line"><span class="attr">disqusjs:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>        <span class="comment"># 这里改为 true，启用 DisqusJS</span></span><br><span class="line">    <span class="attr">api:</span>  <span class="string">https://&lt;cloudflare</span> <span class="string">worker</span> <span class="string">domain&gt;/api/</span>   <span class="comment"># 这里填 Cloudflare 云函数的域名，注意还要加上 /api/ 后缀</span></span><br><span class="line">    <span class="attr">apikey:</span>  <span class="string">&lt;API</span> <span class="string">key&gt;</span>                              <span class="comment"># 这里填 Disqus 提供的 public key</span></span><br><span class="line">    <span class="attr">shortname:</span> <span class="string">&lt;shortname&gt;</span>                          <span class="comment"># 这里填 Disqus 注册时的 shortname</span></span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>本地，或编译后在服务器端打开页面，都可以看到评论区。自行留言后断开科学上网，刷新页面看有没有更新即可。或者用 Cloudflare 的云函数计数是否增加也可以。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在博客访问者无法直连 Disqus 时，有个 DisqusJS 的劣化替代方案可供博主使用。方案内置在 Hexo Next 主题中，在正确配置第三方反向代理后，博客可向游客展示评论，但游客无法参与讨论。&lt;/p&gt;
&lt;p&gt;这种方案的效果如本文底部评论区所示。该方案需要在三个地方</summary>
      
    
    
    
    <category term="代码脚本" scheme="https://www.kaikai.men/categories/%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="DisqusJS" scheme="https://www.kaikai.men/tags/DisqusJS/"/>
    
    <category term="Disqus" scheme="https://www.kaikai.men/tags/Disqus/"/>
    
    <category term="Comments" scheme="https://www.kaikai.men/tags/Comments/"/>
    
    <category term="Cloudflare" scheme="https://www.kaikai.men/tags/Cloudflare/"/>
    
  </entry>
  
  <entry>
    <title>Surface Go 4 好像是个不错的 Galgame 设备</title>
    <link href="https://www.kaikai.men/galgame-device/"/>
    <id>https://www.kaikai.men/galgame-device/</id>
    <published>2023-12-21T22:56:03.000Z</published>
    <updated>2025-08-30T14:15:58.637Z</updated>
    
    <content type="html"><![CDATA[<p>在 CPU 提升为 N200 后，Surface Go 4 似乎成为了一款不错的 Galgame 设备。当然现在还有另一个选择 Steamdeck，但是 Steamdeck 也有屏幕、风扇、系统兼容性等方面的劣势。尤其是在屏幕方面，差别非常大。总之先列举一下配置作参考。</p><h4 id="Surface-系列"><a href="#Surface-系列" class="headerlink" title="Surface 系列"></a>Surface 系列</h4><table><thead><tr><th align="left">名称</th><th align="center">配置</th><th align="center">重量</th><th align="center">厚度</th><th align="center">CPU分数</th></tr></thead><tbody><tr><td align="left">Surface Go</td><td align="center">奔腾 G4415Y HD615 8G 128&#x2F;256G 1800*1200</td><td align="center">522g</td><td align="center">8.3mm</td><td align="center">1591</td></tr><tr><td align="left">Surface Go 2</td><td align="center">奔腾 G4425Y HD615 8G 128G 1920*1280</td><td align="center">544g</td><td align="center">8.3mm</td><td align="center">1696</td></tr><tr><td align="left">Surface Go 2</td><td align="center">酷睿 M3 8100Y HD615 8G 128&#x2F;256G 1920*1280</td><td align="center">544g</td><td align="center">8.3mm</td><td align="center">2878</td></tr><tr><td align="left">Surface Go 3</td><td align="center">奔腾 G6500Y HD615-23EU@900M 8G 128G 1920*1280</td><td align="center">544g</td><td align="center">8.3mm</td><td align="center">3022</td></tr><tr><td align="left">Surface Go 3</td><td align="center">酷睿 i3 10100Y HD615-24EU@1G 8G 128&#x2F;256G 1920*1280</td><td align="center">544g</td><td align="center">8.3mm</td><td align="center">2935</td></tr><tr><td align="left">Go 4 Business</td><td align="center">酷睿 N200 UHD 8G 64&#x2F;128&#x2F;256G UFS 1920*1280</td><td align="center">521g</td><td align="center">8.3mm</td><td align="center">5455</td></tr></tbody></table><h4 id="Steamdeck-系列"><a href="#Steamdeck-系列" class="headerlink" title="Steamdeck 系列"></a>Steamdeck 系列</h4><table><thead><tr><th align="left">名称</th><th align="center">配置</th><th align="center">重量</th><th align="center">厚度</th><th align="center">屏幕</th></tr></thead><tbody><tr><td align="left">Steamdeck</td><td align="center">7nm Zen2 8CU 16G 64G-1T</td><td align="center">669g</td><td align="center">49mm</td><td align="center">7寸 1280 × 800</td></tr><tr><td align="left">Steamdeck OLED</td><td align="center">6nm Zen2 8CU 16G 512G-1T</td><td align="center">640g</td><td align="center">49mm</td><td align="center">7.4寸 1280 × 800@90 HDR</td></tr></tbody></table><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p>两者还是有挺大区别的，前几代 Surface Go 的 CPU 性能基本已经脱离主流了，毕竟被动散热，上架就是同时代低端性能，跑 E-mote&#x2F;Live2D 都存在一定性能问题。手头的 Surface Go 一代跑 Steam 客户端本身都显得很勉强。4 代的 N200 CPU 性能其实也是本代低端，但毕竟刚上市还过得去。</p><p>所以针对 Galgame，Surface 的主要且唯一巨大的优势就是屏幕，无风扇算个小优，系统优势不大，Deck 也可以装 Win 切换。</p><p>而 Steamdeck 毕竟是游戏机，能跑的都能跑，只是屏幕差距对 Galgame 来说是个硬伤，性能则显得相对冗余。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 CPU 提升为 N200 后，Surface Go 4 似乎成为了一款不错的 Galgame 设备。当然现在还有另一个选择 Steamdeck，但是 Steamdeck 也有屏幕、风扇、系统兼容性等方面的劣势。尤其是在屏幕方面，差别非常大。总之先列举一下配置作参考。&lt;/</summary>
      
    
    
    
    <category term="游戏中心" scheme="https://www.kaikai.men/categories/%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="Galgame" scheme="https://www.kaikai.men/tags/Galgame/"/>
    
    <category term="Game Device" scheme="https://www.kaikai.men/tags/Game-Device/"/>
    
  </entry>
  
  <entry>
    <title>与硬盘相关的若干 raspbian 命令</title>
    <link href="https://www.kaikai.men/commands-about-hdd-on-raspbian/"/>
    <id>https://www.kaikai.men/commands-about-hdd-on-raspbian/</id>
    <published>2023-12-17T21:56:03.000Z</published>
    <updated>2025-08-30T14:15:58.637Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> fdisk -l                   <span class="comment"># 列举设备或分区</span></span><br><span class="line"><span class="built_in">sudo</span> blkid                      <span class="comment"># 查看硬盘 UUID，只列举物理储存设备</span></span><br><span class="line"><span class="built_in">sudo</span> fdisk /dev/sda             <span class="comment"># 互动式硬盘分区</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> mkfs.ext4 /dev/sda         <span class="comment"># 格式化整个硬盘</span></span><br><span class="line"><span class="built_in">sudo</span> mkfs.ext4 /dev/sda1        <span class="comment"># 仅格式化第一个分区</span></span><br><span class="line"><span class="built_in">sudo</span> e2label /dev/sda momoda    <span class="comment"># 给硬盘命名为 momoda</span></span><br><span class="line"><span class="built_in">sudo</span> e2label /dev/sda           <span class="comment"># 查看硬盘名字</span></span><br><span class="line"><span class="built_in">ls</span> /dev/disk/by-label/momoda    <span class="comment"># 以硬盘名字指向硬盘，方便硬盘位置变动后正常挂载</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> mount /dev/sda ~/momoda    <span class="comment"># 挂载硬盘</span></span><br><span class="line"><span class="built_in">sudo</span> umount /dev/sda            <span class="comment"># 卸载硬盘</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> <span class="variable">$USER</span>:<span class="variable">$USER</span> ~/momoda <span class="comment"># 修改硬盘访问权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载 windows 共享文件夹：命令，远端路径（Windows端），本地路径，用户名，密码，编码，文件权限，文件夹权限</span></span><br><span class="line"><span class="built_in">sudo</span> mount.cifs //&lt;主机IP或主机名&gt;/&lt;共享目录&gt; ~/&lt;本地映射目录&gt; -o username=&lt;Win主机设置的共享用户名&gt;,password=&lt;Win主机设置的共享密码&gt;,iocharset=utf8,file_mode=0777,dir_mode=0777</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install smartmontools  <span class="comment"># smartctl 命令属于 smartmontools 包</span></span><br><span class="line"><span class="built_in">sudo</span> smartctl -a /dev/sda       <span class="comment"># 查看硬盘健康状态</span></span><br><span class="line"><span class="built_in">sudo</span> hdparm -I /dev/sda         <span class="comment"># 查看硬盘健康状态（另一种方式）</span></span><br><span class="line"></span><br><span class="line">dos2unix /path/to/file          <span class="comment"># 将文件从 windows 格式转换为 unix 格式，可用 * 通配</span></span><br><span class="line">unix2dos /path/to/file          <span class="comment"># 将文件从 unix 格式转换为 windows 格式，可用 * 通配</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自动挂载硬盘</span></span><br><span class="line">nano /etc/fstab</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &lt;device&gt;                &lt;mountpoint&gt;        &lt;file system&gt; &lt;options&gt; &lt;dump&gt; &lt;fschk&gt;</span><br><span class="line">/dev/disk/by-label/momoda /home/kaikai/momoda  ext4          defaults  0      0</span><br></pre></td></tr></table></figure><p>关于 fstab 的参数说明：<a href="https://www.redhat.com/sysadmin/etc-fstab">https://www.redhat.com/sysadmin/etc-fstab</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="命令行" scheme="https://www.kaikai.men/categories/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
    <category term="Raspbian" scheme="https://www.kaikai.men/tags/Raspbian/"/>
    
    <category term="linux" scheme="https://www.kaikai.men/tags/linux/"/>
    
    <category term="commands about HDD" scheme="https://www.kaikai.men/tags/commands-about-HDD/"/>
    
  </entry>
  
  <entry>
    <title>树莓派 4B 命令行部署 BT/PT 下载机</title>
    <link href="https://www.kaikai.men/BitTorrent-on-raspberry-pi-4B/"/>
    <id>https://www.kaikai.men/BitTorrent-on-raspberry-pi-4B/</id>
    <published>2023-12-16T14:26:16.000Z</published>
    <updated>2025-08-30T14:15:58.637Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派 4B 相比于 3B&#x2F;3B+ 等 3 系有很多改进，但主要的是内存从 1G 加到了顶配版 8G，网卡也从百兆升级到了千兆，使得树莓派 4B 有了作为下载机的实用性。</p><p>系统直接使用官方的 Raspberry Pi。BT 软件一开始尝试使用 qBittorrent 的命令行版本 qBittorrent-nox，开启服务用 web UI 进行远程控制。但实际使用后发现在高压力下，qBittorrent-nox 因为内存占用巨大而频繁被杀进程，然后由系统服务重启，再被杀，再重启，最差时每两三分钟就被杀一次。报错日志看得我心惊肉跳。频繁异常重启也导致了文件丢失、下载进度丢失以及网站封禁等情况，其配置中关于内存限制的参数完全无用，搜索后发现官方开发组把很多反馈，包括内存控制、磁盘碎片、重启丢文件等都甩锅给 libtorrent。遂放弃。</p><blockquote><p><em>对 qBittorrent 的评价又下降了。之前在 windows 下也是因为 qBittorrent 的缺陷（数量巨大的硬盘碎片）而放弃的。</em></p></blockquote><p>一番周折后，最终改用了 Transmission 作为 BT&#x2F;PT 服务器端（transmission-daemon），开启 RPC 以允许 Web UI 和第三方客户端连接，Samba 作为局域网文件共享服务器的方案。并自行编写了 RSS 下载脚本以实现 RSS 订阅自动下载。</p><h2 id="Transmission"><a href="#Transmission" class="headerlink" title="Transmission"></a>Transmission</h2><h4 id="安装与文件目录连接"><a href="#安装与文件目录连接" class="headerlink" title="安装与文件目录连接"></a>安装与文件目录连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install transmission-daemon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得配置文件的权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /etc/transmission-daemon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置配置文件软链接</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /home/<span class="variable">$USER</span>/.config/transmission-daemon/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/transmission-daemon/settings.json /home/<span class="variable">$USER</span>/.config/transmission-daemon/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /home/<span class="variable">$USER</span>/.config/transmission-daemon/</span><br><span class="line"></span><br><span class="line"><span class="comment">## 挂载 USB 外接硬盘并设置目录权限 </span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /home/<span class="variable">$USER</span>/Momoda               <span class="comment"># Momoda 是硬盘挂载目录</span></span><br><span class="line"><span class="built_in">sudo</span> mount /dev/sda1 /home/<span class="variable">$USER</span>/Momoda        <span class="comment"># 挂载硬盘</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /home/<span class="variable">$USER</span>/Momoda   <span class="comment"># 设置权限</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /home/<span class="variable">$USER</span>/Momoda/BT                 <span class="comment"># 建立下载目录</span></span><br></pre></td></tr></table></figure><h4 id="修改系统服务设置"><a href="#修改系统服务设置" class="headerlink" title="修改系统服务设置"></a>修改系统服务设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改启动脚本</span></span><br><span class="line"><span class="built_in">sudo</span> nano /etc/init.d/transmission-daemon</span><br><span class="line">&gt;&gt; 在 nano 编辑器中，修改 USER=&lt;YOURUSERNAME&gt; 为你的用户名，&lt;Ctrl+S&gt; 保存 &lt;Ctrl+X&gt; 退出。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改服务配置</span></span><br><span class="line"><span class="built_in">sudo</span> nano /etc/systemd/system/multi-user.target.wants/transmission-daemon.service</span><br><span class="line">&gt;&gt; 在 nano 编辑器中，继续修改 User=&lt;YOURUSERNAME&gt; 为你的用户名，&lt;Ctrl+S&gt; 保存 &lt;Ctrl+X&gt; 退出。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>Trasmission 会在停止服务时自动保存配置文件，运行服务时修改会被覆盖，必须停机修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop transmission-daemon</span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">nano ~/.config/transmission-daemon/settings.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分参数后续可以在 web UI 中再次修改，但当前另一些参数只能在配置文件中修改。</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;download-dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/kaikai/Momoda/BT&quot;</span><span class="punctuation">,</span> <span class="comment">// 设置下载目录，kaikai 替换为你的用户名</span></span><br><span class="line">    <span class="attr">&quot;rpc-whitelist-enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>            <span class="comment">// 只允许白名单内的 IP 访问</span></span><br><span class="line">    <span class="attr">&quot;rpc-whitelist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.*.*&quot;</span><span class="punctuation">,</span>           <span class="comment">// 局域网白名单，如果公网要访问则为 *.*.*.*</span></span><br><span class="line">    <span class="attr">&quot;rpc-authentication-required&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>     <span class="comment">// 因为只是家用，不需要密码。若公网访问则设置为 true，之后下两条有效</span></span><br><span class="line">    <span class="attr">&quot;rpc-user-name&quot;</span><span class="punctuation">:</span> &lt;username&gt;<span class="punctuation">,</span>              <span class="comment">// 独立的用于 webUI/RPC 登录的用户名，自己设置，和本文其它用户名无关</span></span><br><span class="line">    <span class="attr">&quot;rpc-password&quot;</span><span class="punctuation">:</span> &lt;password&gt;<span class="punctuation">,</span>               <span class="comment">// 独立的用于 webUI/RPC 登录的密码，transmission 会自动修改内容加密</span></span><br><span class="line">    <span class="attr">&quot;umask&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span>                               <span class="comment">// 设置下载文件的权限</span></span><br><span class="line">    <span class="attr">&quot;preallocation&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>                       <span class="comment">// 设置预分配磁盘空间方法，0 No 1 Fast 2 Full</span></span><br><span class="line">    <span class="attr">&quot;watch-dir-enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>                <span class="comment">// 开启监视目录，将种子文件放入监视目录，transmission 会自动开始下载</span></span><br><span class="line">    <span class="attr">&quot;watch-dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/kaikai&quot;</span><span class="punctuation">,</span>              <span class="comment">// 设置监视目录路径</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="（可选）替换默认的-webui-为-Flood-for-transmission"><a href="#（可选）替换默认的-webui-为-Flood-for-transmission" class="headerlink" title="（可选）替换默认的 webui 为 Flood-for-transmission"></a>（可选）替换默认的 webui 为 Flood-for-transmission</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/johman10/flood-for-transmission/releases/download/latest/flood-for-transmission.zip</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip flood-for-transmission.zip </span><br><span class="line"><span class="comment"># 备份原来的 webui</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /usr/share/transmission/web /usr/share/transmission/web.bak </span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r flood-for-transmission /usr/share/transmission/web </span><br></pre></td></tr></table></figure><blockquote><p>还有 <a href="https://github.com/ronggang/transmission-web-control">Transmission-web-control</a>、<a href="https://github.com/6c65726f79/Transmissionic">Transmissionioc</a> 等多个选择。当然默认的也很好。<br>另外还有独立的客户端比如 <a href="https://github.com/transmission-remote-gui/transgui">Transmission Remote GUI</a>，如果有多个下载服务器的话用客户端更好。</p></blockquote><h4 id="重启-transmission-daemon-服务"><a href="#重启-transmission-daemon-服务" class="headerlink" title="重启 transmission-daemon 服务"></a>重启 transmission-daemon 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start transmission-daemon </span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status transmission-daemon </span><br></pre></td></tr></table></figure><h4 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看树莓派的 IP 地址</span></span><br><span class="line">ip a </span><br></pre></td></tr></table></figure><p>在浏览器中输入 <code>http://&lt;树莓派的ip&gt;:9091</code> 即可访问 webUI，如果设置了 <code>&quot;rpc-authentication-required&quot;: true</code> 则会跳出认证输入框。使用 RPC 远程客户端也是类似设置。</p><h4 id="RSS-订阅"><a href="#RSS-订阅" class="headerlink" title="RSS 订阅"></a>RSS 订阅</h4><p>Transmission 并不支持 RSS 订阅，所以我自己写了个脚本，定期检查指定的 RSS，并通过 RPC 接口发送 torrent-add 消息给 Transmisson。<a href="https://github.com/kaikaiiiiiii/rss-feed-down">https://github.com/kaikaiiiiiii/rss-feed-down</a> 。特色在于支持 PAC 代理读取 RSS。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kaikaiiiiiii/rss-feed-down</span><br><span class="line"><span class="built_in">cd</span> rss-feed-down</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">node ./rss.js</span><br><span class="line"><span class="comment"># 在 rss.js 中修改下载目录 savepath = &lt;path&gt;</span></span><br><span class="line"><span class="comment"># 在 rssFeeds.txt 修改订阅源，格式为 &lt;name&gt;,&lt;url&gt;,&lt;useProxy&gt;</span></span><br></pre></td></tr></table></figure><p>通过 crontab 定时执行脚本，实现 RSS 订阅更新并自动下载 torrent 文件。</p><h2 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h2><h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install samba samba-common-bin</span><br><span class="line"><span class="built_in">sudo</span> nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p> <code>smb.conf</code> 文件有一堆内容，拉到最下面，修改或添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Pi]                        # 虚拟共享文件夹的名字，后续访问时的路径为 \\&lt;树莓派的ip&gt;\Pi</span><br><span class="line">path = /home/kaikai/Momoda  # Pi 虚拟文件夹对应的本地目录</span><br><span class="line">writeable=Yes               # 可以写，即可以上传文件，同时也可以删除文件</span><br><span class="line">create mask=0777            # 新建文件的权限</span><br><span class="line">directory mask=0777         # 新建文件夹的权限</span><br><span class="line">public=no                   # 不是公共文件夹，ananymous 不能访问</span><br><span class="line">                            # 编辑完成后按 Ctrl+S 保存，Ctrl+X 退出</span><br></pre></td></tr></table></figure><h4 id="添加-samba-的授权用户"><a href="#添加-samba-的授权用户" class="headerlink" title="添加 samba 的授权用户"></a>添加 samba 的授权用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kaikaiHome 为独立的用于 samba 登录的用户名，和本文其它用户名无关</span></span><br><span class="line"><span class="built_in">sudo</span> smbpasswd -a kaikaiHome </span><br></pre></td></tr></table></figure><p>随后系统会提示输入密码，输入两次并确认</p><h4 id="重启-samba-服务"><a href="#重启-samba-服务" class="headerlink" title="重启 samba 服务"></a>重启 samba 服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart smbd</span><br></pre></td></tr></table></figure><p>在 Windows 的 &lt;映射网络驱动器&gt; 或其它可以用 smb&#x2F;cifs 的程序 app 输入 \\&lt;树莓派的ip&gt;\Pi 并输入 kaikaiHome 的用户名和密码即可访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;树莓派 4B 相比于 3B&amp;#x2F;3B+ 等 3 系有很多改进，但主要的是内存从 1G 加到了顶配版 8G，网卡也从百兆升级到了千兆，使得树莓派 4B 有了作为下载机的实用性。&lt;/p&gt;
&lt;p&gt;系统直接使用官方的 Raspberry Pi。BT 软件一开始尝试使用 qBi</summary>
      
    
    
    
    <category term="命令行" scheme="https://www.kaikai.men/categories/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
    <category term="树莓派" scheme="https://www.kaikai.men/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    <category term="Raspberry Pi" scheme="https://www.kaikai.men/tags/Raspberry-Pi/"/>
    
    <category term="BitTorrent" scheme="https://www.kaikai.men/tags/BitTorrent/"/>
    
    <category term="BT 下载" scheme="https://www.kaikai.men/tags/BT-%E4%B8%8B%E8%BD%BD/"/>
    
    <category term="PT" scheme="https://www.kaikai.men/tags/PT/"/>
    
    <category term="Transmission" scheme="https://www.kaikai.men/tags/Transmission/"/>
    
    <category term="Samba" scheme="https://www.kaikai.men/tags/Samba/"/>
    
    <category term="qBittorrent" scheme="https://www.kaikai.men/tags/qBittorrent/"/>
    
    <category term="Flood" scheme="https://www.kaikai.men/tags/Flood/"/>
    
    <category term="RSS" scheme="https://www.kaikai.men/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>微星 B450M 迫击炮主板说明书</title>
    <link href="https://www.kaikai.men/MSI-B450M-Mortar-Manual/"/>
    <id>https://www.kaikai.men/MSI-B450M-Mortar-Manual/</id>
    <published>2023-11-24T18:37:29.000Z</published>
    <updated>2025-08-30T14:15:58.637Z</updated>
    
    <content type="html"><![CDATA[<p>同上，这是微星 MSI B450M 迫击炮主板说明书。<a href="../attach/2023/11/M7B89v1.4_SC.pdf">下载文件</a></p><p>其它参数及兼容设备列表不在说明书里，在官网的 <a href="https://www.msi.cn/Motherboard/B450M-mortar/support">兼容性报告</a> 里。</p><object data="../attach/2023/11/M7B89v1.4_SC.pdf" type="application/pdf" width="100%" height="850px">  <p>如果您的浏览器不支持 PDF 文件，请<a href="../attach/2023/11/M7B89v1.4_SC.pdf">下载文件</a>查看。</p></object>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;同上，这是微星 MSI B450M 迫击炮主板说明书。&lt;a href=&quot;../attach/2023/11/M7B89v1.4_SC.pdf&quot;&gt;下载文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其它参数及兼容设备列表不在说明书里，在官网的 &lt;a href=&quot;https://www.msi.c</summary>
      
    
    
    
    <category term="硬件折腾" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E4%BB%B6%E6%8A%98%E8%85%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>索爱 MW600 使用手册</title>
    <link href="https://www.kaikai.men/Sony-MW600-Manual/"/>
    <id>https://www.kaikai.men/Sony-MW600-Manual/</id>
    <published>2023-11-24T18:30:11.000Z</published>
    <updated>2025-08-30T14:15:58.637Z</updated>
    
    <content type="html"><![CDATA[<p>同上，这是 Sony Ericsson MW600 索尼爱立信 MW600 蓝牙耳机说明书。<a href="attach/2023/11/userguide_ZT_MW600_1236-6502.1.pdf">下载文件</a></p><ol><li>关机状态下长按开机键 ⏼ 不放经过开机阶段继续按住进入配对模式，使用滑动条选择覆盖哪个旧配对。</li><li>MW600 连接的通话设备和音乐设备是独立切换的，分别通过长按 ⏯ 或 📞 选择。</li><li>在待机模式下长按 ⏯ 选择设备时，存在第四项 FM 收音机功能。FM 为自带功能不需要蓝牙连接其它设备。</li></ol><table><thead><tr><th>状态</th><th>按键</th><th>操作</th><th>备注</th></tr></thead><tbody><tr><td>待机模式</td><td>长按 ⏯</td><td>长按选择音乐播放配对设备</td><td>使用滑动条选择设备列表</td></tr><tr><td>待机模式</td><td>长按 📞</td><td>长按选择通话配对设备</td><td>使用滑动条选择设备列表</td></tr><tr><td>待机模式</td><td>📞</td><td>启动手机语音助手</td><td>部分电脑设备也有语音助手</td></tr><tr><td>待机模式</td><td>📞📞</td><td>重拨</td><td></td></tr><tr><td>待机模式</td><td>⏯</td><td>启动当前音乐&#x2F;视频播放</td><td>部分设备会自动启动默认音乐播放器</td></tr><tr><td>播放状态</td><td>⏯</td><td>暂停当前音乐&#x2F;视频播放</td><td></td></tr><tr><td>来电状态</td><td>📞</td><td>短按接听，长按拒绝接听</td><td></td></tr><tr><td>通话状态</td><td>📞</td><td>短按挂断，长按切换第二通话</td><td>另有耳机发声 &#x2F; 手机发声切换功能</td></tr><tr><td>FM 模式</td><td>⏮ ⏭</td><td>长按搜索，短按微调</td><td>屏幕显示当前频率</td></tr><tr><td>所有状态</td><td>⊂&#x3D;&#x3D;&#x3D;&#x3D;⊃</td><td>感应滑动条调整音量</td><td>设备列表时选择配对设备</td></tr><tr><td>配对状态</td><td>📞⏼</td><td>同时长按两键</td><td>重新设置耳机，清空配对设备</td></tr></tbody></table><object data="../attach/2023/11/userguide_ZT_MW600_1236-6502.1.pdf" type="application/pdf" width="100%" height="850px">  <p>如果您的浏览器不支持 PDF 文件，请<a href="../attach/2023/11/userguide_ZT_MW600_1236-6502.1.pdf">下载文件</a>查看。</p></object>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;同上，这是 Sony Ericsson MW600 索尼爱立信 MW600 蓝牙耳机说明书。&lt;a href=&quot;attach/2023/11/userguide_ZT_MW600_1236-6502.1.pdf&quot;&gt;下载文件&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关机状态下长按开机</summary>
      
    
    
    
    <category term="硬件折腾" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E4%BB%B6%E6%8A%98%E8%85%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>OpenMove 使用手册</title>
    <link href="https://www.kaikai.men/Shokz-OpenMove-Manual/"/>
    <id>https://www.kaikai.men/Shokz-OpenMove-Manual/</id>
    <published>2023-11-24T18:23:08.000Z</published>
    <updated>2025-08-30T14:15:58.637Z</updated>
    
    <content type="html"><![CDATA[<p>买了个韶音，发现说明书不好找，就放这里了。<a href="../attach/2023/11/Shokz-OpenMove.pdf">下载文件</a></p><ol><li>关机状态下长按音量 ⊕ 不放开机后继续按住进入配对模式。</li><li>配对状态下同时长按耳机键与音量 ⊕ 键开启双重配对。</li><li>配对状态下同时长按耳机键与音量 ⊖ 键关闭双重配对。</li><li>配对状态下同时长按耳机键、音量 ⊕ 键与音量 ⊖ 键恢复出厂设置，恢复后需要关机再开。</li></ol><table><thead><tr><th>耳机键（多功能键）</th><th>状态</th><th>操作</th></tr></thead><tbody><tr><td>播放&#x2F;暂停音乐</td><td>待机</td><td>单击</td></tr><tr><td>拨打上一次通话</td><td>待机</td><td>双击</td></tr><tr><td>唤醒语音助手</td><td>待机</td><td>长按</td></tr><tr><td>下一首音乐</td><td>音乐播放</td><td>双击</td></tr><tr><td>上一首音乐</td><td>音乐播放</td><td>三击</td></tr><tr><td>接听电话</td><td>来电</td><td>单击</td></tr><tr><td>拒接电话</td><td>来电</td><td>长按</td></tr><tr><td>挂断电话</td><td>通话中</td><td>单击</td></tr><tr><td>挂断当前电话并切换到第二个通话</td><td>通话中</td><td>长按</td></tr><tr><td>切换系统语言</td><td>配对状态</td><td>双击</td></tr></tbody></table><object data="../attach/2023/11/Shokz-OpenMove.pdf" type="application/pdf" width="100%" height="850px">  <p>如果您的浏览器不支持 PDF 文件，请<a href="../attach/2023/11/Shokz-OpenMove.pdf">下载文件</a>查看。</p></object><p>顺便测试 HTML 插入 PDF 的方法，不需要 hexo-pdf 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&quot;../attach/2023/11/Shokz-OpenMove.pdf&quot; width=&quot;100%&quot; height=&quot;850px&quot;  type=&quot;application/pdf&quot; /&gt;</span><br></pre></td></tr></table></figure><p>咨询了 chatGPT，还有稍复杂的方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;object data=&quot;../attach/2023/11/Shokz-OpenMove.pdf&quot; type=&quot;application/pdf&quot; width=&quot;100%&quot; height=&quot;850px&quot;&gt;</span><br><span class="line">  &lt;p&gt;如果您的浏览器不支持 PDF 文件，请&lt;a href=&quot;../attach/2023/11/Shokz-OpenMove.pdf&quot;&gt;下载文件&lt;/a&gt;查看。&lt;/p&gt;</span><br><span class="line">&lt;/object&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;买了个韶音，发现说明书不好找，就放这里了。&lt;a href=&quot;../attach/2023/11/Shokz-OpenMove.pdf&quot;&gt;下载文件&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关机状态下长按音量 ⊕ 不放开机后继续按住进入配对模式。&lt;/li&gt;
&lt;li&gt;配对状态下同时长按</summary>
      
    
    
    
    <category term="硬件折腾" scheme="https://www.kaikai.men/categories/%E7%A1%AC%E4%BB%B6%E6%8A%98%E8%85%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>我好像没从租光盘上省下什么钱</title>
    <link href="https://www.kaikai.men/not-saving-much-from-disc-renting/"/>
    <id>https://www.kaikai.men/not-saving-much-from-disc-renting/</id>
    <published>2023-11-21T21:17:08.000Z</published>
    <updated>2025-08-30T14:15:58.637Z</updated>
    
    <content type="html"><![CDATA[<p>在 PSN 会员费又一次涨价后，我重新审视了光盘租赁的经济性。在过去不多的几次租光盘经历中，我发现自己其实并没有节约多少钱。于是做了一些主观分析，尝试厘清这个问题。</p><h2 id="一，实际支出主要来自于光盘降价和背刺"><a href="#一，实际支出主要来自于光盘降价和背刺" class="headerlink" title="一，实际支出主要来自于光盘降价和背刺"></a>一，实际支出主要来自于光盘降价和背刺</h2><p>虽然老猎人等二手盘商家的买卖差价都只有 10-15 元，但实际上，由于每张光盘在手上存留的时间都很长，光盘二手价格的下降才是真正的实际支出。尽管没有明确计算（因为有几张盘目前还在手上承受着掉价损失），但大致估计下来每张盘要损失 100-200 左右。</p><p>存留时间长带来的另一个风险是同游戏在各数字渠道的赠送或打折。比如《底特律：化身为人》《战神4》《尼尔：自动人形》《十三机兵防卫圈》等都是在光盘租赁期间，甚至尚未开始游玩时，就在 PSN XGPU 等会免或入库。光盘租赁成了无意义的支出，同时还得承担一笔会免大降价损失，俗称『背刺』。数字游戏的大幅折扣或赠送冲击光盘价格是市场的常态，实质是同一商品的渠道间竞争，但真轮到自己头上了还是很不好受。</p><h2 id="二，引出问题：为什么会存留时间较长"><a href="#二，引出问题：为什么会存留时间较长" class="headerlink" title="二，引出问题：为什么会存留时间较长"></a>二，引出问题：为什么会存留时间较长</h2><p>闲余时间有限，而可选择的游戏却很多，有限的时间分摊给了不同的游戏。尤其是暴雪全家桶等长消耗类游戏占用了相当一块时间。</p><p>和直觉不同的是，虽然游戏总量很多，但每个单机游戏实际分配到的时间不会减少，因为通关时间是相对固定的。代之的是游戏完成周期不断地拉长，甚至可能断断续续持续几年，也使得光盘留存时间不断延长。很多故事剧情驱动的游戏更需要完整的时间段和精神舒适的状态才能游玩，相比于几分钟一局的消耗类游戏，在选择上也不占优势，更加长了通关周期。</p><p>另外，XGPU 等订阅服务的兴起、多年积累的 PSN 会免库、Steam 屡次大促积累的游戏库、Epic 坚持不懈的游戏赠送，使得排队列表越来越长，进一步稀释了光盘游戏的时间密度。</p><p>光盘租赁的固有缺陷，需要收发快递、换盘费事保管麻烦、资金占用等，虽然也都是劣势，却并不是导致存留时间长的原因，甚至是反向因素。其中唯与存留时长正相关的只有『计划赶不上变化』一项，买的时候计划着要玩，两天以后快递到了，却没时间玩，就变成了无效留存。</p><h2 id="三，还有其它因素"><a href="#三，还有其它因素" class="headerlink" title="三，还有其它因素"></a>三，还有其它因素</h2><ol><li><p>游戏口味的宽泛减弱了对游戏库的二次筛选，增大了平均游戏周期。</p></li><li><p>对游戏新作时效性需求不高，不追求第一时间体验。</p><p> 新作发售时光盘版与数字版价格一致。如果第一时间购买，那么无论后续掉价几何，全价光盘版可以二手出售就仍比全价数字版有价差优势。但迄今为止追求第一时间玩到的单机游戏并不多。当游戏进入折扣周期后，光盘版价格与数字版价格变得互有高低，这就回到本文开头的情况了——因为存留周期掉价和背刺，我没从租光盘上省下什么钱。</p></li><li><p>其它生活因素的时间挤压。</p><p>生活中的所有闲余时间都是相互挤占的，副业加班阅读学习运动健身动漫娱乐等等，都在分摊不多的时间。当生活休闲中加入新要素，游戏时间分配就变得更加捉襟见肘。</p></li></ol><h2 id="四，为什么重新考虑光盘租赁"><a href="#四，为什么重新考虑光盘租赁" class="headerlink" title="四，为什么重新考虑光盘租赁"></a>四，为什么重新考虑光盘租赁</h2><p>目前的花费和实际消耗的时间不匹配。</p><p>PSN 和 XGP 费用在不断上涨，低价区限制越发严格，数字游戏的成本在变高，Epic 送的游戏越来越水，游戏总时间也在缩减。会员费交了不用，游戏买了不玩，光盘租了不还，都是浪费。在有限的时间下，几个游戏渠道不再是互为补充，而变成了相互冲突的状态。光盘租赁在大作上的相对价格优势重新凸显，比如《只狼》至今数字版最大折扣也就 50%，和光盘租赁的最坏支出差不多。另外如前文所述，如果减除 PSN 和 XGP，游戏库缩小，光盘游戏的存留时间也有可能减缩，以降低光盘租赁的平均成本。</p><p>缩减游戏库的纠结在于，停用 PSN 和 XGP 除了失去两个游戏库外，还会失去联网功能，同样会影响到一些游戏的体验。而另一方面，光盘的优势也需要一定的条件。一是其它渠道挤兑要少，因此排除第一方大作。二是通关周期短，因此不能是长消耗类游戏。三是游戏要优质，优先级高，且单价高，口碑好，市场稳定，最好是次新大作。</p><p>选择同时意味着放弃。</p><h2 id="五，总不能什么都要吧"><a href="#五，总不能什么都要吧" class="headerlink" title="五，总不能什么都要吧"></a>五，总不能什么都要吧</h2><p>方案一，彻底数字化，PSNP 二档和 XGPU 二选一或二选二，以帐号共享进一步降低成本。主机选数字版，游戏以库存为主，大作等 50off 或随缘等入库，真有垂涎的就全价购入。</p><p>方案二，单平台化。放弃 XGPU，XSX 出售。只开 PSN 二档并出售 Home 位，PS5 购买光驱版。大作用光盘作为补充。</p><p>方案三，买块好显卡，放弃主机，保留 PC + SteamDeck。一别两宽，各生欢喜。</p><p>方案四，我全都要。</p><hr><p>2024-11-27 edit:</p><p>目前实践现状是方案二+方案三，PSN 二档已经提供了足够的时间消耗，并没有租赁光盘，买光驱版主要是考虑二手保值问题。</p><p>SteamDeck 主要是出门&#x2F;过年回家使用，同时也是一个现成的 Linux 机，比虚拟机方便且完善。</p><p>PC 处理各种杂事，偶尔暴雪全家桶。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 PSN 会员费又一次涨价后，我重新审视了光盘租赁的经济性。在过去不多的几次租光盘经历中，我发现自己其实并没有节约多少钱。于是做了一些主观分析，尝试厘清这个问题。&lt;/p&gt;
&lt;h2 id=&quot;一，实际支出主要来自于光盘降价和背刺&quot;&gt;&lt;a href=&quot;#一，实际支出主要来自于光</summary>
      
    
    
    
    <category term="游戏中心" scheme="https://www.kaikai.men/categories/%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BF%83/"/>
    
    
    <category term="游戏光盘租赁" scheme="https://www.kaikai.men/tags/%E6%B8%B8%E6%88%8F%E5%85%89%E7%9B%98%E7%A7%9F%E8%B5%81/"/>
    
    <category term="收益计算" scheme="https://www.kaikai.men/tags/%E6%94%B6%E7%9B%8A%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
</feed>
